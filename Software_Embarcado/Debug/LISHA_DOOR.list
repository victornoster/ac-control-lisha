
LISHA_DOOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009c40  08009c40  00019c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ecc  08009ecc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08009ecc  08009ecc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ecc  08009ecc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  08009f30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08009f30  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f960  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a27  00000000  00000000  0003fa27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  00044450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001070  00000000  00000000  00045988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b95  00000000  00000000  000469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a911  00000000  00000000  0006758d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8721  00000000  00000000  00081e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067f0  00000000  00000000  0013a5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00140db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009c28 	.word	0x08009c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08009c28 	.word	0x08009c28

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_fmul>:
 8000240:	0243      	lsls	r3, r0, #9
 8000242:	0a5b      	lsrs	r3, r3, #9
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	464f      	mov	r7, r9
 8000248:	4646      	mov	r6, r8
 800024a:	4699      	mov	r9, r3
 800024c:	46d6      	mov	lr, sl
 800024e:	0fc3      	lsrs	r3, r0, #31
 8000250:	0045      	lsls	r5, r0, #1
 8000252:	4698      	mov	r8, r3
 8000254:	b5c0      	push	{r6, r7, lr}
 8000256:	464b      	mov	r3, r9
 8000258:	1c0f      	adds	r7, r1, #0
 800025a:	0e2d      	lsrs	r5, r5, #24
 800025c:	d100      	bne.n	8000260 <__aeabi_fmul+0x20>
 800025e:	e0cb      	b.n	80003f8 <__aeabi_fmul+0x1b8>
 8000260:	2dff      	cmp	r5, #255	; 0xff
 8000262:	d100      	bne.n	8000266 <__aeabi_fmul+0x26>
 8000264:	e0cf      	b.n	8000406 <__aeabi_fmul+0x1c6>
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	04d2      	lsls	r2, r2, #19
 800026c:	431a      	orrs	r2, r3
 800026e:	2300      	movs	r3, #0
 8000270:	4691      	mov	r9, r2
 8000272:	2600      	movs	r6, #0
 8000274:	469a      	mov	sl, r3
 8000276:	3d7f      	subs	r5, #127	; 0x7f
 8000278:	027c      	lsls	r4, r7, #9
 800027a:	007b      	lsls	r3, r7, #1
 800027c:	0a64      	lsrs	r4, r4, #9
 800027e:	0e1b      	lsrs	r3, r3, #24
 8000280:	0fff      	lsrs	r7, r7, #31
 8000282:	2b00      	cmp	r3, #0
 8000284:	d100      	bne.n	8000288 <__aeabi_fmul+0x48>
 8000286:	e0a9      	b.n	80003dc <__aeabi_fmul+0x19c>
 8000288:	2bff      	cmp	r3, #255	; 0xff
 800028a:	d011      	beq.n	80002b0 <__aeabi_fmul+0x70>
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	00e4      	lsls	r4, r4, #3
 8000290:	04d2      	lsls	r2, r2, #19
 8000292:	4314      	orrs	r4, r2
 8000294:	4642      	mov	r2, r8
 8000296:	3b7f      	subs	r3, #127	; 0x7f
 8000298:	195b      	adds	r3, r3, r5
 800029a:	407a      	eors	r2, r7
 800029c:	2000      	movs	r0, #0
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	1c5d      	adds	r5, r3, #1
 80002a2:	2e0a      	cmp	r6, #10
 80002a4:	dd13      	ble.n	80002ce <__aeabi_fmul+0x8e>
 80002a6:	003a      	movs	r2, r7
 80002a8:	2e0b      	cmp	r6, #11
 80002aa:	d047      	beq.n	800033c <__aeabi_fmul+0xfc>
 80002ac:	4647      	mov	r7, r8
 80002ae:	e03f      	b.n	8000330 <__aeabi_fmul+0xf0>
 80002b0:	002b      	movs	r3, r5
 80002b2:	33ff      	adds	r3, #255	; 0xff
 80002b4:	2c00      	cmp	r4, #0
 80002b6:	d11e      	bne.n	80002f6 <__aeabi_fmul+0xb6>
 80002b8:	2202      	movs	r2, #2
 80002ba:	4316      	orrs	r6, r2
 80002bc:	4642      	mov	r2, r8
 80002be:	3501      	adds	r5, #1
 80002c0:	407a      	eors	r2, r7
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	35ff      	adds	r5, #255	; 0xff
 80002c6:	2e0a      	cmp	r6, #10
 80002c8:	dd00      	ble.n	80002cc <__aeabi_fmul+0x8c>
 80002ca:	e0e4      	b.n	8000496 <__aeabi_fmul+0x256>
 80002cc:	2002      	movs	r0, #2
 80002ce:	2e02      	cmp	r6, #2
 80002d0:	dc1c      	bgt.n	800030c <__aeabi_fmul+0xcc>
 80002d2:	3e01      	subs	r6, #1
 80002d4:	2e01      	cmp	r6, #1
 80002d6:	d842      	bhi.n	800035e <__aeabi_fmul+0x11e>
 80002d8:	2802      	cmp	r0, #2
 80002da:	d03d      	beq.n	8000358 <__aeabi_fmul+0x118>
 80002dc:	2801      	cmp	r0, #1
 80002de:	d166      	bne.n	80003ae <__aeabi_fmul+0x16e>
 80002e0:	2000      	movs	r0, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	05c0      	lsls	r0, r0, #23
 80002e6:	4308      	orrs	r0, r1
 80002e8:	07d2      	lsls	r2, r2, #31
 80002ea:	4310      	orrs	r0, r2
 80002ec:	bce0      	pop	{r5, r6, r7}
 80002ee:	46ba      	mov	sl, r7
 80002f0:	46b1      	mov	r9, r6
 80002f2:	46a8      	mov	r8, r5
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f6:	2203      	movs	r2, #3
 80002f8:	4316      	orrs	r6, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	3501      	adds	r5, #1
 80002fe:	407a      	eors	r2, r7
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	35ff      	adds	r5, #255	; 0xff
 8000304:	2e0a      	cmp	r6, #10
 8000306:	dd00      	ble.n	800030a <__aeabi_fmul+0xca>
 8000308:	e0e4      	b.n	80004d4 <__aeabi_fmul+0x294>
 800030a:	2003      	movs	r0, #3
 800030c:	2101      	movs	r1, #1
 800030e:	40b1      	lsls	r1, r6
 8000310:	26a6      	movs	r6, #166	; 0xa6
 8000312:	00f6      	lsls	r6, r6, #3
 8000314:	4231      	tst	r1, r6
 8000316:	d10a      	bne.n	800032e <__aeabi_fmul+0xee>
 8000318:	2690      	movs	r6, #144	; 0x90
 800031a:	00b6      	lsls	r6, r6, #2
 800031c:	4231      	tst	r1, r6
 800031e:	d116      	bne.n	800034e <__aeabi_fmul+0x10e>
 8000320:	3eb9      	subs	r6, #185	; 0xb9
 8000322:	3eff      	subs	r6, #255	; 0xff
 8000324:	420e      	tst	r6, r1
 8000326:	d01a      	beq.n	800035e <__aeabi_fmul+0x11e>
 8000328:	46a1      	mov	r9, r4
 800032a:	4682      	mov	sl, r0
 800032c:	e000      	b.n	8000330 <__aeabi_fmul+0xf0>
 800032e:	0017      	movs	r7, r2
 8000330:	4653      	mov	r3, sl
 8000332:	003a      	movs	r2, r7
 8000334:	2b02      	cmp	r3, #2
 8000336:	d00f      	beq.n	8000358 <__aeabi_fmul+0x118>
 8000338:	464c      	mov	r4, r9
 800033a:	4650      	mov	r0, sl
 800033c:	2803      	cmp	r0, #3
 800033e:	d1cd      	bne.n	80002dc <__aeabi_fmul+0x9c>
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	03c9      	lsls	r1, r1, #15
 8000344:	4321      	orrs	r1, r4
 8000346:	0249      	lsls	r1, r1, #9
 8000348:	20ff      	movs	r0, #255	; 0xff
 800034a:	0a49      	lsrs	r1, r1, #9
 800034c:	e7ca      	b.n	80002e4 <__aeabi_fmul+0xa4>
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	2200      	movs	r2, #0
 8000352:	20ff      	movs	r0, #255	; 0xff
 8000354:	03c9      	lsls	r1, r1, #15
 8000356:	e7c5      	b.n	80002e4 <__aeabi_fmul+0xa4>
 8000358:	20ff      	movs	r0, #255	; 0xff
 800035a:	2100      	movs	r1, #0
 800035c:	e7c2      	b.n	80002e4 <__aeabi_fmul+0xa4>
 800035e:	0c20      	lsrs	r0, r4, #16
 8000360:	4649      	mov	r1, r9
 8000362:	0424      	lsls	r4, r4, #16
 8000364:	0c24      	lsrs	r4, r4, #16
 8000366:	0027      	movs	r7, r4
 8000368:	0c0e      	lsrs	r6, r1, #16
 800036a:	0409      	lsls	r1, r1, #16
 800036c:	0c09      	lsrs	r1, r1, #16
 800036e:	4374      	muls	r4, r6
 8000370:	434f      	muls	r7, r1
 8000372:	4346      	muls	r6, r0
 8000374:	4348      	muls	r0, r1
 8000376:	0c39      	lsrs	r1, r7, #16
 8000378:	1900      	adds	r0, r0, r4
 800037a:	1809      	adds	r1, r1, r0
 800037c:	428c      	cmp	r4, r1
 800037e:	d903      	bls.n	8000388 <__aeabi_fmul+0x148>
 8000380:	2080      	movs	r0, #128	; 0x80
 8000382:	0240      	lsls	r0, r0, #9
 8000384:	4684      	mov	ip, r0
 8000386:	4466      	add	r6, ip
 8000388:	043f      	lsls	r7, r7, #16
 800038a:	0408      	lsls	r0, r1, #16
 800038c:	0c3f      	lsrs	r7, r7, #16
 800038e:	19c0      	adds	r0, r0, r7
 8000390:	0184      	lsls	r4, r0, #6
 8000392:	1e67      	subs	r7, r4, #1
 8000394:	41bc      	sbcs	r4, r7
 8000396:	0c09      	lsrs	r1, r1, #16
 8000398:	0e80      	lsrs	r0, r0, #26
 800039a:	1989      	adds	r1, r1, r6
 800039c:	4304      	orrs	r4, r0
 800039e:	0189      	lsls	r1, r1, #6
 80003a0:	430c      	orrs	r4, r1
 80003a2:	0109      	lsls	r1, r1, #4
 80003a4:	d571      	bpl.n	800048a <__aeabi_fmul+0x24a>
 80003a6:	2301      	movs	r3, #1
 80003a8:	0861      	lsrs	r1, r4, #1
 80003aa:	401c      	ands	r4, r3
 80003ac:	430c      	orrs	r4, r1
 80003ae:	002b      	movs	r3, r5
 80003b0:	337f      	adds	r3, #127	; 0x7f
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	dd51      	ble.n	800045a <__aeabi_fmul+0x21a>
 80003b6:	0761      	lsls	r1, r4, #29
 80003b8:	d004      	beq.n	80003c4 <__aeabi_fmul+0x184>
 80003ba:	210f      	movs	r1, #15
 80003bc:	4021      	ands	r1, r4
 80003be:	2904      	cmp	r1, #4
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fmul+0x184>
 80003c2:	3404      	adds	r4, #4
 80003c4:	0121      	lsls	r1, r4, #4
 80003c6:	d503      	bpl.n	80003d0 <__aeabi_fmul+0x190>
 80003c8:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <__aeabi_fmul+0x298>)
 80003ca:	401c      	ands	r4, r3
 80003cc:	002b      	movs	r3, r5
 80003ce:	3380      	adds	r3, #128	; 0x80
 80003d0:	2bfe      	cmp	r3, #254	; 0xfe
 80003d2:	dcc1      	bgt.n	8000358 <__aeabi_fmul+0x118>
 80003d4:	01a1      	lsls	r1, r4, #6
 80003d6:	0a49      	lsrs	r1, r1, #9
 80003d8:	b2d8      	uxtb	r0, r3
 80003da:	e783      	b.n	80002e4 <__aeabi_fmul+0xa4>
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d12c      	bne.n	800043a <__aeabi_fmul+0x1fa>
 80003e0:	2301      	movs	r3, #1
 80003e2:	4642      	mov	r2, r8
 80003e4:	431e      	orrs	r6, r3
 80003e6:	002b      	movs	r3, r5
 80003e8:	407a      	eors	r2, r7
 80003ea:	2001      	movs	r0, #1
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	1c5d      	adds	r5, r3, #1
 80003f0:	2e0a      	cmp	r6, #10
 80003f2:	dd00      	ble.n	80003f6 <__aeabi_fmul+0x1b6>
 80003f4:	e757      	b.n	80002a6 <__aeabi_fmul+0x66>
 80003f6:	e76a      	b.n	80002ce <__aeabi_fmul+0x8e>
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d110      	bne.n	800041e <__aeabi_fmul+0x1de>
 80003fc:	2301      	movs	r3, #1
 80003fe:	2604      	movs	r6, #4
 8000400:	2500      	movs	r5, #0
 8000402:	469a      	mov	sl, r3
 8000404:	e738      	b.n	8000278 <__aeabi_fmul+0x38>
 8000406:	2b00      	cmp	r3, #0
 8000408:	d104      	bne.n	8000414 <__aeabi_fmul+0x1d4>
 800040a:	2302      	movs	r3, #2
 800040c:	2608      	movs	r6, #8
 800040e:	25ff      	movs	r5, #255	; 0xff
 8000410:	469a      	mov	sl, r3
 8000412:	e731      	b.n	8000278 <__aeabi_fmul+0x38>
 8000414:	2303      	movs	r3, #3
 8000416:	260c      	movs	r6, #12
 8000418:	25ff      	movs	r5, #255	; 0xff
 800041a:	469a      	mov	sl, r3
 800041c:	e72c      	b.n	8000278 <__aeabi_fmul+0x38>
 800041e:	4648      	mov	r0, r9
 8000420:	f001 fe20 	bl	8002064 <__clzsi2>
 8000424:	464a      	mov	r2, r9
 8000426:	1f43      	subs	r3, r0, #5
 8000428:	2576      	movs	r5, #118	; 0x76
 800042a:	409a      	lsls	r2, r3
 800042c:	2300      	movs	r3, #0
 800042e:	426d      	negs	r5, r5
 8000430:	4691      	mov	r9, r2
 8000432:	2600      	movs	r6, #0
 8000434:	469a      	mov	sl, r3
 8000436:	1a2d      	subs	r5, r5, r0
 8000438:	e71e      	b.n	8000278 <__aeabi_fmul+0x38>
 800043a:	0020      	movs	r0, r4
 800043c:	f001 fe12 	bl	8002064 <__clzsi2>
 8000440:	4642      	mov	r2, r8
 8000442:	1f43      	subs	r3, r0, #5
 8000444:	409c      	lsls	r4, r3
 8000446:	1a2b      	subs	r3, r5, r0
 8000448:	3b76      	subs	r3, #118	; 0x76
 800044a:	407a      	eors	r2, r7
 800044c:	2000      	movs	r0, #0
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	1c5d      	adds	r5, r3, #1
 8000452:	2e0a      	cmp	r6, #10
 8000454:	dd00      	ble.n	8000458 <__aeabi_fmul+0x218>
 8000456:	e726      	b.n	80002a6 <__aeabi_fmul+0x66>
 8000458:	e739      	b.n	80002ce <__aeabi_fmul+0x8e>
 800045a:	2101      	movs	r1, #1
 800045c:	1acb      	subs	r3, r1, r3
 800045e:	2b1b      	cmp	r3, #27
 8000460:	dd00      	ble.n	8000464 <__aeabi_fmul+0x224>
 8000462:	e73d      	b.n	80002e0 <__aeabi_fmul+0xa0>
 8000464:	359e      	adds	r5, #158	; 0x9e
 8000466:	0021      	movs	r1, r4
 8000468:	40ac      	lsls	r4, r5
 800046a:	40d9      	lsrs	r1, r3
 800046c:	1e63      	subs	r3, r4, #1
 800046e:	419c      	sbcs	r4, r3
 8000470:	4321      	orrs	r1, r4
 8000472:	074b      	lsls	r3, r1, #29
 8000474:	d004      	beq.n	8000480 <__aeabi_fmul+0x240>
 8000476:	230f      	movs	r3, #15
 8000478:	400b      	ands	r3, r1
 800047a:	2b04      	cmp	r3, #4
 800047c:	d000      	beq.n	8000480 <__aeabi_fmul+0x240>
 800047e:	3104      	adds	r1, #4
 8000480:	014b      	lsls	r3, r1, #5
 8000482:	d504      	bpl.n	800048e <__aeabi_fmul+0x24e>
 8000484:	2001      	movs	r0, #1
 8000486:	2100      	movs	r1, #0
 8000488:	e72c      	b.n	80002e4 <__aeabi_fmul+0xa4>
 800048a:	001d      	movs	r5, r3
 800048c:	e78f      	b.n	80003ae <__aeabi_fmul+0x16e>
 800048e:	0189      	lsls	r1, r1, #6
 8000490:	2000      	movs	r0, #0
 8000492:	0a49      	lsrs	r1, r1, #9
 8000494:	e726      	b.n	80002e4 <__aeabi_fmul+0xa4>
 8000496:	2302      	movs	r3, #2
 8000498:	2e0f      	cmp	r6, #15
 800049a:	d10c      	bne.n	80004b6 <__aeabi_fmul+0x276>
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	464b      	mov	r3, r9
 80004a0:	03c9      	lsls	r1, r1, #15
 80004a2:	420b      	tst	r3, r1
 80004a4:	d00d      	beq.n	80004c2 <__aeabi_fmul+0x282>
 80004a6:	420c      	tst	r4, r1
 80004a8:	d10b      	bne.n	80004c2 <__aeabi_fmul+0x282>
 80004aa:	4321      	orrs	r1, r4
 80004ac:	0249      	lsls	r1, r1, #9
 80004ae:	003a      	movs	r2, r7
 80004b0:	20ff      	movs	r0, #255	; 0xff
 80004b2:	0a49      	lsrs	r1, r1, #9
 80004b4:	e716      	b.n	80002e4 <__aeabi_fmul+0xa4>
 80004b6:	2e0b      	cmp	r6, #11
 80004b8:	d000      	beq.n	80004bc <__aeabi_fmul+0x27c>
 80004ba:	e6f7      	b.n	80002ac <__aeabi_fmul+0x6c>
 80004bc:	46a1      	mov	r9, r4
 80004be:	469a      	mov	sl, r3
 80004c0:	e736      	b.n	8000330 <__aeabi_fmul+0xf0>
 80004c2:	2180      	movs	r1, #128	; 0x80
 80004c4:	464b      	mov	r3, r9
 80004c6:	03c9      	lsls	r1, r1, #15
 80004c8:	4319      	orrs	r1, r3
 80004ca:	0249      	lsls	r1, r1, #9
 80004cc:	4642      	mov	r2, r8
 80004ce:	20ff      	movs	r0, #255	; 0xff
 80004d0:	0a49      	lsrs	r1, r1, #9
 80004d2:	e707      	b.n	80002e4 <__aeabi_fmul+0xa4>
 80004d4:	2303      	movs	r3, #3
 80004d6:	e7df      	b.n	8000498 <__aeabi_fmul+0x258>
 80004d8:	f7ffffff 	.word	0xf7ffffff

080004dc <__aeabi_f2iz>:
 80004dc:	0241      	lsls	r1, r0, #9
 80004de:	0042      	lsls	r2, r0, #1
 80004e0:	0fc3      	lsrs	r3, r0, #31
 80004e2:	0a49      	lsrs	r1, r1, #9
 80004e4:	2000      	movs	r0, #0
 80004e6:	0e12      	lsrs	r2, r2, #24
 80004e8:	2a7e      	cmp	r2, #126	; 0x7e
 80004ea:	dd03      	ble.n	80004f4 <__aeabi_f2iz+0x18>
 80004ec:	2a9d      	cmp	r2, #157	; 0x9d
 80004ee:	dd02      	ble.n	80004f6 <__aeabi_f2iz+0x1a>
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <__aeabi_f2iz+0x3c>)
 80004f2:	1898      	adds	r0, r3, r2
 80004f4:	4770      	bx	lr
 80004f6:	2080      	movs	r0, #128	; 0x80
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	4301      	orrs	r1, r0
 80004fc:	2a95      	cmp	r2, #149	; 0x95
 80004fe:	dc07      	bgt.n	8000510 <__aeabi_f2iz+0x34>
 8000500:	2096      	movs	r0, #150	; 0x96
 8000502:	1a82      	subs	r2, r0, r2
 8000504:	40d1      	lsrs	r1, r2
 8000506:	4248      	negs	r0, r1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f3      	bne.n	80004f4 <__aeabi_f2iz+0x18>
 800050c:	0008      	movs	r0, r1
 800050e:	e7f1      	b.n	80004f4 <__aeabi_f2iz+0x18>
 8000510:	3a96      	subs	r2, #150	; 0x96
 8000512:	4091      	lsls	r1, r2
 8000514:	e7f7      	b.n	8000506 <__aeabi_f2iz+0x2a>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	7fffffff 	.word	0x7fffffff

0800051c <__aeabi_dadd>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	464f      	mov	r7, r9
 8000520:	4646      	mov	r6, r8
 8000522:	46d6      	mov	lr, sl
 8000524:	0004      	movs	r4, r0
 8000526:	b5c0      	push	{r6, r7, lr}
 8000528:	001f      	movs	r7, r3
 800052a:	030b      	lsls	r3, r1, #12
 800052c:	0010      	movs	r0, r2
 800052e:	004e      	lsls	r6, r1, #1
 8000530:	0a5b      	lsrs	r3, r3, #9
 8000532:	0fcd      	lsrs	r5, r1, #31
 8000534:	0f61      	lsrs	r1, r4, #29
 8000536:	007a      	lsls	r2, r7, #1
 8000538:	4319      	orrs	r1, r3
 800053a:	00e3      	lsls	r3, r4, #3
 800053c:	033c      	lsls	r4, r7, #12
 800053e:	0fff      	lsrs	r7, r7, #31
 8000540:	46bc      	mov	ip, r7
 8000542:	0a64      	lsrs	r4, r4, #9
 8000544:	0f47      	lsrs	r7, r0, #29
 8000546:	4327      	orrs	r7, r4
 8000548:	0d76      	lsrs	r6, r6, #21
 800054a:	0d52      	lsrs	r2, r2, #21
 800054c:	00c0      	lsls	r0, r0, #3
 800054e:	46b9      	mov	r9, r7
 8000550:	4680      	mov	r8, r0
 8000552:	1ab7      	subs	r7, r6, r2
 8000554:	4565      	cmp	r5, ip
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0x3e>
 8000558:	e09b      	b.n	8000692 <__aeabi_dadd+0x176>
 800055a:	2f00      	cmp	r7, #0
 800055c:	dc00      	bgt.n	8000560 <__aeabi_dadd+0x44>
 800055e:	e084      	b.n	800066a <__aeabi_dadd+0x14e>
 8000560:	2a00      	cmp	r2, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x4a>
 8000564:	e0be      	b.n	80006e4 <__aeabi_dadd+0x1c8>
 8000566:	4ac8      	ldr	r2, [pc, #800]	; (8000888 <__aeabi_dadd+0x36c>)
 8000568:	4296      	cmp	r6, r2
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x52>
 800056c:	e124      	b.n	80007b8 <__aeabi_dadd+0x29c>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	464c      	mov	r4, r9
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	4314      	orrs	r4, r2
 8000576:	46a1      	mov	r9, r4
 8000578:	2f38      	cmp	r7, #56	; 0x38
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0x62>
 800057c:	e167      	b.n	800084e <__aeabi_dadd+0x332>
 800057e:	2f1f      	cmp	r7, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0x68>
 8000582:	e1d6      	b.n	8000932 <__aeabi_dadd+0x416>
 8000584:	2220      	movs	r2, #32
 8000586:	464c      	mov	r4, r9
 8000588:	1bd2      	subs	r2, r2, r7
 800058a:	4094      	lsls	r4, r2
 800058c:	46a2      	mov	sl, r4
 800058e:	4644      	mov	r4, r8
 8000590:	40fc      	lsrs	r4, r7
 8000592:	0020      	movs	r0, r4
 8000594:	4654      	mov	r4, sl
 8000596:	4304      	orrs	r4, r0
 8000598:	4640      	mov	r0, r8
 800059a:	4090      	lsls	r0, r2
 800059c:	1e42      	subs	r2, r0, #1
 800059e:	4190      	sbcs	r0, r2
 80005a0:	464a      	mov	r2, r9
 80005a2:	40fa      	lsrs	r2, r7
 80005a4:	4304      	orrs	r4, r0
 80005a6:	1a89      	subs	r1, r1, r2
 80005a8:	1b1c      	subs	r4, r3, r4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	4192      	sbcs	r2, r2
 80005ae:	4252      	negs	r2, r2
 80005b0:	1a8b      	subs	r3, r1, r2
 80005b2:	469a      	mov	sl, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0xa0>
 80005ba:	e0d4      	b.n	8000766 <__aeabi_dadd+0x24a>
 80005bc:	4653      	mov	r3, sl
 80005be:	025a      	lsls	r2, r3, #9
 80005c0:	0a53      	lsrs	r3, r2, #9
 80005c2:	469a      	mov	sl, r3
 80005c4:	4653      	mov	r3, sl
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0xb0>
 80005ca:	e104      	b.n	80007d6 <__aeabi_dadd+0x2ba>
 80005cc:	4650      	mov	r0, sl
 80005ce:	f001 fd49 	bl	8002064 <__clzsi2>
 80005d2:	0003      	movs	r3, r0
 80005d4:	3b08      	subs	r3, #8
 80005d6:	2220      	movs	r2, #32
 80005d8:	0020      	movs	r0, r4
 80005da:	1ad2      	subs	r2, r2, r3
 80005dc:	4651      	mov	r1, sl
 80005de:	40d0      	lsrs	r0, r2
 80005e0:	4099      	lsls	r1, r3
 80005e2:	0002      	movs	r2, r0
 80005e4:	409c      	lsls	r4, r3
 80005e6:	430a      	orrs	r2, r1
 80005e8:	42b3      	cmp	r3, r6
 80005ea:	da00      	bge.n	80005ee <__aeabi_dadd+0xd2>
 80005ec:	e102      	b.n	80007f4 <__aeabi_dadd+0x2d8>
 80005ee:	1b9b      	subs	r3, r3, r6
 80005f0:	1c59      	adds	r1, r3, #1
 80005f2:	291f      	cmp	r1, #31
 80005f4:	dd00      	ble.n	80005f8 <__aeabi_dadd+0xdc>
 80005f6:	e0a7      	b.n	8000748 <__aeabi_dadd+0x22c>
 80005f8:	2320      	movs	r3, #32
 80005fa:	0010      	movs	r0, r2
 80005fc:	0026      	movs	r6, r4
 80005fe:	1a5b      	subs	r3, r3, r1
 8000600:	409c      	lsls	r4, r3
 8000602:	4098      	lsls	r0, r3
 8000604:	40ce      	lsrs	r6, r1
 8000606:	40ca      	lsrs	r2, r1
 8000608:	1e63      	subs	r3, r4, #1
 800060a:	419c      	sbcs	r4, r3
 800060c:	4330      	orrs	r0, r6
 800060e:	4692      	mov	sl, r2
 8000610:	2600      	movs	r6, #0
 8000612:	4304      	orrs	r4, r0
 8000614:	0763      	lsls	r3, r4, #29
 8000616:	d009      	beq.n	800062c <__aeabi_dadd+0x110>
 8000618:	230f      	movs	r3, #15
 800061a:	4023      	ands	r3, r4
 800061c:	2b04      	cmp	r3, #4
 800061e:	d005      	beq.n	800062c <__aeabi_dadd+0x110>
 8000620:	1d23      	adds	r3, r4, #4
 8000622:	42a3      	cmp	r3, r4
 8000624:	41a4      	sbcs	r4, r4
 8000626:	4264      	negs	r4, r4
 8000628:	44a2      	add	sl, r4
 800062a:	001c      	movs	r4, r3
 800062c:	4653      	mov	r3, sl
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	d400      	bmi.n	8000634 <__aeabi_dadd+0x118>
 8000632:	e09b      	b.n	800076c <__aeabi_dadd+0x250>
 8000634:	4b94      	ldr	r3, [pc, #592]	; (8000888 <__aeabi_dadd+0x36c>)
 8000636:	3601      	adds	r6, #1
 8000638:	429e      	cmp	r6, r3
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x122>
 800063c:	e0b8      	b.n	80007b0 <__aeabi_dadd+0x294>
 800063e:	4653      	mov	r3, sl
 8000640:	4992      	ldr	r1, [pc, #584]	; (800088c <__aeabi_dadd+0x370>)
 8000642:	08e4      	lsrs	r4, r4, #3
 8000644:	400b      	ands	r3, r1
 8000646:	0019      	movs	r1, r3
 8000648:	075b      	lsls	r3, r3, #29
 800064a:	4323      	orrs	r3, r4
 800064c:	0572      	lsls	r2, r6, #21
 800064e:	024c      	lsls	r4, r1, #9
 8000650:	0b24      	lsrs	r4, r4, #12
 8000652:	0d52      	lsrs	r2, r2, #21
 8000654:	0512      	lsls	r2, r2, #20
 8000656:	07ed      	lsls	r5, r5, #31
 8000658:	4322      	orrs	r2, r4
 800065a:	432a      	orrs	r2, r5
 800065c:	0018      	movs	r0, r3
 800065e:	0011      	movs	r1, r2
 8000660:	bce0      	pop	{r5, r6, r7}
 8000662:	46ba      	mov	sl, r7
 8000664:	46b1      	mov	r9, r6
 8000666:	46a8      	mov	r8, r5
 8000668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066a:	2f00      	cmp	r7, #0
 800066c:	d048      	beq.n	8000700 <__aeabi_dadd+0x1e4>
 800066e:	1b97      	subs	r7, r2, r6
 8000670:	2e00      	cmp	r6, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_dadd+0x15a>
 8000674:	e10e      	b.n	8000894 <__aeabi_dadd+0x378>
 8000676:	000c      	movs	r4, r1
 8000678:	431c      	orrs	r4, r3
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x162>
 800067c:	e1b7      	b.n	80009ee <__aeabi_dadd+0x4d2>
 800067e:	1e7c      	subs	r4, r7, #1
 8000680:	2f01      	cmp	r7, #1
 8000682:	d100      	bne.n	8000686 <__aeabi_dadd+0x16a>
 8000684:	e226      	b.n	8000ad4 <__aeabi_dadd+0x5b8>
 8000686:	4d80      	ldr	r5, [pc, #512]	; (8000888 <__aeabi_dadd+0x36c>)
 8000688:	42af      	cmp	r7, r5
 800068a:	d100      	bne.n	800068e <__aeabi_dadd+0x172>
 800068c:	e1d5      	b.n	8000a3a <__aeabi_dadd+0x51e>
 800068e:	0027      	movs	r7, r4
 8000690:	e107      	b.n	80008a2 <__aeabi_dadd+0x386>
 8000692:	2f00      	cmp	r7, #0
 8000694:	dc00      	bgt.n	8000698 <__aeabi_dadd+0x17c>
 8000696:	e0b2      	b.n	80007fe <__aeabi_dadd+0x2e2>
 8000698:	2a00      	cmp	r2, #0
 800069a:	d047      	beq.n	800072c <__aeabi_dadd+0x210>
 800069c:	4a7a      	ldr	r2, [pc, #488]	; (8000888 <__aeabi_dadd+0x36c>)
 800069e:	4296      	cmp	r6, r2
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x188>
 80006a2:	e089      	b.n	80007b8 <__aeabi_dadd+0x29c>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	464c      	mov	r4, r9
 80006a8:	0412      	lsls	r2, r2, #16
 80006aa:	4314      	orrs	r4, r2
 80006ac:	46a1      	mov	r9, r4
 80006ae:	2f38      	cmp	r7, #56	; 0x38
 80006b0:	dc6b      	bgt.n	800078a <__aeabi_dadd+0x26e>
 80006b2:	2f1f      	cmp	r7, #31
 80006b4:	dc00      	bgt.n	80006b8 <__aeabi_dadd+0x19c>
 80006b6:	e16e      	b.n	8000996 <__aeabi_dadd+0x47a>
 80006b8:	003a      	movs	r2, r7
 80006ba:	4648      	mov	r0, r9
 80006bc:	3a20      	subs	r2, #32
 80006be:	40d0      	lsrs	r0, r2
 80006c0:	4684      	mov	ip, r0
 80006c2:	2f20      	cmp	r7, #32
 80006c4:	d007      	beq.n	80006d6 <__aeabi_dadd+0x1ba>
 80006c6:	2240      	movs	r2, #64	; 0x40
 80006c8:	4648      	mov	r0, r9
 80006ca:	1bd2      	subs	r2, r2, r7
 80006cc:	4090      	lsls	r0, r2
 80006ce:	0002      	movs	r2, r0
 80006d0:	4640      	mov	r0, r8
 80006d2:	4310      	orrs	r0, r2
 80006d4:	4680      	mov	r8, r0
 80006d6:	4640      	mov	r0, r8
 80006d8:	1e42      	subs	r2, r0, #1
 80006da:	4190      	sbcs	r0, r2
 80006dc:	4662      	mov	r2, ip
 80006de:	0004      	movs	r4, r0
 80006e0:	4314      	orrs	r4, r2
 80006e2:	e057      	b.n	8000794 <__aeabi_dadd+0x278>
 80006e4:	464a      	mov	r2, r9
 80006e6:	4302      	orrs	r2, r0
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x1d0>
 80006ea:	e103      	b.n	80008f4 <__aeabi_dadd+0x3d8>
 80006ec:	1e7a      	subs	r2, r7, #1
 80006ee:	2f01      	cmp	r7, #1
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dadd+0x1d8>
 80006f2:	e193      	b.n	8000a1c <__aeabi_dadd+0x500>
 80006f4:	4c64      	ldr	r4, [pc, #400]	; (8000888 <__aeabi_dadd+0x36c>)
 80006f6:	42a7      	cmp	r7, r4
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x1e0>
 80006fa:	e18a      	b.n	8000a12 <__aeabi_dadd+0x4f6>
 80006fc:	0017      	movs	r7, r2
 80006fe:	e73b      	b.n	8000578 <__aeabi_dadd+0x5c>
 8000700:	4c63      	ldr	r4, [pc, #396]	; (8000890 <__aeabi_dadd+0x374>)
 8000702:	1c72      	adds	r2, r6, #1
 8000704:	4222      	tst	r2, r4
 8000706:	d000      	beq.n	800070a <__aeabi_dadd+0x1ee>
 8000708:	e0e0      	b.n	80008cc <__aeabi_dadd+0x3b0>
 800070a:	000a      	movs	r2, r1
 800070c:	431a      	orrs	r2, r3
 800070e:	2e00      	cmp	r6, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_dadd+0x1f8>
 8000712:	e174      	b.n	80009fe <__aeabi_dadd+0x4e2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x1fe>
 8000718:	e1d0      	b.n	8000abc <__aeabi_dadd+0x5a0>
 800071a:	464a      	mov	r2, r9
 800071c:	4302      	orrs	r2, r0
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x206>
 8000720:	e1e3      	b.n	8000aea <__aeabi_dadd+0x5ce>
 8000722:	074a      	lsls	r2, r1, #29
 8000724:	08db      	lsrs	r3, r3, #3
 8000726:	4313      	orrs	r3, r2
 8000728:	08c9      	lsrs	r1, r1, #3
 800072a:	e029      	b.n	8000780 <__aeabi_dadd+0x264>
 800072c:	464a      	mov	r2, r9
 800072e:	4302      	orrs	r2, r0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x218>
 8000732:	e17d      	b.n	8000a30 <__aeabi_dadd+0x514>
 8000734:	1e7a      	subs	r2, r7, #1
 8000736:	2f01      	cmp	r7, #1
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x220>
 800073a:	e0e0      	b.n	80008fe <__aeabi_dadd+0x3e2>
 800073c:	4c52      	ldr	r4, [pc, #328]	; (8000888 <__aeabi_dadd+0x36c>)
 800073e:	42a7      	cmp	r7, r4
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x228>
 8000742:	e166      	b.n	8000a12 <__aeabi_dadd+0x4f6>
 8000744:	0017      	movs	r7, r2
 8000746:	e7b2      	b.n	80006ae <__aeabi_dadd+0x192>
 8000748:	0010      	movs	r0, r2
 800074a:	3b1f      	subs	r3, #31
 800074c:	40d8      	lsrs	r0, r3
 800074e:	2920      	cmp	r1, #32
 8000750:	d003      	beq.n	800075a <__aeabi_dadd+0x23e>
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	1a5b      	subs	r3, r3, r1
 8000756:	409a      	lsls	r2, r3
 8000758:	4314      	orrs	r4, r2
 800075a:	1e63      	subs	r3, r4, #1
 800075c:	419c      	sbcs	r4, r3
 800075e:	2300      	movs	r3, #0
 8000760:	2600      	movs	r6, #0
 8000762:	469a      	mov	sl, r3
 8000764:	4304      	orrs	r4, r0
 8000766:	0763      	lsls	r3, r4, #29
 8000768:	d000      	beq.n	800076c <__aeabi_dadd+0x250>
 800076a:	e755      	b.n	8000618 <__aeabi_dadd+0xfc>
 800076c:	4652      	mov	r2, sl
 800076e:	08e3      	lsrs	r3, r4, #3
 8000770:	0752      	lsls	r2, r2, #29
 8000772:	4313      	orrs	r3, r2
 8000774:	4652      	mov	r2, sl
 8000776:	0037      	movs	r7, r6
 8000778:	08d1      	lsrs	r1, r2, #3
 800077a:	4a43      	ldr	r2, [pc, #268]	; (8000888 <__aeabi_dadd+0x36c>)
 800077c:	4297      	cmp	r7, r2
 800077e:	d01f      	beq.n	80007c0 <__aeabi_dadd+0x2a4>
 8000780:	0309      	lsls	r1, r1, #12
 8000782:	057a      	lsls	r2, r7, #21
 8000784:	0b0c      	lsrs	r4, r1, #12
 8000786:	0d52      	lsrs	r2, r2, #21
 8000788:	e764      	b.n	8000654 <__aeabi_dadd+0x138>
 800078a:	4642      	mov	r2, r8
 800078c:	464c      	mov	r4, r9
 800078e:	4314      	orrs	r4, r2
 8000790:	1e62      	subs	r2, r4, #1
 8000792:	4194      	sbcs	r4, r2
 8000794:	18e4      	adds	r4, r4, r3
 8000796:	429c      	cmp	r4, r3
 8000798:	4192      	sbcs	r2, r2
 800079a:	4252      	negs	r2, r2
 800079c:	4692      	mov	sl, r2
 800079e:	448a      	add	sl, r1
 80007a0:	4653      	mov	r3, sl
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	d5df      	bpl.n	8000766 <__aeabi_dadd+0x24a>
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <__aeabi_dadd+0x36c>)
 80007a8:	3601      	adds	r6, #1
 80007aa:	429e      	cmp	r6, r3
 80007ac:	d000      	beq.n	80007b0 <__aeabi_dadd+0x294>
 80007ae:	e0b3      	b.n	8000918 <__aeabi_dadd+0x3fc>
 80007b0:	0032      	movs	r2, r6
 80007b2:	2400      	movs	r4, #0
 80007b4:	2300      	movs	r3, #0
 80007b6:	e74d      	b.n	8000654 <__aeabi_dadd+0x138>
 80007b8:	074a      	lsls	r2, r1, #29
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	4313      	orrs	r3, r2
 80007be:	08c9      	lsrs	r1, r1, #3
 80007c0:	001a      	movs	r2, r3
 80007c2:	430a      	orrs	r2, r1
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x2ac>
 80007c6:	e200      	b.n	8000bca <__aeabi_dadd+0x6ae>
 80007c8:	2480      	movs	r4, #128	; 0x80
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	430c      	orrs	r4, r1
 80007ce:	0324      	lsls	r4, r4, #12
 80007d0:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <__aeabi_dadd+0x36c>)
 80007d2:	0b24      	lsrs	r4, r4, #12
 80007d4:	e73e      	b.n	8000654 <__aeabi_dadd+0x138>
 80007d6:	0020      	movs	r0, r4
 80007d8:	f001 fc44 	bl	8002064 <__clzsi2>
 80007dc:	0003      	movs	r3, r0
 80007de:	3318      	adds	r3, #24
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x2ca>
 80007e4:	e6f7      	b.n	80005d6 <__aeabi_dadd+0xba>
 80007e6:	0022      	movs	r2, r4
 80007e8:	3808      	subs	r0, #8
 80007ea:	4082      	lsls	r2, r0
 80007ec:	2400      	movs	r4, #0
 80007ee:	42b3      	cmp	r3, r6
 80007f0:	db00      	blt.n	80007f4 <__aeabi_dadd+0x2d8>
 80007f2:	e6fc      	b.n	80005ee <__aeabi_dadd+0xd2>
 80007f4:	1af6      	subs	r6, r6, r3
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <__aeabi_dadd+0x370>)
 80007f8:	401a      	ands	r2, r3
 80007fa:	4692      	mov	sl, r2
 80007fc:	e70a      	b.n	8000614 <__aeabi_dadd+0xf8>
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d02b      	beq.n	800085a <__aeabi_dadd+0x33e>
 8000802:	1b97      	subs	r7, r2, r6
 8000804:	2e00      	cmp	r6, #0
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x2ee>
 8000808:	e0b8      	b.n	800097c <__aeabi_dadd+0x460>
 800080a:	4c1f      	ldr	r4, [pc, #124]	; (8000888 <__aeabi_dadd+0x36c>)
 800080c:	42a2      	cmp	r2, r4
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x2f6>
 8000810:	e11c      	b.n	8000a4c <__aeabi_dadd+0x530>
 8000812:	2480      	movs	r4, #128	; 0x80
 8000814:	0424      	lsls	r4, r4, #16
 8000816:	4321      	orrs	r1, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x302>
 800081c:	e11e      	b.n	8000a5c <__aeabi_dadd+0x540>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x308>
 8000822:	e19e      	b.n	8000b62 <__aeabi_dadd+0x646>
 8000824:	2620      	movs	r6, #32
 8000826:	000c      	movs	r4, r1
 8000828:	1bf6      	subs	r6, r6, r7
 800082a:	0018      	movs	r0, r3
 800082c:	40b3      	lsls	r3, r6
 800082e:	40b4      	lsls	r4, r6
 8000830:	40f8      	lsrs	r0, r7
 8000832:	1e5e      	subs	r6, r3, #1
 8000834:	41b3      	sbcs	r3, r6
 8000836:	40f9      	lsrs	r1, r7
 8000838:	4304      	orrs	r4, r0
 800083a:	431c      	orrs	r4, r3
 800083c:	4489      	add	r9, r1
 800083e:	4444      	add	r4, r8
 8000840:	4544      	cmp	r4, r8
 8000842:	419b      	sbcs	r3, r3
 8000844:	425b      	negs	r3, r3
 8000846:	444b      	add	r3, r9
 8000848:	469a      	mov	sl, r3
 800084a:	0016      	movs	r6, r2
 800084c:	e7a8      	b.n	80007a0 <__aeabi_dadd+0x284>
 800084e:	4642      	mov	r2, r8
 8000850:	464c      	mov	r4, r9
 8000852:	4314      	orrs	r4, r2
 8000854:	1e62      	subs	r2, r4, #1
 8000856:	4194      	sbcs	r4, r2
 8000858:	e6a6      	b.n	80005a8 <__aeabi_dadd+0x8c>
 800085a:	4c0d      	ldr	r4, [pc, #52]	; (8000890 <__aeabi_dadd+0x374>)
 800085c:	1c72      	adds	r2, r6, #1
 800085e:	4222      	tst	r2, r4
 8000860:	d000      	beq.n	8000864 <__aeabi_dadd+0x348>
 8000862:	e0a8      	b.n	80009b6 <__aeabi_dadd+0x49a>
 8000864:	000a      	movs	r2, r1
 8000866:	431a      	orrs	r2, r3
 8000868:	2e00      	cmp	r6, #0
 800086a:	d000      	beq.n	800086e <__aeabi_dadd+0x352>
 800086c:	e10a      	b.n	8000a84 <__aeabi_dadd+0x568>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x358>
 8000872:	e15e      	b.n	8000b32 <__aeabi_dadd+0x616>
 8000874:	464a      	mov	r2, r9
 8000876:	4302      	orrs	r2, r0
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x360>
 800087a:	e161      	b.n	8000b40 <__aeabi_dadd+0x624>
 800087c:	074a      	lsls	r2, r1, #29
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	4313      	orrs	r3, r2
 8000882:	08c9      	lsrs	r1, r1, #3
 8000884:	e77c      	b.n	8000780 <__aeabi_dadd+0x264>
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	000007ff 	.word	0x000007ff
 800088c:	ff7fffff 	.word	0xff7fffff
 8000890:	000007fe 	.word	0x000007fe
 8000894:	4ccf      	ldr	r4, [pc, #828]	; (8000bd4 <__aeabi_dadd+0x6b8>)
 8000896:	42a2      	cmp	r2, r4
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x380>
 800089a:	e0ce      	b.n	8000a3a <__aeabi_dadd+0x51e>
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	0424      	lsls	r4, r4, #16
 80008a0:	4321      	orrs	r1, r4
 80008a2:	2f38      	cmp	r7, #56	; 0x38
 80008a4:	dc5b      	bgt.n	800095e <__aeabi_dadd+0x442>
 80008a6:	2f1f      	cmp	r7, #31
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dadd+0x390>
 80008aa:	e0dc      	b.n	8000a66 <__aeabi_dadd+0x54a>
 80008ac:	2520      	movs	r5, #32
 80008ae:	000c      	movs	r4, r1
 80008b0:	1bed      	subs	r5, r5, r7
 80008b2:	001e      	movs	r6, r3
 80008b4:	40ab      	lsls	r3, r5
 80008b6:	40ac      	lsls	r4, r5
 80008b8:	40fe      	lsrs	r6, r7
 80008ba:	1e5d      	subs	r5, r3, #1
 80008bc:	41ab      	sbcs	r3, r5
 80008be:	4334      	orrs	r4, r6
 80008c0:	40f9      	lsrs	r1, r7
 80008c2:	431c      	orrs	r4, r3
 80008c4:	464b      	mov	r3, r9
 80008c6:	1a5b      	subs	r3, r3, r1
 80008c8:	4699      	mov	r9, r3
 80008ca:	e04c      	b.n	8000966 <__aeabi_dadd+0x44a>
 80008cc:	464a      	mov	r2, r9
 80008ce:	1a1c      	subs	r4, r3, r0
 80008d0:	1a88      	subs	r0, r1, r2
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	4192      	sbcs	r2, r2
 80008d6:	4252      	negs	r2, r2
 80008d8:	4692      	mov	sl, r2
 80008da:	0002      	movs	r2, r0
 80008dc:	4650      	mov	r0, sl
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	4692      	mov	sl, r2
 80008e2:	0212      	lsls	r2, r2, #8
 80008e4:	d478      	bmi.n	80009d8 <__aeabi_dadd+0x4bc>
 80008e6:	4653      	mov	r3, sl
 80008e8:	4323      	orrs	r3, r4
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x3d2>
 80008ec:	e66a      	b.n	80005c4 <__aeabi_dadd+0xa8>
 80008ee:	2100      	movs	r1, #0
 80008f0:	2500      	movs	r5, #0
 80008f2:	e745      	b.n	8000780 <__aeabi_dadd+0x264>
 80008f4:	074a      	lsls	r2, r1, #29
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	08c9      	lsrs	r1, r1, #3
 80008fc:	e73d      	b.n	800077a <__aeabi_dadd+0x25e>
 80008fe:	181c      	adds	r4, r3, r0
 8000900:	429c      	cmp	r4, r3
 8000902:	419b      	sbcs	r3, r3
 8000904:	4449      	add	r1, r9
 8000906:	468a      	mov	sl, r1
 8000908:	425b      	negs	r3, r3
 800090a:	449a      	add	sl, r3
 800090c:	4653      	mov	r3, sl
 800090e:	2601      	movs	r6, #1
 8000910:	021b      	lsls	r3, r3, #8
 8000912:	d400      	bmi.n	8000916 <__aeabi_dadd+0x3fa>
 8000914:	e727      	b.n	8000766 <__aeabi_dadd+0x24a>
 8000916:	2602      	movs	r6, #2
 8000918:	4652      	mov	r2, sl
 800091a:	4baf      	ldr	r3, [pc, #700]	; (8000bd8 <__aeabi_dadd+0x6bc>)
 800091c:	2101      	movs	r1, #1
 800091e:	401a      	ands	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	4021      	ands	r1, r4
 8000924:	0862      	lsrs	r2, r4, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	07dc      	lsls	r4, r3, #31
 800092a:	085b      	lsrs	r3, r3, #1
 800092c:	469a      	mov	sl, r3
 800092e:	4314      	orrs	r4, r2
 8000930:	e670      	b.n	8000614 <__aeabi_dadd+0xf8>
 8000932:	003a      	movs	r2, r7
 8000934:	464c      	mov	r4, r9
 8000936:	3a20      	subs	r2, #32
 8000938:	40d4      	lsrs	r4, r2
 800093a:	46a4      	mov	ip, r4
 800093c:	2f20      	cmp	r7, #32
 800093e:	d007      	beq.n	8000950 <__aeabi_dadd+0x434>
 8000940:	2240      	movs	r2, #64	; 0x40
 8000942:	4648      	mov	r0, r9
 8000944:	1bd2      	subs	r2, r2, r7
 8000946:	4090      	lsls	r0, r2
 8000948:	0002      	movs	r2, r0
 800094a:	4640      	mov	r0, r8
 800094c:	4310      	orrs	r0, r2
 800094e:	4680      	mov	r8, r0
 8000950:	4640      	mov	r0, r8
 8000952:	1e42      	subs	r2, r0, #1
 8000954:	4190      	sbcs	r0, r2
 8000956:	4662      	mov	r2, ip
 8000958:	0004      	movs	r4, r0
 800095a:	4314      	orrs	r4, r2
 800095c:	e624      	b.n	80005a8 <__aeabi_dadd+0x8c>
 800095e:	4319      	orrs	r1, r3
 8000960:	000c      	movs	r4, r1
 8000962:	1e63      	subs	r3, r4, #1
 8000964:	419c      	sbcs	r4, r3
 8000966:	4643      	mov	r3, r8
 8000968:	1b1c      	subs	r4, r3, r4
 800096a:	45a0      	cmp	r8, r4
 800096c:	419b      	sbcs	r3, r3
 800096e:	4649      	mov	r1, r9
 8000970:	425b      	negs	r3, r3
 8000972:	1acb      	subs	r3, r1, r3
 8000974:	469a      	mov	sl, r3
 8000976:	4665      	mov	r5, ip
 8000978:	0016      	movs	r6, r2
 800097a:	e61b      	b.n	80005b4 <__aeabi_dadd+0x98>
 800097c:	000c      	movs	r4, r1
 800097e:	431c      	orrs	r4, r3
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x468>
 8000982:	e0c7      	b.n	8000b14 <__aeabi_dadd+0x5f8>
 8000984:	1e7c      	subs	r4, r7, #1
 8000986:	2f01      	cmp	r7, #1
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x470>
 800098a:	e0f9      	b.n	8000b80 <__aeabi_dadd+0x664>
 800098c:	4e91      	ldr	r6, [pc, #580]	; (8000bd4 <__aeabi_dadd+0x6b8>)
 800098e:	42b7      	cmp	r7, r6
 8000990:	d05c      	beq.n	8000a4c <__aeabi_dadd+0x530>
 8000992:	0027      	movs	r7, r4
 8000994:	e740      	b.n	8000818 <__aeabi_dadd+0x2fc>
 8000996:	2220      	movs	r2, #32
 8000998:	464c      	mov	r4, r9
 800099a:	4640      	mov	r0, r8
 800099c:	1bd2      	subs	r2, r2, r7
 800099e:	4094      	lsls	r4, r2
 80009a0:	40f8      	lsrs	r0, r7
 80009a2:	4304      	orrs	r4, r0
 80009a4:	4640      	mov	r0, r8
 80009a6:	4090      	lsls	r0, r2
 80009a8:	1e42      	subs	r2, r0, #1
 80009aa:	4190      	sbcs	r0, r2
 80009ac:	464a      	mov	r2, r9
 80009ae:	40fa      	lsrs	r2, r7
 80009b0:	4304      	orrs	r4, r0
 80009b2:	1889      	adds	r1, r1, r2
 80009b4:	e6ee      	b.n	8000794 <__aeabi_dadd+0x278>
 80009b6:	4c87      	ldr	r4, [pc, #540]	; (8000bd4 <__aeabi_dadd+0x6b8>)
 80009b8:	42a2      	cmp	r2, r4
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x4a2>
 80009bc:	e6f9      	b.n	80007b2 <__aeabi_dadd+0x296>
 80009be:	1818      	adds	r0, r3, r0
 80009c0:	4298      	cmp	r0, r3
 80009c2:	419b      	sbcs	r3, r3
 80009c4:	4449      	add	r1, r9
 80009c6:	425b      	negs	r3, r3
 80009c8:	18cb      	adds	r3, r1, r3
 80009ca:	07dc      	lsls	r4, r3, #31
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	469a      	mov	sl, r3
 80009d2:	0016      	movs	r6, r2
 80009d4:	4304      	orrs	r4, r0
 80009d6:	e6c6      	b.n	8000766 <__aeabi_dadd+0x24a>
 80009d8:	4642      	mov	r2, r8
 80009da:	1ad4      	subs	r4, r2, r3
 80009dc:	45a0      	cmp	r8, r4
 80009de:	4180      	sbcs	r0, r0
 80009e0:	464b      	mov	r3, r9
 80009e2:	4240      	negs	r0, r0
 80009e4:	1a59      	subs	r1, r3, r1
 80009e6:	1a0b      	subs	r3, r1, r0
 80009e8:	469a      	mov	sl, r3
 80009ea:	4665      	mov	r5, ip
 80009ec:	e5ea      	b.n	80005c4 <__aeabi_dadd+0xa8>
 80009ee:	464b      	mov	r3, r9
 80009f0:	464a      	mov	r2, r9
 80009f2:	08c0      	lsrs	r0, r0, #3
 80009f4:	075b      	lsls	r3, r3, #29
 80009f6:	4665      	mov	r5, ip
 80009f8:	4303      	orrs	r3, r0
 80009fa:	08d1      	lsrs	r1, r2, #3
 80009fc:	e6bd      	b.n	800077a <__aeabi_dadd+0x25e>
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	d000      	beq.n	8000a04 <__aeabi_dadd+0x4e8>
 8000a02:	e08e      	b.n	8000b22 <__aeabi_dadd+0x606>
 8000a04:	464b      	mov	r3, r9
 8000a06:	4303      	orrs	r3, r0
 8000a08:	d117      	bne.n	8000a3a <__aeabi_dadd+0x51e>
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	0309      	lsls	r1, r1, #12
 8000a10:	e6da      	b.n	80007c8 <__aeabi_dadd+0x2ac>
 8000a12:	074a      	lsls	r2, r1, #29
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	08c9      	lsrs	r1, r1, #3
 8000a1a:	e6d1      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000a1c:	1a1c      	subs	r4, r3, r0
 8000a1e:	464a      	mov	r2, r9
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	419b      	sbcs	r3, r3
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	425b      	negs	r3, r3
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	2601      	movs	r6, #1
 8000a2e:	e5c1      	b.n	80005b4 <__aeabi_dadd+0x98>
 8000a30:	074a      	lsls	r2, r1, #29
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	08c9      	lsrs	r1, r1, #3
 8000a38:	e69f      	b.n	800077a <__aeabi_dadd+0x25e>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	08d8      	lsrs	r0, r3, #3
 8000a3e:	464b      	mov	r3, r9
 8000a40:	464a      	mov	r2, r9
 8000a42:	075b      	lsls	r3, r3, #29
 8000a44:	4665      	mov	r5, ip
 8000a46:	4303      	orrs	r3, r0
 8000a48:	08d1      	lsrs	r1, r2, #3
 8000a4a:	e6b9      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000a4c:	4643      	mov	r3, r8
 8000a4e:	08d8      	lsrs	r0, r3, #3
 8000a50:	464b      	mov	r3, r9
 8000a52:	464a      	mov	r2, r9
 8000a54:	075b      	lsls	r3, r3, #29
 8000a56:	4303      	orrs	r3, r0
 8000a58:	08d1      	lsrs	r1, r2, #3
 8000a5a:	e6b1      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	000c      	movs	r4, r1
 8000a60:	1e63      	subs	r3, r4, #1
 8000a62:	419c      	sbcs	r4, r3
 8000a64:	e6eb      	b.n	800083e <__aeabi_dadd+0x322>
 8000a66:	003c      	movs	r4, r7
 8000a68:	000d      	movs	r5, r1
 8000a6a:	3c20      	subs	r4, #32
 8000a6c:	40e5      	lsrs	r5, r4
 8000a6e:	2f20      	cmp	r7, #32
 8000a70:	d003      	beq.n	8000a7a <__aeabi_dadd+0x55e>
 8000a72:	2440      	movs	r4, #64	; 0x40
 8000a74:	1be4      	subs	r4, r4, r7
 8000a76:	40a1      	lsls	r1, r4
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	1e63      	subs	r3, r4, #1
 8000a7e:	419c      	sbcs	r4, r3
 8000a80:	432c      	orrs	r4, r5
 8000a82:	e770      	b.n	8000966 <__aeabi_dadd+0x44a>
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d0e1      	beq.n	8000a4c <__aeabi_dadd+0x530>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	4302      	orrs	r2, r0
 8000a8c:	d0c1      	beq.n	8000a12 <__aeabi_dadd+0x4f6>
 8000a8e:	074a      	lsls	r2, r1, #29
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	08c9      	lsrs	r1, r1, #3
 8000a98:	0312      	lsls	r2, r2, #12
 8000a9a:	4211      	tst	r1, r2
 8000a9c:	d008      	beq.n	8000ab0 <__aeabi_dadd+0x594>
 8000a9e:	4648      	mov	r0, r9
 8000aa0:	08c4      	lsrs	r4, r0, #3
 8000aa2:	4214      	tst	r4, r2
 8000aa4:	d104      	bne.n	8000ab0 <__aeabi_dadd+0x594>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	0742      	lsls	r2, r0, #29
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	0f5a      	lsrs	r2, r3, #29
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	0752      	lsls	r2, r2, #29
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	e681      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000abc:	464b      	mov	r3, r9
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x5a8>
 8000ac2:	e714      	b.n	80008ee <__aeabi_dadd+0x3d2>
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	08c0      	lsrs	r0, r0, #3
 8000aca:	075b      	lsls	r3, r3, #29
 8000acc:	4665      	mov	r5, ip
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	08d1      	lsrs	r1, r2, #3
 8000ad2:	e655      	b.n	8000780 <__aeabi_dadd+0x264>
 8000ad4:	1ac4      	subs	r4, r0, r3
 8000ad6:	45a0      	cmp	r8, r4
 8000ad8:	4180      	sbcs	r0, r0
 8000ada:	464b      	mov	r3, r9
 8000adc:	4240      	negs	r0, r0
 8000ade:	1a59      	subs	r1, r3, r1
 8000ae0:	1a0b      	subs	r3, r1, r0
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	4665      	mov	r5, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	e564      	b.n	80005b4 <__aeabi_dadd+0x98>
 8000aea:	1a1c      	subs	r4, r3, r0
 8000aec:	464a      	mov	r2, r9
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	4180      	sbcs	r0, r0
 8000af2:	1a8a      	subs	r2, r1, r2
 8000af4:	4240      	negs	r0, r0
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	4692      	mov	sl, r2
 8000afa:	0212      	lsls	r2, r2, #8
 8000afc:	d549      	bpl.n	8000b92 <__aeabi_dadd+0x676>
 8000afe:	4642      	mov	r2, r8
 8000b00:	1ad4      	subs	r4, r2, r3
 8000b02:	45a0      	cmp	r8, r4
 8000b04:	4180      	sbcs	r0, r0
 8000b06:	464b      	mov	r3, r9
 8000b08:	4240      	negs	r0, r0
 8000b0a:	1a59      	subs	r1, r3, r1
 8000b0c:	1a0b      	subs	r3, r1, r0
 8000b0e:	469a      	mov	sl, r3
 8000b10:	4665      	mov	r5, ip
 8000b12:	e57f      	b.n	8000614 <__aeabi_dadd+0xf8>
 8000b14:	464b      	mov	r3, r9
 8000b16:	464a      	mov	r2, r9
 8000b18:	08c0      	lsrs	r0, r0, #3
 8000b1a:	075b      	lsls	r3, r3, #29
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	08d1      	lsrs	r1, r2, #3
 8000b20:	e62b      	b.n	800077a <__aeabi_dadd+0x25e>
 8000b22:	464a      	mov	r2, r9
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	4302      	orrs	r2, r0
 8000b28:	d138      	bne.n	8000b9c <__aeabi_dadd+0x680>
 8000b2a:	074a      	lsls	r2, r1, #29
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	e646      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000b32:	464b      	mov	r3, r9
 8000b34:	464a      	mov	r2, r9
 8000b36:	08c0      	lsrs	r0, r0, #3
 8000b38:	075b      	lsls	r3, r3, #29
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	08d1      	lsrs	r1, r2, #3
 8000b3e:	e61f      	b.n	8000780 <__aeabi_dadd+0x264>
 8000b40:	181c      	adds	r4, r3, r0
 8000b42:	429c      	cmp	r4, r3
 8000b44:	419b      	sbcs	r3, r3
 8000b46:	4449      	add	r1, r9
 8000b48:	468a      	mov	sl, r1
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	449a      	add	sl, r3
 8000b4e:	4653      	mov	r3, sl
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x63a>
 8000b54:	e607      	b.n	8000766 <__aeabi_dadd+0x24a>
 8000b56:	4652      	mov	r2, sl
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <__aeabi_dadd+0x6bc>)
 8000b5a:	2601      	movs	r6, #1
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	4692      	mov	sl, r2
 8000b60:	e601      	b.n	8000766 <__aeabi_dadd+0x24a>
 8000b62:	003c      	movs	r4, r7
 8000b64:	000e      	movs	r6, r1
 8000b66:	3c20      	subs	r4, #32
 8000b68:	40e6      	lsrs	r6, r4
 8000b6a:	2f20      	cmp	r7, #32
 8000b6c:	d003      	beq.n	8000b76 <__aeabi_dadd+0x65a>
 8000b6e:	2440      	movs	r4, #64	; 0x40
 8000b70:	1be4      	subs	r4, r4, r7
 8000b72:	40a1      	lsls	r1, r4
 8000b74:	430b      	orrs	r3, r1
 8000b76:	001c      	movs	r4, r3
 8000b78:	1e63      	subs	r3, r4, #1
 8000b7a:	419c      	sbcs	r4, r3
 8000b7c:	4334      	orrs	r4, r6
 8000b7e:	e65e      	b.n	800083e <__aeabi_dadd+0x322>
 8000b80:	4443      	add	r3, r8
 8000b82:	4283      	cmp	r3, r0
 8000b84:	4180      	sbcs	r0, r0
 8000b86:	4449      	add	r1, r9
 8000b88:	468a      	mov	sl, r1
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	001c      	movs	r4, r3
 8000b8e:	4482      	add	sl, r0
 8000b90:	e6bc      	b.n	800090c <__aeabi_dadd+0x3f0>
 8000b92:	4653      	mov	r3, sl
 8000b94:	4323      	orrs	r3, r4
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x67e>
 8000b98:	e6a9      	b.n	80008ee <__aeabi_dadd+0x3d2>
 8000b9a:	e5e4      	b.n	8000766 <__aeabi_dadd+0x24a>
 8000b9c:	074a      	lsls	r2, r1, #29
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	08c9      	lsrs	r1, r1, #3
 8000ba4:	0312      	lsls	r2, r2, #12
 8000ba6:	4211      	tst	r1, r2
 8000ba8:	d009      	beq.n	8000bbe <__aeabi_dadd+0x6a2>
 8000baa:	4648      	mov	r0, r9
 8000bac:	08c4      	lsrs	r4, r0, #3
 8000bae:	4214      	tst	r4, r2
 8000bb0:	d105      	bne.n	8000bbe <__aeabi_dadd+0x6a2>
 8000bb2:	4643      	mov	r3, r8
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	0742      	lsls	r2, r0, #29
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	0f5a      	lsrs	r2, r3, #29
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	0752      	lsls	r2, r2, #29
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	e5fa      	b.n	80007c0 <__aeabi_dadd+0x2a4>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	4a01      	ldr	r2, [pc, #4]	; (8000bd4 <__aeabi_dadd+0x6b8>)
 8000bce:	001c      	movs	r4, r3
 8000bd0:	e540      	b.n	8000654 <__aeabi_dadd+0x138>
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	000007ff 	.word	0x000007ff
 8000bd8:	ff7fffff 	.word	0xff7fffff

08000bdc <__aeabi_ddiv>:
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	4657      	mov	r7, sl
 8000be0:	464e      	mov	r6, r9
 8000be2:	4645      	mov	r5, r8
 8000be4:	46de      	mov	lr, fp
 8000be6:	b5e0      	push	{r5, r6, r7, lr}
 8000be8:	030c      	lsls	r4, r1, #12
 8000bea:	001f      	movs	r7, r3
 8000bec:	004b      	lsls	r3, r1, #1
 8000bee:	4681      	mov	r9, r0
 8000bf0:	4692      	mov	sl, r2
 8000bf2:	0005      	movs	r5, r0
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	0b24      	lsrs	r4, r4, #12
 8000bf8:	0d5b      	lsrs	r3, r3, #21
 8000bfa:	0fce      	lsrs	r6, r1, #31
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0x26>
 8000c00:	e152      	b.n	8000ea8 <__aeabi_ddiv+0x2cc>
 8000c02:	4ad2      	ldr	r2, [pc, #840]	; (8000f4c <__aeabi_ddiv+0x370>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0x2e>
 8000c08:	e16e      	b.n	8000ee8 <__aeabi_ddiv+0x30c>
 8000c0a:	0f42      	lsrs	r2, r0, #29
 8000c0c:	00e4      	lsls	r4, r4, #3
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	0412      	lsls	r2, r2, #16
 8000c14:	4322      	orrs	r2, r4
 8000c16:	4690      	mov	r8, r2
 8000c18:	4acd      	ldr	r2, [pc, #820]	; (8000f50 <__aeabi_ddiv+0x374>)
 8000c1a:	00c5      	lsls	r5, r0, #3
 8000c1c:	4693      	mov	fp, r2
 8000c1e:	449b      	add	fp, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	4699      	mov	r9, r3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	033c      	lsls	r4, r7, #12
 8000c28:	007b      	lsls	r3, r7, #1
 8000c2a:	4650      	mov	r0, sl
 8000c2c:	0b24      	lsrs	r4, r4, #12
 8000c2e:	0d5b      	lsrs	r3, r3, #21
 8000c30:	0fff      	lsrs	r7, r7, #31
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_ddiv+0x5c>
 8000c36:	e11a      	b.n	8000e6e <__aeabi_ddiv+0x292>
 8000c38:	4ac4      	ldr	r2, [pc, #784]	; (8000f4c <__aeabi_ddiv+0x370>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_ddiv+0x64>
 8000c3e:	e15e      	b.n	8000efe <__aeabi_ddiv+0x322>
 8000c40:	0f42      	lsrs	r2, r0, #29
 8000c42:	00e4      	lsls	r4, r4, #3
 8000c44:	4322      	orrs	r2, r4
 8000c46:	2480      	movs	r4, #128	; 0x80
 8000c48:	0424      	lsls	r4, r4, #16
 8000c4a:	4314      	orrs	r4, r2
 8000c4c:	4ac0      	ldr	r2, [pc, #768]	; (8000f50 <__aeabi_ddiv+0x374>)
 8000c4e:	00c1      	lsls	r1, r0, #3
 8000c50:	4694      	mov	ip, r2
 8000c52:	465a      	mov	r2, fp
 8000c54:	4463      	add	r3, ip
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	469b      	mov	fp, r3
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	0033      	movs	r3, r6
 8000c5e:	407b      	eors	r3, r7
 8000c60:	469a      	mov	sl, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d827      	bhi.n	8000cb8 <__aeabi_ddiv+0xdc>
 8000c68:	4aba      	ldr	r2, [pc, #744]	; (8000f54 <__aeabi_ddiv+0x378>)
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	58d3      	ldr	r3, [r2, r3]
 8000c6e:	469f      	mov	pc, r3
 8000c70:	46b2      	mov	sl, r6
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d016      	beq.n	8000ca6 <__aeabi_ddiv+0xca>
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_ddiv+0xa2>
 8000c7c:	e287      	b.n	800118e <__aeabi_ddiv+0x5b2>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d000      	beq.n	8000c84 <__aeabi_ddiv+0xa8>
 8000c82:	e0d5      	b.n	8000e30 <__aeabi_ddiv+0x254>
 8000c84:	2300      	movs	r3, #0
 8000c86:	2200      	movs	r2, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	051b      	lsls	r3, r3, #20
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	4652      	mov	r2, sl
 8000c90:	07d2      	lsls	r2, r2, #31
 8000c92:	4313      	orrs	r3, r2
 8000c94:	0028      	movs	r0, r5
 8000c96:	0019      	movs	r1, r3
 8000c98:	b005      	add	sp, #20
 8000c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c9c:	46bb      	mov	fp, r7
 8000c9e:	46b2      	mov	sl, r6
 8000ca0:	46a9      	mov	r9, r5
 8000ca2:	46a0      	mov	r8, r4
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2500      	movs	r5, #0
 8000caa:	4ba8      	ldr	r3, [pc, #672]	; (8000f4c <__aeabi_ddiv+0x370>)
 8000cac:	e7ed      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46a0      	mov	r8, r4
 8000cb2:	000d      	movs	r5, r1
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	e7dc      	b.n	8000c72 <__aeabi_ddiv+0x96>
 8000cb8:	4544      	cmp	r4, r8
 8000cba:	d200      	bcs.n	8000cbe <__aeabi_ddiv+0xe2>
 8000cbc:	e1c4      	b.n	8001048 <__aeabi_ddiv+0x46c>
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_ddiv+0xe6>
 8000cc0:	e1bf      	b.n	8001042 <__aeabi_ddiv+0x466>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	002e      	movs	r6, r5
 8000cca:	4640      	mov	r0, r8
 8000ccc:	2500      	movs	r5, #0
 8000cce:	44e3      	add	fp, ip
 8000cd0:	0223      	lsls	r3, r4, #8
 8000cd2:	0e0c      	lsrs	r4, r1, #24
 8000cd4:	431c      	orrs	r4, r3
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	4699      	mov	r9, r3
 8000cda:	0423      	lsls	r3, r4, #16
 8000cdc:	020a      	lsls	r2, r1, #8
 8000cde:	0c1f      	lsrs	r7, r3, #16
 8000ce0:	4649      	mov	r1, r9
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	9701      	str	r7, [sp, #4]
 8000ce6:	f7ff faa5 	bl	8000234 <__aeabi_uidivmod>
 8000cea:	0002      	movs	r2, r0
 8000cec:	437a      	muls	r2, r7
 8000cee:	040b      	lsls	r3, r1, #16
 8000cf0:	0c31      	lsrs	r1, r6, #16
 8000cf2:	4680      	mov	r8, r0
 8000cf4:	4319      	orrs	r1, r3
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	d907      	bls.n	8000d0a <__aeabi_ddiv+0x12e>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	469c      	mov	ip, r3
 8000d00:	1909      	adds	r1, r1, r4
 8000d02:	44e0      	add	r8, ip
 8000d04:	428c      	cmp	r4, r1
 8000d06:	d800      	bhi.n	8000d0a <__aeabi_ddiv+0x12e>
 8000d08:	e201      	b.n	800110e <__aeabi_ddiv+0x532>
 8000d0a:	1a88      	subs	r0, r1, r2
 8000d0c:	4649      	mov	r1, r9
 8000d0e:	f7ff fa91 	bl	8000234 <__aeabi_uidivmod>
 8000d12:	9a01      	ldr	r2, [sp, #4]
 8000d14:	0436      	lsls	r6, r6, #16
 8000d16:	4342      	muls	r2, r0
 8000d18:	0409      	lsls	r1, r1, #16
 8000d1a:	0c36      	lsrs	r6, r6, #16
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	430e      	orrs	r6, r1
 8000d20:	42b2      	cmp	r2, r6
 8000d22:	d904      	bls.n	8000d2e <__aeabi_ddiv+0x152>
 8000d24:	1936      	adds	r6, r6, r4
 8000d26:	3b01      	subs	r3, #1
 8000d28:	42b4      	cmp	r4, r6
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x152>
 8000d2c:	e1e9      	b.n	8001102 <__aeabi_ddiv+0x526>
 8000d2e:	1ab0      	subs	r0, r6, r2
 8000d30:	4642      	mov	r2, r8
 8000d32:	9e00      	ldr	r6, [sp, #0]
 8000d34:	0412      	lsls	r2, r2, #16
 8000d36:	431a      	orrs	r2, r3
 8000d38:	0c33      	lsrs	r3, r6, #16
 8000d3a:	001f      	movs	r7, r3
 8000d3c:	0c11      	lsrs	r1, r2, #16
 8000d3e:	4690      	mov	r8, r2
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	0413      	lsls	r3, r2, #16
 8000d44:	0432      	lsls	r2, r6, #16
 8000d46:	0c16      	lsrs	r6, r2, #16
 8000d48:	0032      	movs	r2, r6
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	435a      	muls	r2, r3
 8000d4e:	9603      	str	r6, [sp, #12]
 8000d50:	437b      	muls	r3, r7
 8000d52:	434e      	muls	r6, r1
 8000d54:	4379      	muls	r1, r7
 8000d56:	0c17      	lsrs	r7, r2, #16
 8000d58:	46bc      	mov	ip, r7
 8000d5a:	199b      	adds	r3, r3, r6
 8000d5c:	4463      	add	r3, ip
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d903      	bls.n	8000d6a <__aeabi_ddiv+0x18e>
 8000d62:	2680      	movs	r6, #128	; 0x80
 8000d64:	0276      	lsls	r6, r6, #9
 8000d66:	46b4      	mov	ip, r6
 8000d68:	4461      	add	r1, ip
 8000d6a:	0c1e      	lsrs	r6, r3, #16
 8000d6c:	1871      	adds	r1, r6, r1
 8000d6e:	0416      	lsls	r6, r2, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c36      	lsrs	r6, r6, #16
 8000d74:	199e      	adds	r6, r3, r6
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d302      	bcc.n	8000d80 <__aeabi_ddiv+0x1a4>
 8000d7a:	d112      	bne.n	8000da2 <__aeabi_ddiv+0x1c6>
 8000d7c:	42b5      	cmp	r5, r6
 8000d7e:	d210      	bcs.n	8000da2 <__aeabi_ddiv+0x1c6>
 8000d80:	4643      	mov	r3, r8
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	9b00      	ldr	r3, [sp, #0]
 8000d86:	469c      	mov	ip, r3
 8000d88:	4465      	add	r5, ip
 8000d8a:	001f      	movs	r7, r3
 8000d8c:	429d      	cmp	r5, r3
 8000d8e:	419b      	sbcs	r3, r3
 8000d90:	425b      	negs	r3, r3
 8000d92:	191b      	adds	r3, r3, r4
 8000d94:	18c0      	adds	r0, r0, r3
 8000d96:	4284      	cmp	r4, r0
 8000d98:	d200      	bcs.n	8000d9c <__aeabi_ddiv+0x1c0>
 8000d9a:	e19e      	b.n	80010da <__aeabi_ddiv+0x4fe>
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x1c4>
 8000d9e:	e199      	b.n	80010d4 <__aeabi_ddiv+0x4f8>
 8000da0:	4690      	mov	r8, r2
 8000da2:	1bae      	subs	r6, r5, r6
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	41ad      	sbcs	r5, r5
 8000da8:	1a40      	subs	r0, r0, r1
 8000daa:	426d      	negs	r5, r5
 8000dac:	1b40      	subs	r0, r0, r5
 8000dae:	4284      	cmp	r4, r0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_ddiv+0x1d8>
 8000db2:	e1d2      	b.n	800115a <__aeabi_ddiv+0x57e>
 8000db4:	4649      	mov	r1, r9
 8000db6:	f7ff fa3d 	bl	8000234 <__aeabi_uidivmod>
 8000dba:	9a01      	ldr	r2, [sp, #4]
 8000dbc:	040b      	lsls	r3, r1, #16
 8000dbe:	4342      	muls	r2, r0
 8000dc0:	0c31      	lsrs	r1, r6, #16
 8000dc2:	0005      	movs	r5, r0
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	d900      	bls.n	8000dcc <__aeabi_ddiv+0x1f0>
 8000dca:	e16c      	b.n	80010a6 <__aeabi_ddiv+0x4ca>
 8000dcc:	1a88      	subs	r0, r1, r2
 8000dce:	4649      	mov	r1, r9
 8000dd0:	f7ff fa30 	bl	8000234 <__aeabi_uidivmod>
 8000dd4:	9a01      	ldr	r2, [sp, #4]
 8000dd6:	0436      	lsls	r6, r6, #16
 8000dd8:	4342      	muls	r2, r0
 8000dda:	0409      	lsls	r1, r1, #16
 8000ddc:	0c36      	lsrs	r6, r6, #16
 8000dde:	0003      	movs	r3, r0
 8000de0:	430e      	orrs	r6, r1
 8000de2:	42b2      	cmp	r2, r6
 8000de4:	d900      	bls.n	8000de8 <__aeabi_ddiv+0x20c>
 8000de6:	e153      	b.n	8001090 <__aeabi_ddiv+0x4b4>
 8000de8:	9803      	ldr	r0, [sp, #12]
 8000dea:	1ab6      	subs	r6, r6, r2
 8000dec:	0002      	movs	r2, r0
 8000dee:	042d      	lsls	r5, r5, #16
 8000df0:	431d      	orrs	r5, r3
 8000df2:	9f02      	ldr	r7, [sp, #8]
 8000df4:	042b      	lsls	r3, r5, #16
 8000df6:	0c1b      	lsrs	r3, r3, #16
 8000df8:	435a      	muls	r2, r3
 8000dfa:	437b      	muls	r3, r7
 8000dfc:	469c      	mov	ip, r3
 8000dfe:	0c29      	lsrs	r1, r5, #16
 8000e00:	4348      	muls	r0, r1
 8000e02:	0c13      	lsrs	r3, r2, #16
 8000e04:	4484      	add	ip, r0
 8000e06:	4463      	add	r3, ip
 8000e08:	4379      	muls	r1, r7
 8000e0a:	4298      	cmp	r0, r3
 8000e0c:	d903      	bls.n	8000e16 <__aeabi_ddiv+0x23a>
 8000e0e:	2080      	movs	r0, #128	; 0x80
 8000e10:	0240      	lsls	r0, r0, #9
 8000e12:	4684      	mov	ip, r0
 8000e14:	4461      	add	r1, ip
 8000e16:	0c18      	lsrs	r0, r3, #16
 8000e18:	0412      	lsls	r2, r2, #16
 8000e1a:	041b      	lsls	r3, r3, #16
 8000e1c:	0c12      	lsrs	r2, r2, #16
 8000e1e:	1840      	adds	r0, r0, r1
 8000e20:	189b      	adds	r3, r3, r2
 8000e22:	4286      	cmp	r6, r0
 8000e24:	d200      	bcs.n	8000e28 <__aeabi_ddiv+0x24c>
 8000e26:	e100      	b.n	800102a <__aeabi_ddiv+0x44e>
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x250>
 8000e2a:	e0fb      	b.n	8001024 <__aeabi_ddiv+0x448>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	431d      	orrs	r5, r3
 8000e30:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <__aeabi_ddiv+0x37c>)
 8000e32:	445b      	add	r3, fp
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	dc00      	bgt.n	8000e3a <__aeabi_ddiv+0x25e>
 8000e38:	e0aa      	b.n	8000f90 <__aeabi_ddiv+0x3b4>
 8000e3a:	076a      	lsls	r2, r5, #29
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0x264>
 8000e3e:	e13d      	b.n	80010bc <__aeabi_ddiv+0x4e0>
 8000e40:	08e9      	lsrs	r1, r5, #3
 8000e42:	4642      	mov	r2, r8
 8000e44:	01d2      	lsls	r2, r2, #7
 8000e46:	d506      	bpl.n	8000e56 <__aeabi_ddiv+0x27a>
 8000e48:	4642      	mov	r2, r8
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <__aeabi_ddiv+0x380>)
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	4690      	mov	r8, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	445b      	add	r3, fp
 8000e56:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <__aeabi_ddiv+0x384>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	dd00      	ble.n	8000e5e <__aeabi_ddiv+0x282>
 8000e5c:	e723      	b.n	8000ca6 <__aeabi_ddiv+0xca>
 8000e5e:	4642      	mov	r2, r8
 8000e60:	055b      	lsls	r3, r3, #21
 8000e62:	0755      	lsls	r5, r2, #29
 8000e64:	0252      	lsls	r2, r2, #9
 8000e66:	430d      	orrs	r5, r1
 8000e68:	0b12      	lsrs	r2, r2, #12
 8000e6a:	0d5b      	lsrs	r3, r3, #21
 8000e6c:	e70d      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8000e6e:	4651      	mov	r1, sl
 8000e70:	4321      	orrs	r1, r4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x29a>
 8000e74:	e07c      	b.n	8000f70 <__aeabi_ddiv+0x394>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_ddiv+0x2a0>
 8000e7a:	e0fb      	b.n	8001074 <__aeabi_ddiv+0x498>
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	f001 f8f1 	bl	8002064 <__clzsi2>
 8000e82:	0002      	movs	r2, r0
 8000e84:	3a0b      	subs	r2, #11
 8000e86:	231d      	movs	r3, #29
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	4652      	mov	r2, sl
 8000e8c:	0001      	movs	r1, r0
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	4653      	mov	r3, sl
 8000e92:	3908      	subs	r1, #8
 8000e94:	408b      	lsls	r3, r1
 8000e96:	408c      	lsls	r4, r1
 8000e98:	0019      	movs	r1, r3
 8000e9a:	4314      	orrs	r4, r2
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <__aeabi_ddiv+0x388>)
 8000e9e:	4458      	add	r0, fp
 8000ea0:	469b      	mov	fp, r3
 8000ea2:	4483      	add	fp, r0
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	e6d9      	b.n	8000c5c <__aeabi_ddiv+0x80>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	4698      	mov	r8, r3
 8000eae:	d044      	beq.n	8000f3a <__aeabi_ddiv+0x35e>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_ddiv+0x2da>
 8000eb4:	e0cf      	b.n	8001056 <__aeabi_ddiv+0x47a>
 8000eb6:	0020      	movs	r0, r4
 8000eb8:	f001 f8d4 	bl	8002064 <__clzsi2>
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	390b      	subs	r1, #11
 8000ec2:	231d      	movs	r3, #29
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	0010      	movs	r0, r2
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	3808      	subs	r0, #8
 8000ece:	4084      	lsls	r4, r0
 8000ed0:	000b      	movs	r3, r1
 8000ed2:	464d      	mov	r5, r9
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	4085      	lsls	r5, r0
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <__aeabi_ddiv+0x38c>)
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	469b      	mov	fp, r3
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	e69e      	b.n	8000c26 <__aeabi_ddiv+0x4a>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	4322      	orrs	r2, r4
 8000eec:	4690      	mov	r8, r2
 8000eee:	d11d      	bne.n	8000f2c <__aeabi_ddiv+0x350>
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	469b      	mov	fp, r3
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	4691      	mov	r9, r2
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	e693      	b.n	8000c26 <__aeabi_ddiv+0x4a>
 8000efe:	4651      	mov	r1, sl
 8000f00:	4321      	orrs	r1, r4
 8000f02:	d109      	bne.n	8000f18 <__aeabi_ddiv+0x33c>
 8000f04:	2302      	movs	r3, #2
 8000f06:	464a      	mov	r2, r9
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <__aeabi_ddiv+0x390>)
 8000f0c:	4691      	mov	r9, r2
 8000f0e:	469c      	mov	ip, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	2002      	movs	r0, #2
 8000f14:	44e3      	add	fp, ip
 8000f16:	e6a1      	b.n	8000c5c <__aeabi_ddiv+0x80>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	464a      	mov	r2, r9
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <__aeabi_ddiv+0x390>)
 8000f20:	4691      	mov	r9, r2
 8000f22:	469c      	mov	ip, r3
 8000f24:	4651      	mov	r1, sl
 8000f26:	2003      	movs	r0, #3
 8000f28:	44e3      	add	fp, ip
 8000f2a:	e697      	b.n	8000c5c <__aeabi_ddiv+0x80>
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	469b      	mov	fp, r3
 8000f30:	2303      	movs	r3, #3
 8000f32:	46a0      	mov	r8, r4
 8000f34:	4691      	mov	r9, r2
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	e675      	b.n	8000c26 <__aeabi_ddiv+0x4a>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	4699      	mov	r9, r3
 8000f3e:	2300      	movs	r3, #0
 8000f40:	469b      	mov	fp, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	2500      	movs	r5, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e66d      	b.n	8000c26 <__aeabi_ddiv+0x4a>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	fffffc01 	.word	0xfffffc01
 8000f54:	08009d54 	.word	0x08009d54
 8000f58:	000003ff 	.word	0x000003ff
 8000f5c:	feffffff 	.word	0xfeffffff
 8000f60:	000007fe 	.word	0x000007fe
 8000f64:	000003f3 	.word	0x000003f3
 8000f68:	fffffc0d 	.word	0xfffffc0d
 8000f6c:	fffff801 	.word	0xfffff801
 8000f70:	464a      	mov	r2, r9
 8000f72:	2301      	movs	r3, #1
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	2400      	movs	r4, #0
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e66e      	b.n	8000c5c <__aeabi_ddiv+0x80>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	469a      	mov	sl, r3
 8000f84:	2500      	movs	r5, #0
 8000f86:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <__aeabi_ddiv+0x5cc>)
 8000f88:	0312      	lsls	r2, r2, #12
 8000f8a:	e67e      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8000f8c:	2501      	movs	r5, #1
 8000f8e:	426d      	negs	r5, r5
 8000f90:	2201      	movs	r2, #1
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	2a38      	cmp	r2, #56	; 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_ddiv+0x3be>
 8000f98:	e674      	b.n	8000c84 <__aeabi_ddiv+0xa8>
 8000f9a:	2a1f      	cmp	r2, #31
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_ddiv+0x3c4>
 8000f9e:	e0bd      	b.n	800111c <__aeabi_ddiv+0x540>
 8000fa0:	211f      	movs	r1, #31
 8000fa2:	4249      	negs	r1, r1
 8000fa4:	1acb      	subs	r3, r1, r3
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	40d9      	lsrs	r1, r3
 8000faa:	000b      	movs	r3, r1
 8000fac:	2a20      	cmp	r2, #32
 8000fae:	d004      	beq.n	8000fba <__aeabi_ddiv+0x3de>
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <__aeabi_ddiv+0x5d0>)
 8000fb4:	445a      	add	r2, fp
 8000fb6:	4091      	lsls	r1, r2
 8000fb8:	430d      	orrs	r5, r1
 8000fba:	0029      	movs	r1, r5
 8000fbc:	1e4a      	subs	r2, r1, #1
 8000fbe:	4191      	sbcs	r1, r2
 8000fc0:	4319      	orrs	r1, r3
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	001d      	movs	r5, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	400d      	ands	r5, r1
 8000fca:	420b      	tst	r3, r1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x3f4>
 8000fce:	e0d0      	b.n	8001172 <__aeabi_ddiv+0x596>
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	2a04      	cmp	r2, #4
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x400>
 8000fda:	e0c7      	b.n	800116c <__aeabi_ddiv+0x590>
 8000fdc:	1d0a      	adds	r2, r1, #4
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	4189      	sbcs	r1, r1
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	021a      	lsls	r2, r3, #8
 8000fea:	d400      	bmi.n	8000fee <__aeabi_ddiv+0x412>
 8000fec:	e0be      	b.n	800116c <__aeabi_ddiv+0x590>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	e649      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	0312      	lsls	r2, r2, #12
 8000ffc:	4213      	tst	r3, r2
 8000ffe:	d008      	beq.n	8001012 <__aeabi_ddiv+0x436>
 8001000:	4214      	tst	r4, r2
 8001002:	d106      	bne.n	8001012 <__aeabi_ddiv+0x436>
 8001004:	4322      	orrs	r2, r4
 8001006:	0312      	lsls	r2, r2, #12
 8001008:	46ba      	mov	sl, r7
 800100a:	000d      	movs	r5, r1
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <__aeabi_ddiv+0x5cc>)
 800100e:	0b12      	lsrs	r2, r2, #12
 8001010:	e63b      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	4643      	mov	r3, r8
 8001016:	0312      	lsls	r2, r2, #12
 8001018:	431a      	orrs	r2, r3
 800101a:	0312      	lsls	r2, r2, #12
 800101c:	46b2      	mov	sl, r6
 800101e:	4b62      	ldr	r3, [pc, #392]	; (80011a8 <__aeabi_ddiv+0x5cc>)
 8001020:	0b12      	lsrs	r2, r2, #12
 8001022:	e632      	b.n	8000c8a <__aeabi_ddiv+0xae>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x44e>
 8001028:	e702      	b.n	8000e30 <__aeabi_ddiv+0x254>
 800102a:	19a6      	adds	r6, r4, r6
 800102c:	1e6a      	subs	r2, r5, #1
 800102e:	42a6      	cmp	r6, r4
 8001030:	d200      	bcs.n	8001034 <__aeabi_ddiv+0x458>
 8001032:	e089      	b.n	8001148 <__aeabi_ddiv+0x56c>
 8001034:	4286      	cmp	r6, r0
 8001036:	d200      	bcs.n	800103a <__aeabi_ddiv+0x45e>
 8001038:	e09f      	b.n	800117a <__aeabi_ddiv+0x59e>
 800103a:	d100      	bne.n	800103e <__aeabi_ddiv+0x462>
 800103c:	e0af      	b.n	800119e <__aeabi_ddiv+0x5c2>
 800103e:	0015      	movs	r5, r2
 8001040:	e6f4      	b.n	8000e2c <__aeabi_ddiv+0x250>
 8001042:	42a9      	cmp	r1, r5
 8001044:	d900      	bls.n	8001048 <__aeabi_ddiv+0x46c>
 8001046:	e63c      	b.n	8000cc2 <__aeabi_ddiv+0xe6>
 8001048:	4643      	mov	r3, r8
 800104a:	07de      	lsls	r6, r3, #31
 800104c:	0858      	lsrs	r0, r3, #1
 800104e:	086b      	lsrs	r3, r5, #1
 8001050:	431e      	orrs	r6, r3
 8001052:	07ed      	lsls	r5, r5, #31
 8001054:	e63c      	b.n	8000cd0 <__aeabi_ddiv+0xf4>
 8001056:	f001 f805 	bl	8002064 <__clzsi2>
 800105a:	0001      	movs	r1, r0
 800105c:	0002      	movs	r2, r0
 800105e:	3115      	adds	r1, #21
 8001060:	3220      	adds	r2, #32
 8001062:	291c      	cmp	r1, #28
 8001064:	dc00      	bgt.n	8001068 <__aeabi_ddiv+0x48c>
 8001066:	e72c      	b.n	8000ec2 <__aeabi_ddiv+0x2e6>
 8001068:	464b      	mov	r3, r9
 800106a:	3808      	subs	r0, #8
 800106c:	4083      	lsls	r3, r0
 800106e:	2500      	movs	r5, #0
 8001070:	4698      	mov	r8, r3
 8001072:	e732      	b.n	8000eda <__aeabi_ddiv+0x2fe>
 8001074:	f000 fff6 	bl	8002064 <__clzsi2>
 8001078:	0003      	movs	r3, r0
 800107a:	001a      	movs	r2, r3
 800107c:	3215      	adds	r2, #21
 800107e:	3020      	adds	r0, #32
 8001080:	2a1c      	cmp	r2, #28
 8001082:	dc00      	bgt.n	8001086 <__aeabi_ddiv+0x4aa>
 8001084:	e6ff      	b.n	8000e86 <__aeabi_ddiv+0x2aa>
 8001086:	4654      	mov	r4, sl
 8001088:	3b08      	subs	r3, #8
 800108a:	2100      	movs	r1, #0
 800108c:	409c      	lsls	r4, r3
 800108e:	e705      	b.n	8000e9c <__aeabi_ddiv+0x2c0>
 8001090:	1936      	adds	r6, r6, r4
 8001092:	3b01      	subs	r3, #1
 8001094:	42b4      	cmp	r4, r6
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x4be>
 8001098:	e6a6      	b.n	8000de8 <__aeabi_ddiv+0x20c>
 800109a:	42b2      	cmp	r2, r6
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x4c4>
 800109e:	e6a3      	b.n	8000de8 <__aeabi_ddiv+0x20c>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	1936      	adds	r6, r6, r4
 80010a4:	e6a0      	b.n	8000de8 <__aeabi_ddiv+0x20c>
 80010a6:	1909      	adds	r1, r1, r4
 80010a8:	3d01      	subs	r5, #1
 80010aa:	428c      	cmp	r4, r1
 80010ac:	d900      	bls.n	80010b0 <__aeabi_ddiv+0x4d4>
 80010ae:	e68d      	b.n	8000dcc <__aeabi_ddiv+0x1f0>
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d800      	bhi.n	80010b6 <__aeabi_ddiv+0x4da>
 80010b4:	e68a      	b.n	8000dcc <__aeabi_ddiv+0x1f0>
 80010b6:	1e85      	subs	r5, r0, #2
 80010b8:	1909      	adds	r1, r1, r4
 80010ba:	e687      	b.n	8000dcc <__aeabi_ddiv+0x1f0>
 80010bc:	220f      	movs	r2, #15
 80010be:	402a      	ands	r2, r5
 80010c0:	2a04      	cmp	r2, #4
 80010c2:	d100      	bne.n	80010c6 <__aeabi_ddiv+0x4ea>
 80010c4:	e6bc      	b.n	8000e40 <__aeabi_ddiv+0x264>
 80010c6:	1d29      	adds	r1, r5, #4
 80010c8:	42a9      	cmp	r1, r5
 80010ca:	41ad      	sbcs	r5, r5
 80010cc:	426d      	negs	r5, r5
 80010ce:	08c9      	lsrs	r1, r1, #3
 80010d0:	44a8      	add	r8, r5
 80010d2:	e6b6      	b.n	8000e42 <__aeabi_ddiv+0x266>
 80010d4:	42af      	cmp	r7, r5
 80010d6:	d900      	bls.n	80010da <__aeabi_ddiv+0x4fe>
 80010d8:	e662      	b.n	8000da0 <__aeabi_ddiv+0x1c4>
 80010da:	4281      	cmp	r1, r0
 80010dc:	d804      	bhi.n	80010e8 <__aeabi_ddiv+0x50c>
 80010de:	d000      	beq.n	80010e2 <__aeabi_ddiv+0x506>
 80010e0:	e65e      	b.n	8000da0 <__aeabi_ddiv+0x1c4>
 80010e2:	42ae      	cmp	r6, r5
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x50c>
 80010e6:	e65b      	b.n	8000da0 <__aeabi_ddiv+0x1c4>
 80010e8:	2302      	movs	r3, #2
 80010ea:	425b      	negs	r3, r3
 80010ec:	469c      	mov	ip, r3
 80010ee:	9b00      	ldr	r3, [sp, #0]
 80010f0:	44e0      	add	r8, ip
 80010f2:	469c      	mov	ip, r3
 80010f4:	4465      	add	r5, ip
 80010f6:	429d      	cmp	r5, r3
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	425b      	negs	r3, r3
 80010fc:	191b      	adds	r3, r3, r4
 80010fe:	18c0      	adds	r0, r0, r3
 8001100:	e64f      	b.n	8000da2 <__aeabi_ddiv+0x1c6>
 8001102:	42b2      	cmp	r2, r6
 8001104:	d800      	bhi.n	8001108 <__aeabi_ddiv+0x52c>
 8001106:	e612      	b.n	8000d2e <__aeabi_ddiv+0x152>
 8001108:	1e83      	subs	r3, r0, #2
 800110a:	1936      	adds	r6, r6, r4
 800110c:	e60f      	b.n	8000d2e <__aeabi_ddiv+0x152>
 800110e:	428a      	cmp	r2, r1
 8001110:	d800      	bhi.n	8001114 <__aeabi_ddiv+0x538>
 8001112:	e5fa      	b.n	8000d0a <__aeabi_ddiv+0x12e>
 8001114:	1e83      	subs	r3, r0, #2
 8001116:	4698      	mov	r8, r3
 8001118:	1909      	adds	r1, r1, r4
 800111a:	e5f6      	b.n	8000d0a <__aeabi_ddiv+0x12e>
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <__aeabi_ddiv+0x5d4>)
 800111e:	0028      	movs	r0, r5
 8001120:	445b      	add	r3, fp
 8001122:	4641      	mov	r1, r8
 8001124:	409d      	lsls	r5, r3
 8001126:	4099      	lsls	r1, r3
 8001128:	40d0      	lsrs	r0, r2
 800112a:	1e6b      	subs	r3, r5, #1
 800112c:	419d      	sbcs	r5, r3
 800112e:	4643      	mov	r3, r8
 8001130:	4301      	orrs	r1, r0
 8001132:	4329      	orrs	r1, r5
 8001134:	40d3      	lsrs	r3, r2
 8001136:	074a      	lsls	r2, r1, #29
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x560>
 800113a:	e755      	b.n	8000fe8 <__aeabi_ddiv+0x40c>
 800113c:	220f      	movs	r2, #15
 800113e:	400a      	ands	r2, r1
 8001140:	2a04      	cmp	r2, #4
 8001142:	d000      	beq.n	8001146 <__aeabi_ddiv+0x56a>
 8001144:	e74a      	b.n	8000fdc <__aeabi_ddiv+0x400>
 8001146:	e74f      	b.n	8000fe8 <__aeabi_ddiv+0x40c>
 8001148:	0015      	movs	r5, r2
 800114a:	4286      	cmp	r6, r0
 800114c:	d000      	beq.n	8001150 <__aeabi_ddiv+0x574>
 800114e:	e66d      	b.n	8000e2c <__aeabi_ddiv+0x250>
 8001150:	9a00      	ldr	r2, [sp, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d000      	beq.n	8001158 <__aeabi_ddiv+0x57c>
 8001156:	e669      	b.n	8000e2c <__aeabi_ddiv+0x250>
 8001158:	e66a      	b.n	8000e30 <__aeabi_ddiv+0x254>
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <__aeabi_ddiv+0x5d8>)
 800115c:	445b      	add	r3, fp
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc00      	bgt.n	8001164 <__aeabi_ddiv+0x588>
 8001162:	e713      	b.n	8000f8c <__aeabi_ddiv+0x3b0>
 8001164:	2501      	movs	r5, #1
 8001166:	2100      	movs	r1, #0
 8001168:	44a8      	add	r8, r5
 800116a:	e66a      	b.n	8000e42 <__aeabi_ddiv+0x266>
 800116c:	075d      	lsls	r5, r3, #29
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	0b1a      	lsrs	r2, r3, #12
 8001172:	08c9      	lsrs	r1, r1, #3
 8001174:	2300      	movs	r3, #0
 8001176:	430d      	orrs	r5, r1
 8001178:	e587      	b.n	8000c8a <__aeabi_ddiv+0xae>
 800117a:	9900      	ldr	r1, [sp, #0]
 800117c:	3d02      	subs	r5, #2
 800117e:	004a      	lsls	r2, r1, #1
 8001180:	428a      	cmp	r2, r1
 8001182:	41bf      	sbcs	r7, r7
 8001184:	427f      	negs	r7, r7
 8001186:	193f      	adds	r7, r7, r4
 8001188:	19f6      	adds	r6, r6, r7
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	e7dd      	b.n	800114a <__aeabi_ddiv+0x56e>
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	4643      	mov	r3, r8
 8001192:	0312      	lsls	r2, r2, #12
 8001194:	431a      	orrs	r2, r3
 8001196:	0312      	lsls	r2, r2, #12
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <__aeabi_ddiv+0x5cc>)
 800119a:	0b12      	lsrs	r2, r2, #12
 800119c:	e575      	b.n	8000c8a <__aeabi_ddiv+0xae>
 800119e:	9900      	ldr	r1, [sp, #0]
 80011a0:	4299      	cmp	r1, r3
 80011a2:	d3ea      	bcc.n	800117a <__aeabi_ddiv+0x59e>
 80011a4:	0015      	movs	r5, r2
 80011a6:	e7d3      	b.n	8001150 <__aeabi_ddiv+0x574>
 80011a8:	000007ff 	.word	0x000007ff
 80011ac:	0000043e 	.word	0x0000043e
 80011b0:	0000041e 	.word	0x0000041e
 80011b4:	000003ff 	.word	0x000003ff

080011b8 <__aeabi_dmul>:
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	4645      	mov	r5, r8
 80011bc:	46de      	mov	lr, fp
 80011be:	4657      	mov	r7, sl
 80011c0:	464e      	mov	r6, r9
 80011c2:	b5e0      	push	{r5, r6, r7, lr}
 80011c4:	001f      	movs	r7, r3
 80011c6:	030b      	lsls	r3, r1, #12
 80011c8:	0b1b      	lsrs	r3, r3, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	004d      	lsls	r5, r1, #1
 80011ce:	0fcb      	lsrs	r3, r1, #31
 80011d0:	0004      	movs	r4, r0
 80011d2:	4691      	mov	r9, r2
 80011d4:	4698      	mov	r8, r3
 80011d6:	b087      	sub	sp, #28
 80011d8:	0d6d      	lsrs	r5, r5, #21
 80011da:	d100      	bne.n	80011de <__aeabi_dmul+0x26>
 80011dc:	e1cd      	b.n	800157a <__aeabi_dmul+0x3c2>
 80011de:	4bce      	ldr	r3, [pc, #824]	; (8001518 <__aeabi_dmul+0x360>)
 80011e0:	429d      	cmp	r5, r3
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dmul+0x2e>
 80011e4:	e1e9      	b.n	80015ba <__aeabi_dmul+0x402>
 80011e6:	465a      	mov	r2, fp
 80011e8:	0f43      	lsrs	r3, r0, #29
 80011ea:	00d2      	lsls	r2, r2, #3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	0412      	lsls	r2, r2, #16
 80011f2:	431a      	orrs	r2, r3
 80011f4:	00c3      	lsls	r3, r0, #3
 80011f6:	469a      	mov	sl, r3
 80011f8:	4bc8      	ldr	r3, [pc, #800]	; (800151c <__aeabi_dmul+0x364>)
 80011fa:	4693      	mov	fp, r2
 80011fc:	469c      	mov	ip, r3
 80011fe:	2300      	movs	r3, #0
 8001200:	2600      	movs	r6, #0
 8001202:	4465      	add	r5, ip
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	033c      	lsls	r4, r7, #12
 8001208:	007b      	lsls	r3, r7, #1
 800120a:	4648      	mov	r0, r9
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	0d5b      	lsrs	r3, r3, #21
 8001210:	0fff      	lsrs	r7, r7, #31
 8001212:	2b00      	cmp	r3, #0
 8001214:	d100      	bne.n	8001218 <__aeabi_dmul+0x60>
 8001216:	e189      	b.n	800152c <__aeabi_dmul+0x374>
 8001218:	4abf      	ldr	r2, [pc, #764]	; (8001518 <__aeabi_dmul+0x360>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <__aeabi_dmul+0x9a>
 800121e:	0f42      	lsrs	r2, r0, #29
 8001220:	00e4      	lsls	r4, r4, #3
 8001222:	4322      	orrs	r2, r4
 8001224:	2480      	movs	r4, #128	; 0x80
 8001226:	0424      	lsls	r4, r4, #16
 8001228:	4314      	orrs	r4, r2
 800122a:	4abc      	ldr	r2, [pc, #752]	; (800151c <__aeabi_dmul+0x364>)
 800122c:	2100      	movs	r1, #0
 800122e:	4694      	mov	ip, r2
 8001230:	4642      	mov	r2, r8
 8001232:	4463      	add	r3, ip
 8001234:	195b      	adds	r3, r3, r5
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	9b01      	ldr	r3, [sp, #4]
 800123a:	407a      	eors	r2, r7
 800123c:	3301      	adds	r3, #1
 800123e:	00c0      	lsls	r0, r0, #3
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2e0a      	cmp	r6, #10
 8001246:	dd1c      	ble.n	8001282 <__aeabi_dmul+0xca>
 8001248:	003a      	movs	r2, r7
 800124a:	2e0b      	cmp	r6, #11
 800124c:	d05e      	beq.n	800130c <__aeabi_dmul+0x154>
 800124e:	4647      	mov	r7, r8
 8001250:	e056      	b.n	8001300 <__aeabi_dmul+0x148>
 8001252:	4649      	mov	r1, r9
 8001254:	4bb0      	ldr	r3, [pc, #704]	; (8001518 <__aeabi_dmul+0x360>)
 8001256:	4321      	orrs	r1, r4
 8001258:	18eb      	adds	r3, r5, r3
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2900      	cmp	r1, #0
 800125e:	d12a      	bne.n	80012b6 <__aeabi_dmul+0xfe>
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	2202      	movs	r2, #2
 8001264:	0100      	lsls	r0, r0, #4
 8001266:	002b      	movs	r3, r5
 8001268:	4684      	mov	ip, r0
 800126a:	4316      	orrs	r6, r2
 800126c:	4642      	mov	r2, r8
 800126e:	4463      	add	r3, ip
 8001270:	407a      	eors	r2, r7
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2e0a      	cmp	r6, #10
 8001278:	dd00      	ble.n	800127c <__aeabi_dmul+0xc4>
 800127a:	e231      	b.n	80016e0 <__aeabi_dmul+0x528>
 800127c:	2000      	movs	r0, #0
 800127e:	2400      	movs	r4, #0
 8001280:	2102      	movs	r1, #2
 8001282:	2e02      	cmp	r6, #2
 8001284:	dc26      	bgt.n	80012d4 <__aeabi_dmul+0x11c>
 8001286:	3e01      	subs	r6, #1
 8001288:	2e01      	cmp	r6, #1
 800128a:	d852      	bhi.n	8001332 <__aeabi_dmul+0x17a>
 800128c:	2902      	cmp	r1, #2
 800128e:	d04c      	beq.n	800132a <__aeabi_dmul+0x172>
 8001290:	2901      	cmp	r1, #1
 8001292:	d000      	beq.n	8001296 <__aeabi_dmul+0xde>
 8001294:	e118      	b.n	80014c8 <__aeabi_dmul+0x310>
 8001296:	2300      	movs	r3, #0
 8001298:	2400      	movs	r4, #0
 800129a:	2500      	movs	r5, #0
 800129c:	051b      	lsls	r3, r3, #20
 800129e:	4323      	orrs	r3, r4
 80012a0:	07d2      	lsls	r2, r2, #31
 80012a2:	4313      	orrs	r3, r2
 80012a4:	0028      	movs	r0, r5
 80012a6:	0019      	movs	r1, r3
 80012a8:	b007      	add	sp, #28
 80012aa:	bcf0      	pop	{r4, r5, r6, r7}
 80012ac:	46bb      	mov	fp, r7
 80012ae:	46b2      	mov	sl, r6
 80012b0:	46a9      	mov	r9, r5
 80012b2:	46a0      	mov	r8, r4
 80012b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	2203      	movs	r2, #3
 80012ba:	0109      	lsls	r1, r1, #4
 80012bc:	002b      	movs	r3, r5
 80012be:	468c      	mov	ip, r1
 80012c0:	4316      	orrs	r6, r2
 80012c2:	4642      	mov	r2, r8
 80012c4:	4463      	add	r3, ip
 80012c6:	407a      	eors	r2, r7
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2e0a      	cmp	r6, #10
 80012ce:	dd00      	ble.n	80012d2 <__aeabi_dmul+0x11a>
 80012d0:	e228      	b.n	8001724 <__aeabi_dmul+0x56c>
 80012d2:	2103      	movs	r1, #3
 80012d4:	2501      	movs	r5, #1
 80012d6:	40b5      	lsls	r5, r6
 80012d8:	46ac      	mov	ip, r5
 80012da:	26a6      	movs	r6, #166	; 0xa6
 80012dc:	4663      	mov	r3, ip
 80012de:	00f6      	lsls	r6, r6, #3
 80012e0:	4035      	ands	r5, r6
 80012e2:	4233      	tst	r3, r6
 80012e4:	d10b      	bne.n	80012fe <__aeabi_dmul+0x146>
 80012e6:	2690      	movs	r6, #144	; 0x90
 80012e8:	00b6      	lsls	r6, r6, #2
 80012ea:	4233      	tst	r3, r6
 80012ec:	d118      	bne.n	8001320 <__aeabi_dmul+0x168>
 80012ee:	3eb9      	subs	r6, #185	; 0xb9
 80012f0:	3eff      	subs	r6, #255	; 0xff
 80012f2:	421e      	tst	r6, r3
 80012f4:	d01d      	beq.n	8001332 <__aeabi_dmul+0x17a>
 80012f6:	46a3      	mov	fp, r4
 80012f8:	4682      	mov	sl, r0
 80012fa:	9100      	str	r1, [sp, #0]
 80012fc:	e000      	b.n	8001300 <__aeabi_dmul+0x148>
 80012fe:	0017      	movs	r7, r2
 8001300:	9900      	ldr	r1, [sp, #0]
 8001302:	003a      	movs	r2, r7
 8001304:	2902      	cmp	r1, #2
 8001306:	d010      	beq.n	800132a <__aeabi_dmul+0x172>
 8001308:	465c      	mov	r4, fp
 800130a:	4650      	mov	r0, sl
 800130c:	2903      	cmp	r1, #3
 800130e:	d1bf      	bne.n	8001290 <__aeabi_dmul+0xd8>
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	031b      	lsls	r3, r3, #12
 8001314:	431c      	orrs	r4, r3
 8001316:	0324      	lsls	r4, r4, #12
 8001318:	0005      	movs	r5, r0
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <__aeabi_dmul+0x360>)
 800131c:	0b24      	lsrs	r4, r4, #12
 800131e:	e7bd      	b.n	800129c <__aeabi_dmul+0xe4>
 8001320:	2480      	movs	r4, #128	; 0x80
 8001322:	2200      	movs	r2, #0
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <__aeabi_dmul+0x360>)
 8001326:	0324      	lsls	r4, r4, #12
 8001328:	e7b8      	b.n	800129c <__aeabi_dmul+0xe4>
 800132a:	2400      	movs	r4, #0
 800132c:	2500      	movs	r5, #0
 800132e:	4b7a      	ldr	r3, [pc, #488]	; (8001518 <__aeabi_dmul+0x360>)
 8001330:	e7b4      	b.n	800129c <__aeabi_dmul+0xe4>
 8001332:	4653      	mov	r3, sl
 8001334:	041e      	lsls	r6, r3, #16
 8001336:	0c36      	lsrs	r6, r6, #16
 8001338:	0c1f      	lsrs	r7, r3, #16
 800133a:	0033      	movs	r3, r6
 800133c:	0c01      	lsrs	r1, r0, #16
 800133e:	0400      	lsls	r0, r0, #16
 8001340:	0c00      	lsrs	r0, r0, #16
 8001342:	4343      	muls	r3, r0
 8001344:	4698      	mov	r8, r3
 8001346:	0003      	movs	r3, r0
 8001348:	437b      	muls	r3, r7
 800134a:	4699      	mov	r9, r3
 800134c:	0033      	movs	r3, r6
 800134e:	434b      	muls	r3, r1
 8001350:	469c      	mov	ip, r3
 8001352:	4643      	mov	r3, r8
 8001354:	000d      	movs	r5, r1
 8001356:	0c1b      	lsrs	r3, r3, #16
 8001358:	469a      	mov	sl, r3
 800135a:	437d      	muls	r5, r7
 800135c:	44cc      	add	ip, r9
 800135e:	44d4      	add	ip, sl
 8001360:	9500      	str	r5, [sp, #0]
 8001362:	45e1      	cmp	r9, ip
 8001364:	d904      	bls.n	8001370 <__aeabi_dmul+0x1b8>
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	025b      	lsls	r3, r3, #9
 800136a:	4699      	mov	r9, r3
 800136c:	444d      	add	r5, r9
 800136e:	9500      	str	r5, [sp, #0]
 8001370:	4663      	mov	r3, ip
 8001372:	0c1b      	lsrs	r3, r3, #16
 8001374:	001d      	movs	r5, r3
 8001376:	4663      	mov	r3, ip
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	469c      	mov	ip, r3
 800137c:	4643      	mov	r3, r8
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	4698      	mov	r8, r3
 8001384:	4663      	mov	r3, ip
 8001386:	4443      	add	r3, r8
 8001388:	9303      	str	r3, [sp, #12]
 800138a:	0c23      	lsrs	r3, r4, #16
 800138c:	4698      	mov	r8, r3
 800138e:	0033      	movs	r3, r6
 8001390:	0424      	lsls	r4, r4, #16
 8001392:	0c24      	lsrs	r4, r4, #16
 8001394:	4363      	muls	r3, r4
 8001396:	469c      	mov	ip, r3
 8001398:	0023      	movs	r3, r4
 800139a:	437b      	muls	r3, r7
 800139c:	4699      	mov	r9, r3
 800139e:	4643      	mov	r3, r8
 80013a0:	435e      	muls	r6, r3
 80013a2:	435f      	muls	r7, r3
 80013a4:	444e      	add	r6, r9
 80013a6:	4663      	mov	r3, ip
 80013a8:	46b2      	mov	sl, r6
 80013aa:	0c1e      	lsrs	r6, r3, #16
 80013ac:	4456      	add	r6, sl
 80013ae:	45b1      	cmp	r9, r6
 80013b0:	d903      	bls.n	80013ba <__aeabi_dmul+0x202>
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	4699      	mov	r9, r3
 80013b8:	444f      	add	r7, r9
 80013ba:	0c33      	lsrs	r3, r6, #16
 80013bc:	4699      	mov	r9, r3
 80013be:	003b      	movs	r3, r7
 80013c0:	444b      	add	r3, r9
 80013c2:	9305      	str	r3, [sp, #20]
 80013c4:	4663      	mov	r3, ip
 80013c6:	46ac      	mov	ip, r5
 80013c8:	041f      	lsls	r7, r3, #16
 80013ca:	0c3f      	lsrs	r7, r7, #16
 80013cc:	0436      	lsls	r6, r6, #16
 80013ce:	19f6      	adds	r6, r6, r7
 80013d0:	44b4      	add	ip, r6
 80013d2:	4663      	mov	r3, ip
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	465b      	mov	r3, fp
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	469c      	mov	ip, r3
 80013dc:	465b      	mov	r3, fp
 80013de:	041f      	lsls	r7, r3, #16
 80013e0:	0c3f      	lsrs	r7, r7, #16
 80013e2:	003b      	movs	r3, r7
 80013e4:	4343      	muls	r3, r0
 80013e6:	4699      	mov	r9, r3
 80013e8:	4663      	mov	r3, ip
 80013ea:	4343      	muls	r3, r0
 80013ec:	469a      	mov	sl, r3
 80013ee:	464b      	mov	r3, r9
 80013f0:	4660      	mov	r0, ip
 80013f2:	0c1b      	lsrs	r3, r3, #16
 80013f4:	469b      	mov	fp, r3
 80013f6:	4348      	muls	r0, r1
 80013f8:	4379      	muls	r1, r7
 80013fa:	4451      	add	r1, sl
 80013fc:	4459      	add	r1, fp
 80013fe:	458a      	cmp	sl, r1
 8001400:	d903      	bls.n	800140a <__aeabi_dmul+0x252>
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	469a      	mov	sl, r3
 8001408:	4450      	add	r0, sl
 800140a:	0c0b      	lsrs	r3, r1, #16
 800140c:	469a      	mov	sl, r3
 800140e:	464b      	mov	r3, r9
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	4699      	mov	r9, r3
 8001416:	003b      	movs	r3, r7
 8001418:	4363      	muls	r3, r4
 800141a:	0409      	lsls	r1, r1, #16
 800141c:	4645      	mov	r5, r8
 800141e:	4449      	add	r1, r9
 8001420:	4699      	mov	r9, r3
 8001422:	4663      	mov	r3, ip
 8001424:	435c      	muls	r4, r3
 8001426:	436b      	muls	r3, r5
 8001428:	469c      	mov	ip, r3
 800142a:	464b      	mov	r3, r9
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	4698      	mov	r8, r3
 8001430:	436f      	muls	r7, r5
 8001432:	193f      	adds	r7, r7, r4
 8001434:	4447      	add	r7, r8
 8001436:	4450      	add	r0, sl
 8001438:	42bc      	cmp	r4, r7
 800143a:	d903      	bls.n	8001444 <__aeabi_dmul+0x28c>
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	4698      	mov	r8, r3
 8001442:	44c4      	add	ip, r8
 8001444:	9b04      	ldr	r3, [sp, #16]
 8001446:	9d00      	ldr	r5, [sp, #0]
 8001448:	4698      	mov	r8, r3
 800144a:	4445      	add	r5, r8
 800144c:	42b5      	cmp	r5, r6
 800144e:	41b6      	sbcs	r6, r6
 8001450:	4273      	negs	r3, r6
 8001452:	4698      	mov	r8, r3
 8001454:	464b      	mov	r3, r9
 8001456:	041e      	lsls	r6, r3, #16
 8001458:	9b05      	ldr	r3, [sp, #20]
 800145a:	043c      	lsls	r4, r7, #16
 800145c:	4699      	mov	r9, r3
 800145e:	0c36      	lsrs	r6, r6, #16
 8001460:	19a4      	adds	r4, r4, r6
 8001462:	444c      	add	r4, r9
 8001464:	46a1      	mov	r9, r4
 8001466:	4683      	mov	fp, r0
 8001468:	186e      	adds	r6, r5, r1
 800146a:	44c1      	add	r9, r8
 800146c:	428e      	cmp	r6, r1
 800146e:	4189      	sbcs	r1, r1
 8001470:	44cb      	add	fp, r9
 8001472:	465d      	mov	r5, fp
 8001474:	4249      	negs	r1, r1
 8001476:	186d      	adds	r5, r5, r1
 8001478:	429c      	cmp	r4, r3
 800147a:	41a4      	sbcs	r4, r4
 800147c:	45c1      	cmp	r9, r8
 800147e:	419b      	sbcs	r3, r3
 8001480:	4583      	cmp	fp, r0
 8001482:	4180      	sbcs	r0, r0
 8001484:	428d      	cmp	r5, r1
 8001486:	4189      	sbcs	r1, r1
 8001488:	425b      	negs	r3, r3
 800148a:	4264      	negs	r4, r4
 800148c:	431c      	orrs	r4, r3
 800148e:	4240      	negs	r0, r0
 8001490:	9b03      	ldr	r3, [sp, #12]
 8001492:	4249      	negs	r1, r1
 8001494:	4301      	orrs	r1, r0
 8001496:	0270      	lsls	r0, r6, #9
 8001498:	0c3f      	lsrs	r7, r7, #16
 800149a:	4318      	orrs	r0, r3
 800149c:	19e4      	adds	r4, r4, r7
 800149e:	1e47      	subs	r7, r0, #1
 80014a0:	41b8      	sbcs	r0, r7
 80014a2:	1864      	adds	r4, r4, r1
 80014a4:	4464      	add	r4, ip
 80014a6:	0df6      	lsrs	r6, r6, #23
 80014a8:	0261      	lsls	r1, r4, #9
 80014aa:	4330      	orrs	r0, r6
 80014ac:	0dec      	lsrs	r4, r5, #23
 80014ae:	026e      	lsls	r6, r5, #9
 80014b0:	430c      	orrs	r4, r1
 80014b2:	4330      	orrs	r0, r6
 80014b4:	01c9      	lsls	r1, r1, #7
 80014b6:	d400      	bmi.n	80014ba <__aeabi_dmul+0x302>
 80014b8:	e0f1      	b.n	800169e <__aeabi_dmul+0x4e6>
 80014ba:	2101      	movs	r1, #1
 80014bc:	0843      	lsrs	r3, r0, #1
 80014be:	4001      	ands	r1, r0
 80014c0:	430b      	orrs	r3, r1
 80014c2:	07e0      	lsls	r0, r4, #31
 80014c4:	4318      	orrs	r0, r3
 80014c6:	0864      	lsrs	r4, r4, #1
 80014c8:	4915      	ldr	r1, [pc, #84]	; (8001520 <__aeabi_dmul+0x368>)
 80014ca:	9b02      	ldr	r3, [sp, #8]
 80014cc:	468c      	mov	ip, r1
 80014ce:	4463      	add	r3, ip
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dc00      	bgt.n	80014d6 <__aeabi_dmul+0x31e>
 80014d4:	e097      	b.n	8001606 <__aeabi_dmul+0x44e>
 80014d6:	0741      	lsls	r1, r0, #29
 80014d8:	d009      	beq.n	80014ee <__aeabi_dmul+0x336>
 80014da:	210f      	movs	r1, #15
 80014dc:	4001      	ands	r1, r0
 80014de:	2904      	cmp	r1, #4
 80014e0:	d005      	beq.n	80014ee <__aeabi_dmul+0x336>
 80014e2:	1d01      	adds	r1, r0, #4
 80014e4:	4281      	cmp	r1, r0
 80014e6:	4180      	sbcs	r0, r0
 80014e8:	4240      	negs	r0, r0
 80014ea:	1824      	adds	r4, r4, r0
 80014ec:	0008      	movs	r0, r1
 80014ee:	01e1      	lsls	r1, r4, #7
 80014f0:	d506      	bpl.n	8001500 <__aeabi_dmul+0x348>
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	00c9      	lsls	r1, r1, #3
 80014f6:	468c      	mov	ip, r1
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <__aeabi_dmul+0x36c>)
 80014fa:	401c      	ands	r4, r3
 80014fc:	9b02      	ldr	r3, [sp, #8]
 80014fe:	4463      	add	r3, ip
 8001500:	4909      	ldr	r1, [pc, #36]	; (8001528 <__aeabi_dmul+0x370>)
 8001502:	428b      	cmp	r3, r1
 8001504:	dd00      	ble.n	8001508 <__aeabi_dmul+0x350>
 8001506:	e710      	b.n	800132a <__aeabi_dmul+0x172>
 8001508:	0761      	lsls	r1, r4, #29
 800150a:	08c5      	lsrs	r5, r0, #3
 800150c:	0264      	lsls	r4, r4, #9
 800150e:	055b      	lsls	r3, r3, #21
 8001510:	430d      	orrs	r5, r1
 8001512:	0b24      	lsrs	r4, r4, #12
 8001514:	0d5b      	lsrs	r3, r3, #21
 8001516:	e6c1      	b.n	800129c <__aeabi_dmul+0xe4>
 8001518:	000007ff 	.word	0x000007ff
 800151c:	fffffc01 	.word	0xfffffc01
 8001520:	000003ff 	.word	0x000003ff
 8001524:	feffffff 	.word	0xfeffffff
 8001528:	000007fe 	.word	0x000007fe
 800152c:	464b      	mov	r3, r9
 800152e:	4323      	orrs	r3, r4
 8001530:	d059      	beq.n	80015e6 <__aeabi_dmul+0x42e>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_dmul+0x380>
 8001536:	e0a3      	b.n	8001680 <__aeabi_dmul+0x4c8>
 8001538:	0020      	movs	r0, r4
 800153a:	f000 fd93 	bl	8002064 <__clzsi2>
 800153e:	0001      	movs	r1, r0
 8001540:	0003      	movs	r3, r0
 8001542:	390b      	subs	r1, #11
 8001544:	221d      	movs	r2, #29
 8001546:	1a52      	subs	r2, r2, r1
 8001548:	4649      	mov	r1, r9
 800154a:	0018      	movs	r0, r3
 800154c:	40d1      	lsrs	r1, r2
 800154e:	464a      	mov	r2, r9
 8001550:	3808      	subs	r0, #8
 8001552:	4082      	lsls	r2, r0
 8001554:	4084      	lsls	r4, r0
 8001556:	0010      	movs	r0, r2
 8001558:	430c      	orrs	r4, r1
 800155a:	4a74      	ldr	r2, [pc, #464]	; (800172c <__aeabi_dmul+0x574>)
 800155c:	1aeb      	subs	r3, r5, r3
 800155e:	4694      	mov	ip, r2
 8001560:	4642      	mov	r2, r8
 8001562:	4463      	add	r3, ip
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	407a      	eors	r2, r7
 800156a:	3301      	adds	r3, #1
 800156c:	2100      	movs	r1, #0
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	2e0a      	cmp	r6, #10
 8001574:	dd00      	ble.n	8001578 <__aeabi_dmul+0x3c0>
 8001576:	e667      	b.n	8001248 <__aeabi_dmul+0x90>
 8001578:	e683      	b.n	8001282 <__aeabi_dmul+0xca>
 800157a:	465b      	mov	r3, fp
 800157c:	4303      	orrs	r3, r0
 800157e:	469a      	mov	sl, r3
 8001580:	d02a      	beq.n	80015d8 <__aeabi_dmul+0x420>
 8001582:	465b      	mov	r3, fp
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06d      	beq.n	8001664 <__aeabi_dmul+0x4ac>
 8001588:	4658      	mov	r0, fp
 800158a:	f000 fd6b 	bl	8002064 <__clzsi2>
 800158e:	0001      	movs	r1, r0
 8001590:	0003      	movs	r3, r0
 8001592:	390b      	subs	r1, #11
 8001594:	221d      	movs	r2, #29
 8001596:	1a52      	subs	r2, r2, r1
 8001598:	0021      	movs	r1, r4
 800159a:	0018      	movs	r0, r3
 800159c:	465d      	mov	r5, fp
 800159e:	40d1      	lsrs	r1, r2
 80015a0:	3808      	subs	r0, #8
 80015a2:	4085      	lsls	r5, r0
 80015a4:	000a      	movs	r2, r1
 80015a6:	4084      	lsls	r4, r0
 80015a8:	432a      	orrs	r2, r5
 80015aa:	4693      	mov	fp, r2
 80015ac:	46a2      	mov	sl, r4
 80015ae:	4d5f      	ldr	r5, [pc, #380]	; (800172c <__aeabi_dmul+0x574>)
 80015b0:	2600      	movs	r6, #0
 80015b2:	1aed      	subs	r5, r5, r3
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	e625      	b.n	8001206 <__aeabi_dmul+0x4e>
 80015ba:	465b      	mov	r3, fp
 80015bc:	4303      	orrs	r3, r0
 80015be:	469a      	mov	sl, r3
 80015c0:	d105      	bne.n	80015ce <__aeabi_dmul+0x416>
 80015c2:	2300      	movs	r3, #0
 80015c4:	469b      	mov	fp, r3
 80015c6:	3302      	adds	r3, #2
 80015c8:	2608      	movs	r6, #8
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	e61b      	b.n	8001206 <__aeabi_dmul+0x4e>
 80015ce:	2303      	movs	r3, #3
 80015d0:	4682      	mov	sl, r0
 80015d2:	260c      	movs	r6, #12
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	e616      	b.n	8001206 <__aeabi_dmul+0x4e>
 80015d8:	2300      	movs	r3, #0
 80015da:	469b      	mov	fp, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	2604      	movs	r6, #4
 80015e0:	2500      	movs	r5, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	e60f      	b.n	8001206 <__aeabi_dmul+0x4e>
 80015e6:	4642      	mov	r2, r8
 80015e8:	3301      	adds	r3, #1
 80015ea:	9501      	str	r5, [sp, #4]
 80015ec:	431e      	orrs	r6, r3
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	407a      	eors	r2, r7
 80015f2:	3301      	adds	r3, #1
 80015f4:	2400      	movs	r4, #0
 80015f6:	2000      	movs	r0, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2e0a      	cmp	r6, #10
 8001600:	dd00      	ble.n	8001604 <__aeabi_dmul+0x44c>
 8001602:	e621      	b.n	8001248 <__aeabi_dmul+0x90>
 8001604:	e63d      	b.n	8001282 <__aeabi_dmul+0xca>
 8001606:	2101      	movs	r1, #1
 8001608:	1ac9      	subs	r1, r1, r3
 800160a:	2938      	cmp	r1, #56	; 0x38
 800160c:	dd00      	ble.n	8001610 <__aeabi_dmul+0x458>
 800160e:	e642      	b.n	8001296 <__aeabi_dmul+0xde>
 8001610:	291f      	cmp	r1, #31
 8001612:	dd47      	ble.n	80016a4 <__aeabi_dmul+0x4ec>
 8001614:	261f      	movs	r6, #31
 8001616:	0025      	movs	r5, r4
 8001618:	4276      	negs	r6, r6
 800161a:	1af3      	subs	r3, r6, r3
 800161c:	40dd      	lsrs	r5, r3
 800161e:	002b      	movs	r3, r5
 8001620:	2920      	cmp	r1, #32
 8001622:	d005      	beq.n	8001630 <__aeabi_dmul+0x478>
 8001624:	4942      	ldr	r1, [pc, #264]	; (8001730 <__aeabi_dmul+0x578>)
 8001626:	9d02      	ldr	r5, [sp, #8]
 8001628:	468c      	mov	ip, r1
 800162a:	4465      	add	r5, ip
 800162c:	40ac      	lsls	r4, r5
 800162e:	4320      	orrs	r0, r4
 8001630:	1e41      	subs	r1, r0, #1
 8001632:	4188      	sbcs	r0, r1
 8001634:	4318      	orrs	r0, r3
 8001636:	2307      	movs	r3, #7
 8001638:	001d      	movs	r5, r3
 800163a:	2400      	movs	r4, #0
 800163c:	4005      	ands	r5, r0
 800163e:	4203      	tst	r3, r0
 8001640:	d04a      	beq.n	80016d8 <__aeabi_dmul+0x520>
 8001642:	230f      	movs	r3, #15
 8001644:	2400      	movs	r4, #0
 8001646:	4003      	ands	r3, r0
 8001648:	2b04      	cmp	r3, #4
 800164a:	d042      	beq.n	80016d2 <__aeabi_dmul+0x51a>
 800164c:	1d03      	adds	r3, r0, #4
 800164e:	4283      	cmp	r3, r0
 8001650:	4180      	sbcs	r0, r0
 8001652:	4240      	negs	r0, r0
 8001654:	1824      	adds	r4, r4, r0
 8001656:	0018      	movs	r0, r3
 8001658:	0223      	lsls	r3, r4, #8
 800165a:	d53a      	bpl.n	80016d2 <__aeabi_dmul+0x51a>
 800165c:	2301      	movs	r3, #1
 800165e:	2400      	movs	r4, #0
 8001660:	2500      	movs	r5, #0
 8001662:	e61b      	b.n	800129c <__aeabi_dmul+0xe4>
 8001664:	f000 fcfe 	bl	8002064 <__clzsi2>
 8001668:	0001      	movs	r1, r0
 800166a:	0003      	movs	r3, r0
 800166c:	3115      	adds	r1, #21
 800166e:	3320      	adds	r3, #32
 8001670:	291c      	cmp	r1, #28
 8001672:	dd8f      	ble.n	8001594 <__aeabi_dmul+0x3dc>
 8001674:	3808      	subs	r0, #8
 8001676:	2200      	movs	r2, #0
 8001678:	4084      	lsls	r4, r0
 800167a:	4692      	mov	sl, r2
 800167c:	46a3      	mov	fp, r4
 800167e:	e796      	b.n	80015ae <__aeabi_dmul+0x3f6>
 8001680:	f000 fcf0 	bl	8002064 <__clzsi2>
 8001684:	0001      	movs	r1, r0
 8001686:	0003      	movs	r3, r0
 8001688:	3115      	adds	r1, #21
 800168a:	3320      	adds	r3, #32
 800168c:	291c      	cmp	r1, #28
 800168e:	dc00      	bgt.n	8001692 <__aeabi_dmul+0x4da>
 8001690:	e758      	b.n	8001544 <__aeabi_dmul+0x38c>
 8001692:	0002      	movs	r2, r0
 8001694:	464c      	mov	r4, r9
 8001696:	3a08      	subs	r2, #8
 8001698:	2000      	movs	r0, #0
 800169a:	4094      	lsls	r4, r2
 800169c:	e75d      	b.n	800155a <__aeabi_dmul+0x3a2>
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	e711      	b.n	80014c8 <__aeabi_dmul+0x310>
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <__aeabi_dmul+0x57c>)
 80016a6:	0026      	movs	r6, r4
 80016a8:	469c      	mov	ip, r3
 80016aa:	0003      	movs	r3, r0
 80016ac:	9d02      	ldr	r5, [sp, #8]
 80016ae:	40cb      	lsrs	r3, r1
 80016b0:	4465      	add	r5, ip
 80016b2:	40ae      	lsls	r6, r5
 80016b4:	431e      	orrs	r6, r3
 80016b6:	0003      	movs	r3, r0
 80016b8:	40ab      	lsls	r3, r5
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	4183      	sbcs	r3, r0
 80016be:	0030      	movs	r0, r6
 80016c0:	4318      	orrs	r0, r3
 80016c2:	40cc      	lsrs	r4, r1
 80016c4:	0743      	lsls	r3, r0, #29
 80016c6:	d0c7      	beq.n	8001658 <__aeabi_dmul+0x4a0>
 80016c8:	230f      	movs	r3, #15
 80016ca:	4003      	ands	r3, r0
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d1bd      	bne.n	800164c <__aeabi_dmul+0x494>
 80016d0:	e7c2      	b.n	8001658 <__aeabi_dmul+0x4a0>
 80016d2:	0765      	lsls	r5, r4, #29
 80016d4:	0264      	lsls	r4, r4, #9
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	2300      	movs	r3, #0
 80016dc:	4305      	orrs	r5, r0
 80016de:	e5dd      	b.n	800129c <__aeabi_dmul+0xe4>
 80016e0:	2500      	movs	r5, #0
 80016e2:	2302      	movs	r3, #2
 80016e4:	2e0f      	cmp	r6, #15
 80016e6:	d10c      	bne.n	8001702 <__aeabi_dmul+0x54a>
 80016e8:	2480      	movs	r4, #128	; 0x80
 80016ea:	465b      	mov	r3, fp
 80016ec:	0324      	lsls	r4, r4, #12
 80016ee:	4223      	tst	r3, r4
 80016f0:	d00e      	beq.n	8001710 <__aeabi_dmul+0x558>
 80016f2:	4221      	tst	r1, r4
 80016f4:	d10c      	bne.n	8001710 <__aeabi_dmul+0x558>
 80016f6:	430c      	orrs	r4, r1
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	003a      	movs	r2, r7
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <__aeabi_dmul+0x580>)
 80016fe:	0b24      	lsrs	r4, r4, #12
 8001700:	e5cc      	b.n	800129c <__aeabi_dmul+0xe4>
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d000      	beq.n	8001708 <__aeabi_dmul+0x550>
 8001706:	e5a2      	b.n	800124e <__aeabi_dmul+0x96>
 8001708:	468b      	mov	fp, r1
 800170a:	46aa      	mov	sl, r5
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	e5f7      	b.n	8001300 <__aeabi_dmul+0x148>
 8001710:	2480      	movs	r4, #128	; 0x80
 8001712:	465b      	mov	r3, fp
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	431c      	orrs	r4, r3
 8001718:	0324      	lsls	r4, r4, #12
 800171a:	4642      	mov	r2, r8
 800171c:	4655      	mov	r5, sl
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__aeabi_dmul+0x580>)
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	e5bb      	b.n	800129c <__aeabi_dmul+0xe4>
 8001724:	464d      	mov	r5, r9
 8001726:	0021      	movs	r1, r4
 8001728:	2303      	movs	r3, #3
 800172a:	e7db      	b.n	80016e4 <__aeabi_dmul+0x52c>
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	0000043e 	.word	0x0000043e
 8001734:	0000041e 	.word	0x0000041e
 8001738:	000007ff 	.word	0x000007ff

0800173c <__aeabi_dsub>:
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	4657      	mov	r7, sl
 8001740:	464e      	mov	r6, r9
 8001742:	4645      	mov	r5, r8
 8001744:	46de      	mov	lr, fp
 8001746:	b5e0      	push	{r5, r6, r7, lr}
 8001748:	000d      	movs	r5, r1
 800174a:	0004      	movs	r4, r0
 800174c:	0019      	movs	r1, r3
 800174e:	0010      	movs	r0, r2
 8001750:	032b      	lsls	r3, r5, #12
 8001752:	0a5b      	lsrs	r3, r3, #9
 8001754:	0f62      	lsrs	r2, r4, #29
 8001756:	431a      	orrs	r2, r3
 8001758:	00e3      	lsls	r3, r4, #3
 800175a:	030c      	lsls	r4, r1, #12
 800175c:	0a64      	lsrs	r4, r4, #9
 800175e:	0f47      	lsrs	r7, r0, #29
 8001760:	4327      	orrs	r7, r4
 8001762:	4cd0      	ldr	r4, [pc, #832]	; (8001aa4 <__aeabi_dsub+0x368>)
 8001764:	006e      	lsls	r6, r5, #1
 8001766:	4691      	mov	r9, r2
 8001768:	b083      	sub	sp, #12
 800176a:	004a      	lsls	r2, r1, #1
 800176c:	00c0      	lsls	r0, r0, #3
 800176e:	4698      	mov	r8, r3
 8001770:	46a2      	mov	sl, r4
 8001772:	0d76      	lsrs	r6, r6, #21
 8001774:	0fed      	lsrs	r5, r5, #31
 8001776:	0d52      	lsrs	r2, r2, #21
 8001778:	0fc9      	lsrs	r1, r1, #31
 800177a:	9001      	str	r0, [sp, #4]
 800177c:	42a2      	cmp	r2, r4
 800177e:	d100      	bne.n	8001782 <__aeabi_dsub+0x46>
 8001780:	e0b9      	b.n	80018f6 <__aeabi_dsub+0x1ba>
 8001782:	2401      	movs	r4, #1
 8001784:	4061      	eors	r1, r4
 8001786:	468b      	mov	fp, r1
 8001788:	428d      	cmp	r5, r1
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x52>
 800178c:	e08d      	b.n	80018aa <__aeabi_dsub+0x16e>
 800178e:	1ab4      	subs	r4, r6, r2
 8001790:	46a4      	mov	ip, r4
 8001792:	2c00      	cmp	r4, #0
 8001794:	dc00      	bgt.n	8001798 <__aeabi_dsub+0x5c>
 8001796:	e0b7      	b.n	8001908 <__aeabi_dsub+0x1cc>
 8001798:	2a00      	cmp	r2, #0
 800179a:	d100      	bne.n	800179e <__aeabi_dsub+0x62>
 800179c:	e0cb      	b.n	8001936 <__aeabi_dsub+0x1fa>
 800179e:	4ac1      	ldr	r2, [pc, #772]	; (8001aa4 <__aeabi_dsub+0x368>)
 80017a0:	4296      	cmp	r6, r2
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dsub+0x6a>
 80017a4:	e186      	b.n	8001ab4 <__aeabi_dsub+0x378>
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0412      	lsls	r2, r2, #16
 80017aa:	4317      	orrs	r7, r2
 80017ac:	4662      	mov	r2, ip
 80017ae:	2a38      	cmp	r2, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dsub+0x78>
 80017b2:	e1a4      	b.n	8001afe <__aeabi_dsub+0x3c2>
 80017b4:	2a1f      	cmp	r2, #31
 80017b6:	dd00      	ble.n	80017ba <__aeabi_dsub+0x7e>
 80017b8:	e21d      	b.n	8001bf6 <__aeabi_dsub+0x4ba>
 80017ba:	4661      	mov	r1, ip
 80017bc:	2220      	movs	r2, #32
 80017be:	003c      	movs	r4, r7
 80017c0:	1a52      	subs	r2, r2, r1
 80017c2:	0001      	movs	r1, r0
 80017c4:	4090      	lsls	r0, r2
 80017c6:	4094      	lsls	r4, r2
 80017c8:	1e42      	subs	r2, r0, #1
 80017ca:	4190      	sbcs	r0, r2
 80017cc:	4662      	mov	r2, ip
 80017ce:	46a0      	mov	r8, r4
 80017d0:	4664      	mov	r4, ip
 80017d2:	40d7      	lsrs	r7, r2
 80017d4:	464a      	mov	r2, r9
 80017d6:	40e1      	lsrs	r1, r4
 80017d8:	4644      	mov	r4, r8
 80017da:	1bd2      	subs	r2, r2, r7
 80017dc:	4691      	mov	r9, r2
 80017de:	430c      	orrs	r4, r1
 80017e0:	4304      	orrs	r4, r0
 80017e2:	1b1c      	subs	r4, r3, r4
 80017e4:	42a3      	cmp	r3, r4
 80017e6:	4192      	sbcs	r2, r2
 80017e8:	464b      	mov	r3, r9
 80017ea:	4252      	negs	r2, r2
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	469a      	mov	sl, r3
 80017f0:	4653      	mov	r3, sl
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	d400      	bmi.n	80017f8 <__aeabi_dsub+0xbc>
 80017f6:	e12b      	b.n	8001a50 <__aeabi_dsub+0x314>
 80017f8:	4653      	mov	r3, sl
 80017fa:	025a      	lsls	r2, r3, #9
 80017fc:	0a53      	lsrs	r3, r2, #9
 80017fe:	469a      	mov	sl, r3
 8001800:	4653      	mov	r3, sl
 8001802:	2b00      	cmp	r3, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dsub+0xcc>
 8001806:	e166      	b.n	8001ad6 <__aeabi_dsub+0x39a>
 8001808:	4650      	mov	r0, sl
 800180a:	f000 fc2b 	bl	8002064 <__clzsi2>
 800180e:	0003      	movs	r3, r0
 8001810:	3b08      	subs	r3, #8
 8001812:	2220      	movs	r2, #32
 8001814:	0020      	movs	r0, r4
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	4651      	mov	r1, sl
 800181a:	40d0      	lsrs	r0, r2
 800181c:	4099      	lsls	r1, r3
 800181e:	0002      	movs	r2, r0
 8001820:	409c      	lsls	r4, r3
 8001822:	430a      	orrs	r2, r1
 8001824:	429e      	cmp	r6, r3
 8001826:	dd00      	ble.n	800182a <__aeabi_dsub+0xee>
 8001828:	e164      	b.n	8001af4 <__aeabi_dsub+0x3b8>
 800182a:	1b9b      	subs	r3, r3, r6
 800182c:	1c59      	adds	r1, r3, #1
 800182e:	291f      	cmp	r1, #31
 8001830:	dd00      	ble.n	8001834 <__aeabi_dsub+0xf8>
 8001832:	e0fe      	b.n	8001a32 <__aeabi_dsub+0x2f6>
 8001834:	2320      	movs	r3, #32
 8001836:	0010      	movs	r0, r2
 8001838:	0026      	movs	r6, r4
 800183a:	1a5b      	subs	r3, r3, r1
 800183c:	409c      	lsls	r4, r3
 800183e:	4098      	lsls	r0, r3
 8001840:	40ce      	lsrs	r6, r1
 8001842:	40ca      	lsrs	r2, r1
 8001844:	1e63      	subs	r3, r4, #1
 8001846:	419c      	sbcs	r4, r3
 8001848:	4330      	orrs	r0, r6
 800184a:	4692      	mov	sl, r2
 800184c:	2600      	movs	r6, #0
 800184e:	4304      	orrs	r4, r0
 8001850:	0763      	lsls	r3, r4, #29
 8001852:	d009      	beq.n	8001868 <__aeabi_dsub+0x12c>
 8001854:	230f      	movs	r3, #15
 8001856:	4023      	ands	r3, r4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <__aeabi_dsub+0x12c>
 800185c:	1d23      	adds	r3, r4, #4
 800185e:	42a3      	cmp	r3, r4
 8001860:	41a4      	sbcs	r4, r4
 8001862:	4264      	negs	r4, r4
 8001864:	44a2      	add	sl, r4
 8001866:	001c      	movs	r4, r3
 8001868:	4653      	mov	r3, sl
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	d400      	bmi.n	8001870 <__aeabi_dsub+0x134>
 800186e:	e0f2      	b.n	8001a56 <__aeabi_dsub+0x31a>
 8001870:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <__aeabi_dsub+0x368>)
 8001872:	3601      	adds	r6, #1
 8001874:	429e      	cmp	r6, r3
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0x13e>
 8001878:	e10f      	b.n	8001a9a <__aeabi_dsub+0x35e>
 800187a:	4653      	mov	r3, sl
 800187c:	498a      	ldr	r1, [pc, #552]	; (8001aa8 <__aeabi_dsub+0x36c>)
 800187e:	08e4      	lsrs	r4, r4, #3
 8001880:	400b      	ands	r3, r1
 8001882:	0019      	movs	r1, r3
 8001884:	075b      	lsls	r3, r3, #29
 8001886:	4323      	orrs	r3, r4
 8001888:	0572      	lsls	r2, r6, #21
 800188a:	024c      	lsls	r4, r1, #9
 800188c:	0b24      	lsrs	r4, r4, #12
 800188e:	0d52      	lsrs	r2, r2, #21
 8001890:	0512      	lsls	r2, r2, #20
 8001892:	4322      	orrs	r2, r4
 8001894:	07ed      	lsls	r5, r5, #31
 8001896:	432a      	orrs	r2, r5
 8001898:	0018      	movs	r0, r3
 800189a:	0011      	movs	r1, r2
 800189c:	b003      	add	sp, #12
 800189e:	bcf0      	pop	{r4, r5, r6, r7}
 80018a0:	46bb      	mov	fp, r7
 80018a2:	46b2      	mov	sl, r6
 80018a4:	46a9      	mov	r9, r5
 80018a6:	46a0      	mov	r8, r4
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	1ab4      	subs	r4, r6, r2
 80018ac:	46a4      	mov	ip, r4
 80018ae:	2c00      	cmp	r4, #0
 80018b0:	dd59      	ble.n	8001966 <__aeabi_dsub+0x22a>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x17c>
 80018b6:	e0b0      	b.n	8001a1a <__aeabi_dsub+0x2de>
 80018b8:	4556      	cmp	r6, sl
 80018ba:	d100      	bne.n	80018be <__aeabi_dsub+0x182>
 80018bc:	e0fa      	b.n	8001ab4 <__aeabi_dsub+0x378>
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0412      	lsls	r2, r2, #16
 80018c2:	4317      	orrs	r7, r2
 80018c4:	4662      	mov	r2, ip
 80018c6:	2a38      	cmp	r2, #56	; 0x38
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dsub+0x190>
 80018ca:	e0d4      	b.n	8001a76 <__aeabi_dsub+0x33a>
 80018cc:	2a1f      	cmp	r2, #31
 80018ce:	dc00      	bgt.n	80018d2 <__aeabi_dsub+0x196>
 80018d0:	e1c0      	b.n	8001c54 <__aeabi_dsub+0x518>
 80018d2:	0039      	movs	r1, r7
 80018d4:	3a20      	subs	r2, #32
 80018d6:	40d1      	lsrs	r1, r2
 80018d8:	4662      	mov	r2, ip
 80018da:	2a20      	cmp	r2, #32
 80018dc:	d006      	beq.n	80018ec <__aeabi_dsub+0x1b0>
 80018de:	4664      	mov	r4, ip
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	1b12      	subs	r2, r2, r4
 80018e4:	003c      	movs	r4, r7
 80018e6:	4094      	lsls	r4, r2
 80018e8:	4304      	orrs	r4, r0
 80018ea:	9401      	str	r4, [sp, #4]
 80018ec:	9c01      	ldr	r4, [sp, #4]
 80018ee:	1e62      	subs	r2, r4, #1
 80018f0:	4194      	sbcs	r4, r2
 80018f2:	430c      	orrs	r4, r1
 80018f4:	e0c3      	b.n	8001a7e <__aeabi_dsub+0x342>
 80018f6:	003c      	movs	r4, r7
 80018f8:	4304      	orrs	r4, r0
 80018fa:	d02b      	beq.n	8001954 <__aeabi_dsub+0x218>
 80018fc:	468b      	mov	fp, r1
 80018fe:	428d      	cmp	r5, r1
 8001900:	d02e      	beq.n	8001960 <__aeabi_dsub+0x224>
 8001902:	4c6a      	ldr	r4, [pc, #424]	; (8001aac <__aeabi_dsub+0x370>)
 8001904:	46a4      	mov	ip, r4
 8001906:	44b4      	add	ip, r6
 8001908:	4664      	mov	r4, ip
 800190a:	2c00      	cmp	r4, #0
 800190c:	d05f      	beq.n	80019ce <__aeabi_dsub+0x292>
 800190e:	1b94      	subs	r4, r2, r6
 8001910:	46a4      	mov	ip, r4
 8001912:	2e00      	cmp	r6, #0
 8001914:	d000      	beq.n	8001918 <__aeabi_dsub+0x1dc>
 8001916:	e120      	b.n	8001b5a <__aeabi_dsub+0x41e>
 8001918:	464c      	mov	r4, r9
 800191a:	431c      	orrs	r4, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x1e4>
 800191e:	e1c7      	b.n	8001cb0 <__aeabi_dsub+0x574>
 8001920:	4661      	mov	r1, ip
 8001922:	1e4c      	subs	r4, r1, #1
 8001924:	2901      	cmp	r1, #1
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x1ee>
 8001928:	e223      	b.n	8001d72 <__aeabi_dsub+0x636>
 800192a:	4d5e      	ldr	r5, [pc, #376]	; (8001aa4 <__aeabi_dsub+0x368>)
 800192c:	45ac      	cmp	ip, r5
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x1f6>
 8001930:	e1d8      	b.n	8001ce4 <__aeabi_dsub+0x5a8>
 8001932:	46a4      	mov	ip, r4
 8001934:	e11a      	b.n	8001b6c <__aeabi_dsub+0x430>
 8001936:	003a      	movs	r2, r7
 8001938:	4302      	orrs	r2, r0
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x202>
 800193c:	e0e4      	b.n	8001b08 <__aeabi_dsub+0x3cc>
 800193e:	0022      	movs	r2, r4
 8001940:	3a01      	subs	r2, #1
 8001942:	2c01      	cmp	r4, #1
 8001944:	d100      	bne.n	8001948 <__aeabi_dsub+0x20c>
 8001946:	e1c3      	b.n	8001cd0 <__aeabi_dsub+0x594>
 8001948:	4956      	ldr	r1, [pc, #344]	; (8001aa4 <__aeabi_dsub+0x368>)
 800194a:	428c      	cmp	r4, r1
 800194c:	d100      	bne.n	8001950 <__aeabi_dsub+0x214>
 800194e:	e0b1      	b.n	8001ab4 <__aeabi_dsub+0x378>
 8001950:	4694      	mov	ip, r2
 8001952:	e72b      	b.n	80017ac <__aeabi_dsub+0x70>
 8001954:	2401      	movs	r4, #1
 8001956:	4061      	eors	r1, r4
 8001958:	468b      	mov	fp, r1
 800195a:	428d      	cmp	r5, r1
 800195c:	d000      	beq.n	8001960 <__aeabi_dsub+0x224>
 800195e:	e716      	b.n	800178e <__aeabi_dsub+0x52>
 8001960:	4952      	ldr	r1, [pc, #328]	; (8001aac <__aeabi_dsub+0x370>)
 8001962:	468c      	mov	ip, r1
 8001964:	44b4      	add	ip, r6
 8001966:	4664      	mov	r4, ip
 8001968:	2c00      	cmp	r4, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x232>
 800196c:	e0d3      	b.n	8001b16 <__aeabi_dsub+0x3da>
 800196e:	1b91      	subs	r1, r2, r6
 8001970:	468c      	mov	ip, r1
 8001972:	2e00      	cmp	r6, #0
 8001974:	d100      	bne.n	8001978 <__aeabi_dsub+0x23c>
 8001976:	e15e      	b.n	8001c36 <__aeabi_dsub+0x4fa>
 8001978:	494a      	ldr	r1, [pc, #296]	; (8001aa4 <__aeabi_dsub+0x368>)
 800197a:	428a      	cmp	r2, r1
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x244>
 800197e:	e1be      	b.n	8001cfe <__aeabi_dsub+0x5c2>
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	464c      	mov	r4, r9
 8001984:	0409      	lsls	r1, r1, #16
 8001986:	430c      	orrs	r4, r1
 8001988:	46a1      	mov	r9, r4
 800198a:	4661      	mov	r1, ip
 800198c:	2938      	cmp	r1, #56	; 0x38
 800198e:	dd00      	ble.n	8001992 <__aeabi_dsub+0x256>
 8001990:	e1ba      	b.n	8001d08 <__aeabi_dsub+0x5cc>
 8001992:	291f      	cmp	r1, #31
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x25c>
 8001996:	e227      	b.n	8001de8 <__aeabi_dsub+0x6ac>
 8001998:	2420      	movs	r4, #32
 800199a:	1a64      	subs	r4, r4, r1
 800199c:	4649      	mov	r1, r9
 800199e:	40a1      	lsls	r1, r4
 80019a0:	001e      	movs	r6, r3
 80019a2:	4688      	mov	r8, r1
 80019a4:	4661      	mov	r1, ip
 80019a6:	40a3      	lsls	r3, r4
 80019a8:	40ce      	lsrs	r6, r1
 80019aa:	4641      	mov	r1, r8
 80019ac:	1e5c      	subs	r4, r3, #1
 80019ae:	41a3      	sbcs	r3, r4
 80019b0:	4331      	orrs	r1, r6
 80019b2:	4319      	orrs	r1, r3
 80019b4:	000c      	movs	r4, r1
 80019b6:	4663      	mov	r3, ip
 80019b8:	4649      	mov	r1, r9
 80019ba:	40d9      	lsrs	r1, r3
 80019bc:	187f      	adds	r7, r7, r1
 80019be:	1824      	adds	r4, r4, r0
 80019c0:	4284      	cmp	r4, r0
 80019c2:	419b      	sbcs	r3, r3
 80019c4:	425b      	negs	r3, r3
 80019c6:	469a      	mov	sl, r3
 80019c8:	0016      	movs	r6, r2
 80019ca:	44ba      	add	sl, r7
 80019cc:	e05d      	b.n	8001a8a <__aeabi_dsub+0x34e>
 80019ce:	4c38      	ldr	r4, [pc, #224]	; (8001ab0 <__aeabi_dsub+0x374>)
 80019d0:	1c72      	adds	r2, r6, #1
 80019d2:	4222      	tst	r2, r4
 80019d4:	d000      	beq.n	80019d8 <__aeabi_dsub+0x29c>
 80019d6:	e0df      	b.n	8001b98 <__aeabi_dsub+0x45c>
 80019d8:	464a      	mov	r2, r9
 80019da:	431a      	orrs	r2, r3
 80019dc:	2e00      	cmp	r6, #0
 80019de:	d000      	beq.n	80019e2 <__aeabi_dsub+0x2a6>
 80019e0:	e15c      	b.n	8001c9c <__aeabi_dsub+0x560>
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x2ac>
 80019e6:	e1cf      	b.n	8001d88 <__aeabi_dsub+0x64c>
 80019e8:	003a      	movs	r2, r7
 80019ea:	4302      	orrs	r2, r0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x2b4>
 80019ee:	e17f      	b.n	8001cf0 <__aeabi_dsub+0x5b4>
 80019f0:	1a1c      	subs	r4, r3, r0
 80019f2:	464a      	mov	r2, r9
 80019f4:	42a3      	cmp	r3, r4
 80019f6:	4189      	sbcs	r1, r1
 80019f8:	1bd2      	subs	r2, r2, r7
 80019fa:	4249      	negs	r1, r1
 80019fc:	1a52      	subs	r2, r2, r1
 80019fe:	4692      	mov	sl, r2
 8001a00:	0212      	lsls	r2, r2, #8
 8001a02:	d400      	bmi.n	8001a06 <__aeabi_dsub+0x2ca>
 8001a04:	e20a      	b.n	8001e1c <__aeabi_dsub+0x6e0>
 8001a06:	1ac4      	subs	r4, r0, r3
 8001a08:	42a0      	cmp	r0, r4
 8001a0a:	4180      	sbcs	r0, r0
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	4240      	negs	r0, r0
 8001a10:	1aff      	subs	r7, r7, r3
 8001a12:	1a3b      	subs	r3, r7, r0
 8001a14:	469a      	mov	sl, r3
 8001a16:	465d      	mov	r5, fp
 8001a18:	e71a      	b.n	8001850 <__aeabi_dsub+0x114>
 8001a1a:	003a      	movs	r2, r7
 8001a1c:	4302      	orrs	r2, r0
 8001a1e:	d073      	beq.n	8001b08 <__aeabi_dsub+0x3cc>
 8001a20:	0022      	movs	r2, r4
 8001a22:	3a01      	subs	r2, #1
 8001a24:	2c01      	cmp	r4, #1
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x2ee>
 8001a28:	e0cb      	b.n	8001bc2 <__aeabi_dsub+0x486>
 8001a2a:	4554      	cmp	r4, sl
 8001a2c:	d042      	beq.n	8001ab4 <__aeabi_dsub+0x378>
 8001a2e:	4694      	mov	ip, r2
 8001a30:	e748      	b.n	80018c4 <__aeabi_dsub+0x188>
 8001a32:	0010      	movs	r0, r2
 8001a34:	3b1f      	subs	r3, #31
 8001a36:	40d8      	lsrs	r0, r3
 8001a38:	2920      	cmp	r1, #32
 8001a3a:	d003      	beq.n	8001a44 <__aeabi_dsub+0x308>
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	1a5b      	subs	r3, r3, r1
 8001a40:	409a      	lsls	r2, r3
 8001a42:	4314      	orrs	r4, r2
 8001a44:	1e63      	subs	r3, r4, #1
 8001a46:	419c      	sbcs	r4, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	4304      	orrs	r4, r0
 8001a50:	0763      	lsls	r3, r4, #29
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x31a>
 8001a54:	e6fe      	b.n	8001854 <__aeabi_dsub+0x118>
 8001a56:	4652      	mov	r2, sl
 8001a58:	08e3      	lsrs	r3, r4, #3
 8001a5a:	0752      	lsls	r2, r2, #29
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	4652      	mov	r2, sl
 8001a60:	46b4      	mov	ip, r6
 8001a62:	08d2      	lsrs	r2, r2, #3
 8001a64:	490f      	ldr	r1, [pc, #60]	; (8001aa4 <__aeabi_dsub+0x368>)
 8001a66:	458c      	cmp	ip, r1
 8001a68:	d02a      	beq.n	8001ac0 <__aeabi_dsub+0x384>
 8001a6a:	0312      	lsls	r2, r2, #12
 8001a6c:	0b14      	lsrs	r4, r2, #12
 8001a6e:	4662      	mov	r2, ip
 8001a70:	0552      	lsls	r2, r2, #21
 8001a72:	0d52      	lsrs	r2, r2, #21
 8001a74:	e70c      	b.n	8001890 <__aeabi_dsub+0x154>
 8001a76:	003c      	movs	r4, r7
 8001a78:	4304      	orrs	r4, r0
 8001a7a:	1e62      	subs	r2, r4, #1
 8001a7c:	4194      	sbcs	r4, r2
 8001a7e:	18e4      	adds	r4, r4, r3
 8001a80:	429c      	cmp	r4, r3
 8001a82:	4192      	sbcs	r2, r2
 8001a84:	4252      	negs	r2, r2
 8001a86:	444a      	add	r2, r9
 8001a88:	4692      	mov	sl, r2
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	d5df      	bpl.n	8001a50 <__aeabi_dsub+0x314>
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__aeabi_dsub+0x368>)
 8001a92:	3601      	adds	r6, #1
 8001a94:	429e      	cmp	r6, r3
 8001a96:	d000      	beq.n	8001a9a <__aeabi_dsub+0x35e>
 8001a98:	e0a0      	b.n	8001bdc <__aeabi_dsub+0x4a0>
 8001a9a:	0032      	movs	r2, r6
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e6f6      	b.n	8001890 <__aeabi_dsub+0x154>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	ff7fffff 	.word	0xff7fffff
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	000007fe 	.word	0x000007fe
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	0752      	lsls	r2, r2, #29
 8001aba:	4313      	orrs	r3, r2
 8001abc:	464a      	mov	r2, r9
 8001abe:	08d2      	lsrs	r2, r2, #3
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	4311      	orrs	r1, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x38c>
 8001ac6:	e1b5      	b.n	8001e34 <__aeabi_dsub+0x6f8>
 8001ac8:	2480      	movs	r4, #128	; 0x80
 8001aca:	0324      	lsls	r4, r4, #12
 8001acc:	4314      	orrs	r4, r2
 8001ace:	0324      	lsls	r4, r4, #12
 8001ad0:	4ad5      	ldr	r2, [pc, #852]	; (8001e28 <__aeabi_dsub+0x6ec>)
 8001ad2:	0b24      	lsrs	r4, r4, #12
 8001ad4:	e6dc      	b.n	8001890 <__aeabi_dsub+0x154>
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f000 fac4 	bl	8002064 <__clzsi2>
 8001adc:	0003      	movs	r3, r0
 8001ade:	3318      	adds	r3, #24
 8001ae0:	2b1f      	cmp	r3, #31
 8001ae2:	dc00      	bgt.n	8001ae6 <__aeabi_dsub+0x3aa>
 8001ae4:	e695      	b.n	8001812 <__aeabi_dsub+0xd6>
 8001ae6:	0022      	movs	r2, r4
 8001ae8:	3808      	subs	r0, #8
 8001aea:	4082      	lsls	r2, r0
 8001aec:	2400      	movs	r4, #0
 8001aee:	429e      	cmp	r6, r3
 8001af0:	dc00      	bgt.n	8001af4 <__aeabi_dsub+0x3b8>
 8001af2:	e69a      	b.n	800182a <__aeabi_dsub+0xee>
 8001af4:	1af6      	subs	r6, r6, r3
 8001af6:	4bcd      	ldr	r3, [pc, #820]	; (8001e2c <__aeabi_dsub+0x6f0>)
 8001af8:	401a      	ands	r2, r3
 8001afa:	4692      	mov	sl, r2
 8001afc:	e6a8      	b.n	8001850 <__aeabi_dsub+0x114>
 8001afe:	003c      	movs	r4, r7
 8001b00:	4304      	orrs	r4, r0
 8001b02:	1e62      	subs	r2, r4, #1
 8001b04:	4194      	sbcs	r4, r2
 8001b06:	e66c      	b.n	80017e2 <__aeabi_dsub+0xa6>
 8001b08:	464a      	mov	r2, r9
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	0752      	lsls	r2, r2, #29
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	464a      	mov	r2, r9
 8001b12:	08d2      	lsrs	r2, r2, #3
 8001b14:	e7a6      	b.n	8001a64 <__aeabi_dsub+0x328>
 8001b16:	4cc6      	ldr	r4, [pc, #792]	; (8001e30 <__aeabi_dsub+0x6f4>)
 8001b18:	1c72      	adds	r2, r6, #1
 8001b1a:	4222      	tst	r2, r4
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_dsub+0x3e4>
 8001b1e:	e0ac      	b.n	8001c7a <__aeabi_dsub+0x53e>
 8001b20:	464a      	mov	r2, r9
 8001b22:	431a      	orrs	r2, r3
 8001b24:	2e00      	cmp	r6, #0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x3ee>
 8001b28:	e105      	b.n	8001d36 <__aeabi_dsub+0x5fa>
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x3f4>
 8001b2e:	e156      	b.n	8001dde <__aeabi_dsub+0x6a2>
 8001b30:	003a      	movs	r2, r7
 8001b32:	4302      	orrs	r2, r0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x3fc>
 8001b36:	e0db      	b.n	8001cf0 <__aeabi_dsub+0x5b4>
 8001b38:	181c      	adds	r4, r3, r0
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	419b      	sbcs	r3, r3
 8001b3e:	444f      	add	r7, r9
 8001b40:	46ba      	mov	sl, r7
 8001b42:	425b      	negs	r3, r3
 8001b44:	449a      	add	sl, r3
 8001b46:	4653      	mov	r3, sl
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	d400      	bmi.n	8001b4e <__aeabi_dsub+0x412>
 8001b4c:	e780      	b.n	8001a50 <__aeabi_dsub+0x314>
 8001b4e:	4652      	mov	r2, sl
 8001b50:	4bb6      	ldr	r3, [pc, #728]	; (8001e2c <__aeabi_dsub+0x6f0>)
 8001b52:	2601      	movs	r6, #1
 8001b54:	401a      	ands	r2, r3
 8001b56:	4692      	mov	sl, r2
 8001b58:	e77a      	b.n	8001a50 <__aeabi_dsub+0x314>
 8001b5a:	4cb3      	ldr	r4, [pc, #716]	; (8001e28 <__aeabi_dsub+0x6ec>)
 8001b5c:	42a2      	cmp	r2, r4
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x426>
 8001b60:	e0c0      	b.n	8001ce4 <__aeabi_dsub+0x5a8>
 8001b62:	2480      	movs	r4, #128	; 0x80
 8001b64:	464d      	mov	r5, r9
 8001b66:	0424      	lsls	r4, r4, #16
 8001b68:	4325      	orrs	r5, r4
 8001b6a:	46a9      	mov	r9, r5
 8001b6c:	4664      	mov	r4, ip
 8001b6e:	2c38      	cmp	r4, #56	; 0x38
 8001b70:	dc53      	bgt.n	8001c1a <__aeabi_dsub+0x4de>
 8001b72:	4661      	mov	r1, ip
 8001b74:	2c1f      	cmp	r4, #31
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dsub+0x43e>
 8001b78:	e0cd      	b.n	8001d16 <__aeabi_dsub+0x5da>
 8001b7a:	2520      	movs	r5, #32
 8001b7c:	001e      	movs	r6, r3
 8001b7e:	1b2d      	subs	r5, r5, r4
 8001b80:	464c      	mov	r4, r9
 8001b82:	40ab      	lsls	r3, r5
 8001b84:	40ac      	lsls	r4, r5
 8001b86:	40ce      	lsrs	r6, r1
 8001b88:	1e5d      	subs	r5, r3, #1
 8001b8a:	41ab      	sbcs	r3, r5
 8001b8c:	4334      	orrs	r4, r6
 8001b8e:	4323      	orrs	r3, r4
 8001b90:	464c      	mov	r4, r9
 8001b92:	40cc      	lsrs	r4, r1
 8001b94:	1b3f      	subs	r7, r7, r4
 8001b96:	e045      	b.n	8001c24 <__aeabi_dsub+0x4e8>
 8001b98:	464a      	mov	r2, r9
 8001b9a:	1a1c      	subs	r4, r3, r0
 8001b9c:	1bd1      	subs	r1, r2, r7
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	4192      	sbcs	r2, r2
 8001ba2:	4252      	negs	r2, r2
 8001ba4:	4692      	mov	sl, r2
 8001ba6:	000a      	movs	r2, r1
 8001ba8:	4651      	mov	r1, sl
 8001baa:	1a52      	subs	r2, r2, r1
 8001bac:	4692      	mov	sl, r2
 8001bae:	0212      	lsls	r2, r2, #8
 8001bb0:	d500      	bpl.n	8001bb4 <__aeabi_dsub+0x478>
 8001bb2:	e083      	b.n	8001cbc <__aeabi_dsub+0x580>
 8001bb4:	4653      	mov	r3, sl
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dsub+0x480>
 8001bba:	e621      	b.n	8001800 <__aeabi_dsub+0xc4>
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	e753      	b.n	8001a6a <__aeabi_dsub+0x32e>
 8001bc2:	181c      	adds	r4, r3, r0
 8001bc4:	429c      	cmp	r4, r3
 8001bc6:	419b      	sbcs	r3, r3
 8001bc8:	444f      	add	r7, r9
 8001bca:	46ba      	mov	sl, r7
 8001bcc:	425b      	negs	r3, r3
 8001bce:	449a      	add	sl, r3
 8001bd0:	4653      	mov	r3, sl
 8001bd2:	2601      	movs	r6, #1
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	d400      	bmi.n	8001bda <__aeabi_dsub+0x49e>
 8001bd8:	e73a      	b.n	8001a50 <__aeabi_dsub+0x314>
 8001bda:	2602      	movs	r6, #2
 8001bdc:	4652      	mov	r2, sl
 8001bde:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <__aeabi_dsub+0x6f0>)
 8001be0:	2101      	movs	r1, #1
 8001be2:	401a      	ands	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	4021      	ands	r1, r4
 8001be8:	0862      	lsrs	r2, r4, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	07dc      	lsls	r4, r3, #31
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	4314      	orrs	r4, r2
 8001bf4:	e62c      	b.n	8001850 <__aeabi_dsub+0x114>
 8001bf6:	0039      	movs	r1, r7
 8001bf8:	3a20      	subs	r2, #32
 8001bfa:	40d1      	lsrs	r1, r2
 8001bfc:	4662      	mov	r2, ip
 8001bfe:	2a20      	cmp	r2, #32
 8001c00:	d006      	beq.n	8001c10 <__aeabi_dsub+0x4d4>
 8001c02:	4664      	mov	r4, ip
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	1b12      	subs	r2, r2, r4
 8001c08:	003c      	movs	r4, r7
 8001c0a:	4094      	lsls	r4, r2
 8001c0c:	4304      	orrs	r4, r0
 8001c0e:	9401      	str	r4, [sp, #4]
 8001c10:	9c01      	ldr	r4, [sp, #4]
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	430c      	orrs	r4, r1
 8001c18:	e5e3      	b.n	80017e2 <__aeabi_dsub+0xa6>
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	000b      	movs	r3, r1
 8001c20:	1e5c      	subs	r4, r3, #1
 8001c22:	41a3      	sbcs	r3, r4
 8001c24:	1ac4      	subs	r4, r0, r3
 8001c26:	42a0      	cmp	r0, r4
 8001c28:	419b      	sbcs	r3, r3
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	1afb      	subs	r3, r7, r3
 8001c2e:	469a      	mov	sl, r3
 8001c30:	465d      	mov	r5, fp
 8001c32:	0016      	movs	r6, r2
 8001c34:	e5dc      	b.n	80017f0 <__aeabi_dsub+0xb4>
 8001c36:	4649      	mov	r1, r9
 8001c38:	4319      	orrs	r1, r3
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dsub+0x502>
 8001c3c:	e0ae      	b.n	8001d9c <__aeabi_dsub+0x660>
 8001c3e:	4661      	mov	r1, ip
 8001c40:	4664      	mov	r4, ip
 8001c42:	3901      	subs	r1, #1
 8001c44:	2c01      	cmp	r4, #1
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dsub+0x50e>
 8001c48:	e0e0      	b.n	8001e0c <__aeabi_dsub+0x6d0>
 8001c4a:	4c77      	ldr	r4, [pc, #476]	; (8001e28 <__aeabi_dsub+0x6ec>)
 8001c4c:	45a4      	cmp	ip, r4
 8001c4e:	d056      	beq.n	8001cfe <__aeabi_dsub+0x5c2>
 8001c50:	468c      	mov	ip, r1
 8001c52:	e69a      	b.n	800198a <__aeabi_dsub+0x24e>
 8001c54:	4661      	mov	r1, ip
 8001c56:	2220      	movs	r2, #32
 8001c58:	003c      	movs	r4, r7
 8001c5a:	1a52      	subs	r2, r2, r1
 8001c5c:	4094      	lsls	r4, r2
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4090      	lsls	r0, r2
 8001c62:	46a0      	mov	r8, r4
 8001c64:	4664      	mov	r4, ip
 8001c66:	1e42      	subs	r2, r0, #1
 8001c68:	4190      	sbcs	r0, r2
 8001c6a:	4662      	mov	r2, ip
 8001c6c:	40e1      	lsrs	r1, r4
 8001c6e:	4644      	mov	r4, r8
 8001c70:	40d7      	lsrs	r7, r2
 8001c72:	430c      	orrs	r4, r1
 8001c74:	4304      	orrs	r4, r0
 8001c76:	44b9      	add	r9, r7
 8001c78:	e701      	b.n	8001a7e <__aeabi_dsub+0x342>
 8001c7a:	496b      	ldr	r1, [pc, #428]	; (8001e28 <__aeabi_dsub+0x6ec>)
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x546>
 8001c80:	e70c      	b.n	8001a9c <__aeabi_dsub+0x360>
 8001c82:	1818      	adds	r0, r3, r0
 8001c84:	4298      	cmp	r0, r3
 8001c86:	419b      	sbcs	r3, r3
 8001c88:	444f      	add	r7, r9
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	07dc      	lsls	r4, r3, #31
 8001c90:	0840      	lsrs	r0, r0, #1
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	469a      	mov	sl, r3
 8001c96:	0016      	movs	r6, r2
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	e6d9      	b.n	8001a50 <__aeabi_dsub+0x314>
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	d000      	beq.n	8001ca2 <__aeabi_dsub+0x566>
 8001ca0:	e081      	b.n	8001da6 <__aeabi_dsub+0x66a>
 8001ca2:	003b      	movs	r3, r7
 8001ca4:	4303      	orrs	r3, r0
 8001ca6:	d11d      	bne.n	8001ce4 <__aeabi_dsub+0x5a8>
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	2500      	movs	r5, #0
 8001cac:	0312      	lsls	r2, r2, #12
 8001cae:	e70b      	b.n	8001ac8 <__aeabi_dsub+0x38c>
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	077b      	lsls	r3, r7, #29
 8001cb4:	465d      	mov	r5, fp
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	08fa      	lsrs	r2, r7, #3
 8001cba:	e6d3      	b.n	8001a64 <__aeabi_dsub+0x328>
 8001cbc:	1ac4      	subs	r4, r0, r3
 8001cbe:	42a0      	cmp	r0, r4
 8001cc0:	4180      	sbcs	r0, r0
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	4240      	negs	r0, r0
 8001cc6:	1aff      	subs	r7, r7, r3
 8001cc8:	1a3b      	subs	r3, r7, r0
 8001cca:	469a      	mov	sl, r3
 8001ccc:	465d      	mov	r5, fp
 8001cce:	e597      	b.n	8001800 <__aeabi_dsub+0xc4>
 8001cd0:	1a1c      	subs	r4, r3, r0
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	42a3      	cmp	r3, r4
 8001cd6:	419b      	sbcs	r3, r3
 8001cd8:	1bd7      	subs	r7, r2, r7
 8001cda:	425b      	negs	r3, r3
 8001cdc:	1afb      	subs	r3, r7, r3
 8001cde:	469a      	mov	sl, r3
 8001ce0:	2601      	movs	r6, #1
 8001ce2:	e585      	b.n	80017f0 <__aeabi_dsub+0xb4>
 8001ce4:	08c0      	lsrs	r0, r0, #3
 8001ce6:	077b      	lsls	r3, r7, #29
 8001ce8:	465d      	mov	r5, fp
 8001cea:	4303      	orrs	r3, r0
 8001cec:	08fa      	lsrs	r2, r7, #3
 8001cee:	e6e7      	b.n	8001ac0 <__aeabi_dsub+0x384>
 8001cf0:	464a      	mov	r2, r9
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	0752      	lsls	r2, r2, #29
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	464a      	mov	r2, r9
 8001cfa:	08d2      	lsrs	r2, r2, #3
 8001cfc:	e6b5      	b.n	8001a6a <__aeabi_dsub+0x32e>
 8001cfe:	08c0      	lsrs	r0, r0, #3
 8001d00:	077b      	lsls	r3, r7, #29
 8001d02:	4303      	orrs	r3, r0
 8001d04:	08fa      	lsrs	r2, r7, #3
 8001d06:	e6db      	b.n	8001ac0 <__aeabi_dsub+0x384>
 8001d08:	4649      	mov	r1, r9
 8001d0a:	4319      	orrs	r1, r3
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	1e59      	subs	r1, r3, #1
 8001d10:	418b      	sbcs	r3, r1
 8001d12:	001c      	movs	r4, r3
 8001d14:	e653      	b.n	80019be <__aeabi_dsub+0x282>
 8001d16:	464d      	mov	r5, r9
 8001d18:	3c20      	subs	r4, #32
 8001d1a:	40e5      	lsrs	r5, r4
 8001d1c:	2920      	cmp	r1, #32
 8001d1e:	d005      	beq.n	8001d2c <__aeabi_dsub+0x5f0>
 8001d20:	2440      	movs	r4, #64	; 0x40
 8001d22:	1a64      	subs	r4, r4, r1
 8001d24:	4649      	mov	r1, r9
 8001d26:	40a1      	lsls	r1, r4
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	1e5c      	subs	r4, r3, #1
 8001d30:	41a3      	sbcs	r3, r4
 8001d32:	432b      	orrs	r3, r5
 8001d34:	e776      	b.n	8001c24 <__aeabi_dsub+0x4e8>
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d0e1      	beq.n	8001cfe <__aeabi_dsub+0x5c2>
 8001d3a:	003a      	movs	r2, r7
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dsub+0x608>
 8001d42:	e6b8      	b.n	8001ab6 <__aeabi_dsub+0x37a>
 8001d44:	464a      	mov	r2, r9
 8001d46:	0752      	lsls	r2, r2, #29
 8001d48:	2480      	movs	r4, #128	; 0x80
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	08d2      	lsrs	r2, r2, #3
 8001d52:	4222      	tst	r2, r4
 8001d54:	d007      	beq.n	8001d66 <__aeabi_dsub+0x62a>
 8001d56:	08fe      	lsrs	r6, r7, #3
 8001d58:	4226      	tst	r6, r4
 8001d5a:	d104      	bne.n	8001d66 <__aeabi_dsub+0x62a>
 8001d5c:	465d      	mov	r5, fp
 8001d5e:	0032      	movs	r2, r6
 8001d60:	08c3      	lsrs	r3, r0, #3
 8001d62:	077f      	lsls	r7, r7, #29
 8001d64:	433b      	orrs	r3, r7
 8001d66:	0f59      	lsrs	r1, r3, #29
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	0749      	lsls	r1, r1, #29
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	e6a6      	b.n	8001ac0 <__aeabi_dsub+0x384>
 8001d72:	1ac4      	subs	r4, r0, r3
 8001d74:	42a0      	cmp	r0, r4
 8001d76:	4180      	sbcs	r0, r0
 8001d78:	464b      	mov	r3, r9
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	1aff      	subs	r7, r7, r3
 8001d7e:	1a3b      	subs	r3, r7, r0
 8001d80:	469a      	mov	sl, r3
 8001d82:	465d      	mov	r5, fp
 8001d84:	2601      	movs	r6, #1
 8001d86:	e533      	b.n	80017f0 <__aeabi_dsub+0xb4>
 8001d88:	003b      	movs	r3, r7
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x654>
 8001d8e:	e715      	b.n	8001bbc <__aeabi_dsub+0x480>
 8001d90:	08c0      	lsrs	r0, r0, #3
 8001d92:	077b      	lsls	r3, r7, #29
 8001d94:	465d      	mov	r5, fp
 8001d96:	4303      	orrs	r3, r0
 8001d98:	08fa      	lsrs	r2, r7, #3
 8001d9a:	e666      	b.n	8001a6a <__aeabi_dsub+0x32e>
 8001d9c:	08c0      	lsrs	r0, r0, #3
 8001d9e:	077b      	lsls	r3, r7, #29
 8001da0:	4303      	orrs	r3, r0
 8001da2:	08fa      	lsrs	r2, r7, #3
 8001da4:	e65e      	b.n	8001a64 <__aeabi_dsub+0x328>
 8001da6:	003a      	movs	r2, r7
 8001da8:	08db      	lsrs	r3, r3, #3
 8001daa:	4302      	orrs	r2, r0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x674>
 8001dae:	e682      	b.n	8001ab6 <__aeabi_dsub+0x37a>
 8001db0:	464a      	mov	r2, r9
 8001db2:	0752      	lsls	r2, r2, #29
 8001db4:	2480      	movs	r4, #128	; 0x80
 8001db6:	4313      	orrs	r3, r2
 8001db8:	464a      	mov	r2, r9
 8001dba:	0324      	lsls	r4, r4, #12
 8001dbc:	08d2      	lsrs	r2, r2, #3
 8001dbe:	4222      	tst	r2, r4
 8001dc0:	d007      	beq.n	8001dd2 <__aeabi_dsub+0x696>
 8001dc2:	08fe      	lsrs	r6, r7, #3
 8001dc4:	4226      	tst	r6, r4
 8001dc6:	d104      	bne.n	8001dd2 <__aeabi_dsub+0x696>
 8001dc8:	465d      	mov	r5, fp
 8001dca:	0032      	movs	r2, r6
 8001dcc:	08c3      	lsrs	r3, r0, #3
 8001dce:	077f      	lsls	r7, r7, #29
 8001dd0:	433b      	orrs	r3, r7
 8001dd2:	0f59      	lsrs	r1, r3, #29
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	0749      	lsls	r1, r1, #29
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	e670      	b.n	8001ac0 <__aeabi_dsub+0x384>
 8001dde:	08c0      	lsrs	r0, r0, #3
 8001de0:	077b      	lsls	r3, r7, #29
 8001de2:	4303      	orrs	r3, r0
 8001de4:	08fa      	lsrs	r2, r7, #3
 8001de6:	e640      	b.n	8001a6a <__aeabi_dsub+0x32e>
 8001de8:	464c      	mov	r4, r9
 8001dea:	3920      	subs	r1, #32
 8001dec:	40cc      	lsrs	r4, r1
 8001dee:	4661      	mov	r1, ip
 8001df0:	2920      	cmp	r1, #32
 8001df2:	d006      	beq.n	8001e02 <__aeabi_dsub+0x6c6>
 8001df4:	4666      	mov	r6, ip
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	1b89      	subs	r1, r1, r6
 8001dfa:	464e      	mov	r6, r9
 8001dfc:	408e      	lsls	r6, r1
 8001dfe:	4333      	orrs	r3, r6
 8001e00:	4698      	mov	r8, r3
 8001e02:	4643      	mov	r3, r8
 8001e04:	1e59      	subs	r1, r3, #1
 8001e06:	418b      	sbcs	r3, r1
 8001e08:	431c      	orrs	r4, r3
 8001e0a:	e5d8      	b.n	80019be <__aeabi_dsub+0x282>
 8001e0c:	181c      	adds	r4, r3, r0
 8001e0e:	4284      	cmp	r4, r0
 8001e10:	4180      	sbcs	r0, r0
 8001e12:	444f      	add	r7, r9
 8001e14:	46ba      	mov	sl, r7
 8001e16:	4240      	negs	r0, r0
 8001e18:	4482      	add	sl, r0
 8001e1a:	e6d9      	b.n	8001bd0 <__aeabi_dsub+0x494>
 8001e1c:	4653      	mov	r3, sl
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x6e8>
 8001e22:	e6cb      	b.n	8001bbc <__aeabi_dsub+0x480>
 8001e24:	e614      	b.n	8001a50 <__aeabi_dsub+0x314>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	ff7fffff 	.word	0xff7fffff
 8001e30:	000007fe 	.word	0x000007fe
 8001e34:	2300      	movs	r3, #0
 8001e36:	4a01      	ldr	r2, [pc, #4]	; (8001e3c <__aeabi_dsub+0x700>)
 8001e38:	001c      	movs	r4, r3
 8001e3a:	e529      	b.n	8001890 <__aeabi_dsub+0x154>
 8001e3c:	000007ff 	.word	0x000007ff

08001e40 <__aeabi_d2iz>:
 8001e40:	000a      	movs	r2, r1
 8001e42:	b530      	push	{r4, r5, lr}
 8001e44:	4c13      	ldr	r4, [pc, #76]	; (8001e94 <__aeabi_d2iz+0x54>)
 8001e46:	0053      	lsls	r3, r2, #1
 8001e48:	0309      	lsls	r1, r1, #12
 8001e4a:	0005      	movs	r5, r0
 8001e4c:	0b09      	lsrs	r1, r1, #12
 8001e4e:	2000      	movs	r0, #0
 8001e50:	0d5b      	lsrs	r3, r3, #21
 8001e52:	0fd2      	lsrs	r2, r2, #31
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	dd04      	ble.n	8001e62 <__aeabi_d2iz+0x22>
 8001e58:	480f      	ldr	r0, [pc, #60]	; (8001e98 <__aeabi_d2iz+0x58>)
 8001e5a:	4283      	cmp	r3, r0
 8001e5c:	dd02      	ble.n	8001e64 <__aeabi_d2iz+0x24>
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <__aeabi_d2iz+0x5c>)
 8001e60:	18d0      	adds	r0, r2, r3
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	2080      	movs	r0, #128	; 0x80
 8001e66:	0340      	lsls	r0, r0, #13
 8001e68:	4301      	orrs	r1, r0
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <__aeabi_d2iz+0x60>)
 8001e6c:	1ac0      	subs	r0, r0, r3
 8001e6e:	281f      	cmp	r0, #31
 8001e70:	dd08      	ble.n	8001e84 <__aeabi_d2iz+0x44>
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <__aeabi_d2iz+0x64>)
 8001e74:	1ac3      	subs	r3, r0, r3
 8001e76:	40d9      	lsrs	r1, r3
 8001e78:	000b      	movs	r3, r1
 8001e7a:	4258      	negs	r0, r3
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d1f0      	bne.n	8001e62 <__aeabi_d2iz+0x22>
 8001e80:	0018      	movs	r0, r3
 8001e82:	e7ee      	b.n	8001e62 <__aeabi_d2iz+0x22>
 8001e84:	4c08      	ldr	r4, [pc, #32]	; (8001ea8 <__aeabi_d2iz+0x68>)
 8001e86:	40c5      	lsrs	r5, r0
 8001e88:	46a4      	mov	ip, r4
 8001e8a:	4463      	add	r3, ip
 8001e8c:	4099      	lsls	r1, r3
 8001e8e:	000b      	movs	r3, r1
 8001e90:	432b      	orrs	r3, r5
 8001e92:	e7f2      	b.n	8001e7a <__aeabi_d2iz+0x3a>
 8001e94:	000003fe 	.word	0x000003fe
 8001e98:	0000041d 	.word	0x0000041d
 8001e9c:	7fffffff 	.word	0x7fffffff
 8001ea0:	00000433 	.word	0x00000433
 8001ea4:	00000413 	.word	0x00000413
 8001ea8:	fffffbed 	.word	0xfffffbed

08001eac <__aeabi_i2d>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d016      	beq.n	8001ee0 <__aeabi_i2d+0x34>
 8001eb2:	17c3      	asrs	r3, r0, #31
 8001eb4:	18c5      	adds	r5, r0, r3
 8001eb6:	405d      	eors	r5, r3
 8001eb8:	0fc4      	lsrs	r4, r0, #31
 8001eba:	0028      	movs	r0, r5
 8001ebc:	f000 f8d2 	bl	8002064 <__clzsi2>
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <__aeabi_i2d+0x5c>)
 8001ec2:	1a1b      	subs	r3, r3, r0
 8001ec4:	280a      	cmp	r0, #10
 8001ec6:	dc16      	bgt.n	8001ef6 <__aeabi_i2d+0x4a>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	002e      	movs	r6, r5
 8001ecc:	3215      	adds	r2, #21
 8001ece:	4096      	lsls	r6, r2
 8001ed0:	220b      	movs	r2, #11
 8001ed2:	1a12      	subs	r2, r2, r0
 8001ed4:	40d5      	lsrs	r5, r2
 8001ed6:	055b      	lsls	r3, r3, #21
 8001ed8:	032d      	lsls	r5, r5, #12
 8001eda:	0b2d      	lsrs	r5, r5, #12
 8001edc:	0d5b      	lsrs	r3, r3, #21
 8001ede:	e003      	b.n	8001ee8 <__aeabi_i2d+0x3c>
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2500      	movs	r5, #0
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	051b      	lsls	r3, r3, #20
 8001eea:	432b      	orrs	r3, r5
 8001eec:	07e4      	lsls	r4, r4, #31
 8001eee:	4323      	orrs	r3, r4
 8001ef0:	0030      	movs	r0, r6
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	380b      	subs	r0, #11
 8001ef8:	4085      	lsls	r5, r0
 8001efa:	055b      	lsls	r3, r3, #21
 8001efc:	032d      	lsls	r5, r5, #12
 8001efe:	2600      	movs	r6, #0
 8001f00:	0b2d      	lsrs	r5, r5, #12
 8001f02:	0d5b      	lsrs	r3, r3, #21
 8001f04:	e7f0      	b.n	8001ee8 <__aeabi_i2d+0x3c>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	0000041e 	.word	0x0000041e

08001f0c <__aeabi_ui2d>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	1e04      	subs	r4, r0, #0
 8001f10:	d010      	beq.n	8001f34 <__aeabi_ui2d+0x28>
 8001f12:	f000 f8a7 	bl	8002064 <__clzsi2>
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <__aeabi_ui2d+0x48>)
 8001f18:	1a1b      	subs	r3, r3, r0
 8001f1a:	280a      	cmp	r0, #10
 8001f1c:	dc11      	bgt.n	8001f42 <__aeabi_ui2d+0x36>
 8001f1e:	220b      	movs	r2, #11
 8001f20:	0021      	movs	r1, r4
 8001f22:	1a12      	subs	r2, r2, r0
 8001f24:	40d1      	lsrs	r1, r2
 8001f26:	3015      	adds	r0, #21
 8001f28:	030a      	lsls	r2, r1, #12
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	4084      	lsls	r4, r0
 8001f2e:	0b12      	lsrs	r2, r2, #12
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	e001      	b.n	8001f38 <__aeabi_ui2d+0x2c>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2200      	movs	r2, #0
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	0020      	movs	r0, r4
 8001f3e:	0019      	movs	r1, r3
 8001f40:	bd10      	pop	{r4, pc}
 8001f42:	0022      	movs	r2, r4
 8001f44:	380b      	subs	r0, #11
 8001f46:	4082      	lsls	r2, r0
 8001f48:	055b      	lsls	r3, r3, #21
 8001f4a:	0312      	lsls	r2, r2, #12
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	0b12      	lsrs	r2, r2, #12
 8001f50:	0d5b      	lsrs	r3, r3, #21
 8001f52:	e7f1      	b.n	8001f38 <__aeabi_ui2d+0x2c>
 8001f54:	0000041e 	.word	0x0000041e

08001f58 <__aeabi_d2f>:
 8001f58:	0002      	movs	r2, r0
 8001f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5c:	004b      	lsls	r3, r1, #1
 8001f5e:	030d      	lsls	r5, r1, #12
 8001f60:	0f40      	lsrs	r0, r0, #29
 8001f62:	0d5b      	lsrs	r3, r3, #21
 8001f64:	0fcc      	lsrs	r4, r1, #31
 8001f66:	0a6d      	lsrs	r5, r5, #9
 8001f68:	493a      	ldr	r1, [pc, #232]	; (8002054 <__aeabi_d2f+0xfc>)
 8001f6a:	4305      	orrs	r5, r0
 8001f6c:	1c58      	adds	r0, r3, #1
 8001f6e:	00d7      	lsls	r7, r2, #3
 8001f70:	4208      	tst	r0, r1
 8001f72:	d00a      	beq.n	8001f8a <__aeabi_d2f+0x32>
 8001f74:	4938      	ldr	r1, [pc, #224]	; (8002058 <__aeabi_d2f+0x100>)
 8001f76:	1859      	adds	r1, r3, r1
 8001f78:	29fe      	cmp	r1, #254	; 0xfe
 8001f7a:	dd16      	ble.n	8001faa <__aeabi_d2f+0x52>
 8001f7c:	20ff      	movs	r0, #255	; 0xff
 8001f7e:	2200      	movs	r2, #0
 8001f80:	05c0      	lsls	r0, r0, #23
 8001f82:	4310      	orrs	r0, r2
 8001f84:	07e4      	lsls	r4, r4, #31
 8001f86:	4320      	orrs	r0, r4
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <__aeabi_d2f+0x44>
 8001f8e:	433d      	orrs	r5, r7
 8001f90:	d026      	beq.n	8001fe0 <__aeabi_d2f+0x88>
 8001f92:	2205      	movs	r2, #5
 8001f94:	0192      	lsls	r2, r2, #6
 8001f96:	0a52      	lsrs	r2, r2, #9
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	e7f1      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001f9c:	432f      	orrs	r7, r5
 8001f9e:	d0ed      	beq.n	8001f7c <__aeabi_d2f+0x24>
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	03d2      	lsls	r2, r2, #15
 8001fa4:	20ff      	movs	r0, #255	; 0xff
 8001fa6:	432a      	orrs	r2, r5
 8001fa8:	e7ea      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001faa:	2900      	cmp	r1, #0
 8001fac:	dd1b      	ble.n	8001fe6 <__aeabi_d2f+0x8e>
 8001fae:	0192      	lsls	r2, r2, #6
 8001fb0:	1e50      	subs	r0, r2, #1
 8001fb2:	4182      	sbcs	r2, r0
 8001fb4:	00ed      	lsls	r5, r5, #3
 8001fb6:	0f7f      	lsrs	r7, r7, #29
 8001fb8:	432a      	orrs	r2, r5
 8001fba:	433a      	orrs	r2, r7
 8001fbc:	0753      	lsls	r3, r2, #29
 8001fbe:	d047      	beq.n	8002050 <__aeabi_d2f+0xf8>
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d000      	beq.n	8001fca <__aeabi_d2f+0x72>
 8001fc8:	3204      	adds	r2, #4
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	04db      	lsls	r3, r3, #19
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d03e      	beq.n	8002050 <__aeabi_d2f+0xf8>
 8001fd2:	1c48      	adds	r0, r1, #1
 8001fd4:	29fe      	cmp	r1, #254	; 0xfe
 8001fd6:	d0d1      	beq.n	8001f7c <__aeabi_d2f+0x24>
 8001fd8:	0192      	lsls	r2, r2, #6
 8001fda:	0a52      	lsrs	r2, r2, #9
 8001fdc:	b2c0      	uxtb	r0, r0
 8001fde:	e7cf      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	e7cc      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	3217      	adds	r2, #23
 8001fea:	db2f      	blt.n	800204c <__aeabi_d2f+0xf4>
 8001fec:	2680      	movs	r6, #128	; 0x80
 8001fee:	0436      	lsls	r6, r6, #16
 8001ff0:	432e      	orrs	r6, r5
 8001ff2:	251e      	movs	r5, #30
 8001ff4:	1a6d      	subs	r5, r5, r1
 8001ff6:	2d1f      	cmp	r5, #31
 8001ff8:	dd11      	ble.n	800201e <__aeabi_d2f+0xc6>
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4252      	negs	r2, r2
 8001ffe:	1a52      	subs	r2, r2, r1
 8002000:	0031      	movs	r1, r6
 8002002:	40d1      	lsrs	r1, r2
 8002004:	2d20      	cmp	r5, #32
 8002006:	d004      	beq.n	8002012 <__aeabi_d2f+0xba>
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <__aeabi_d2f+0x104>)
 800200a:	4694      	mov	ip, r2
 800200c:	4463      	add	r3, ip
 800200e:	409e      	lsls	r6, r3
 8002010:	4337      	orrs	r7, r6
 8002012:	003a      	movs	r2, r7
 8002014:	1e53      	subs	r3, r2, #1
 8002016:	419a      	sbcs	r2, r3
 8002018:	430a      	orrs	r2, r1
 800201a:	2100      	movs	r1, #0
 800201c:	e7ce      	b.n	8001fbc <__aeabi_d2f+0x64>
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <__aeabi_d2f+0x108>)
 8002020:	0038      	movs	r0, r7
 8002022:	4694      	mov	ip, r2
 8002024:	4463      	add	r3, ip
 8002026:	4098      	lsls	r0, r3
 8002028:	003a      	movs	r2, r7
 800202a:	1e41      	subs	r1, r0, #1
 800202c:	4188      	sbcs	r0, r1
 800202e:	409e      	lsls	r6, r3
 8002030:	40ea      	lsrs	r2, r5
 8002032:	4330      	orrs	r0, r6
 8002034:	4302      	orrs	r2, r0
 8002036:	2100      	movs	r1, #0
 8002038:	0753      	lsls	r3, r2, #29
 800203a:	d1c1      	bne.n	8001fc0 <__aeabi_d2f+0x68>
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0013      	movs	r3, r2
 8002040:	04c9      	lsls	r1, r1, #19
 8002042:	2001      	movs	r0, #1
 8002044:	400b      	ands	r3, r1
 8002046:	420a      	tst	r2, r1
 8002048:	d1c6      	bne.n	8001fd8 <__aeabi_d2f+0x80>
 800204a:	e7a3      	b.n	8001f94 <__aeabi_d2f+0x3c>
 800204c:	2300      	movs	r3, #0
 800204e:	e7a0      	b.n	8001f92 <__aeabi_d2f+0x3a>
 8002050:	000b      	movs	r3, r1
 8002052:	e79f      	b.n	8001f94 <__aeabi_d2f+0x3c>
 8002054:	000007fe 	.word	0x000007fe
 8002058:	fffffc80 	.word	0xfffffc80
 800205c:	fffffca2 	.word	0xfffffca2
 8002060:	fffffc82 	.word	0xfffffc82

08002064 <__clzsi2>:
 8002064:	211c      	movs	r1, #28
 8002066:	2301      	movs	r3, #1
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	4298      	cmp	r0, r3
 800206c:	d301      	bcc.n	8002072 <__clzsi2+0xe>
 800206e:	0c00      	lsrs	r0, r0, #16
 8002070:	3910      	subs	r1, #16
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	4298      	cmp	r0, r3
 8002076:	d301      	bcc.n	800207c <__clzsi2+0x18>
 8002078:	0a00      	lsrs	r0, r0, #8
 800207a:	3908      	subs	r1, #8
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	4298      	cmp	r0, r3
 8002080:	d301      	bcc.n	8002086 <__clzsi2+0x22>
 8002082:	0900      	lsrs	r0, r0, #4
 8002084:	3904      	subs	r1, #4
 8002086:	a202      	add	r2, pc, #8	; (adr r2, 8002090 <__clzsi2+0x2c>)
 8002088:	5c10      	ldrb	r0, [r2, r0]
 800208a:	1840      	adds	r0, r0, r1
 800208c:	4770      	bx	lr
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	02020304 	.word	0x02020304
 8002094:	01010101 	.word	0x01010101
	...

080020a0 <_ZN13AC_controllerC1E12GPIO_TypeDeft>:
#include <AC_controller.hpp>

AC_controller::AC_controller(GPIO_TypeDef _gpioPort, uint16_t _gpioPin){
 80020a0:	b084      	sub	sp, #16
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	2004      	movs	r0, #4
 80020ac:	2418      	movs	r4, #24
 80020ae:	1900      	adds	r0, r0, r4
 80020b0:	19c0      	adds	r0, r0, r7
 80020b2:	6001      	str	r1, [r0, #0]
 80020b4:	6042      	str	r2, [r0, #4]
 80020b6:	6083      	str	r3, [r0, #8]
	gpioPort = _gpioPort;
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	2304      	movs	r3, #4
 80020bc:	191b      	adds	r3, r3, r4
 80020be:	19da      	adds	r2, r3, r7
 80020c0:	000b      	movs	r3, r1
 80020c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020c4:	c313      	stmia	r3!, {r0, r1, r4}
 80020c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020c8:	c313      	stmia	r3!, {r0, r1, r4}
 80020ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020cc:	c313      	stmia	r3!, {r0, r1, r4}
 80020ce:	ca03      	ldmia	r2!, {r0, r1}
 80020d0:	c303      	stmia	r3!, {r0, r1}
	gpioPin = _gpioPin;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2248      	movs	r2, #72	; 0x48
 80020d6:	18ba      	adds	r2, r7, r2
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b003      	add	sp, #12
 80020e4:	bc90      	pop	{r4, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	b004      	add	sp, #16
 80020ea:	4718      	bx	r3

080020ec <_ZN13AC_controller7sendBitEh>:
//PRIVATE FUNCTIONS
void AC_controller::sendBit(unsigned char bit){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	000a      	movs	r2, r1
 80020f6:	1cfb      	adds	r3, r7, #3
 80020f8:	701a      	strb	r2, [r3, #0]
	GPIO_Output(&gpioPort, gpioPin, 0);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002100:	2200      	movs	r2, #0
 8002102:	0019      	movs	r1, r3
 8002104:	f001 ffec 	bl	80040e0 <GPIO_Output>
	delay_us(560);
 8002108:	238c      	movs	r3, #140	; 0x8c
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	0018      	movs	r0, r3
 800210e:	f003 faa5 	bl	800565c <delay_us>
	GPIO_Output(&gpioPort, gpioPin, 1);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002118:	2201      	movs	r2, #1
 800211a:	0019      	movs	r1, r3
 800211c:	f001 ffe0 	bl	80040e0 <GPIO_Output>
	if (bit == '1')
 8002120:	1cfb      	adds	r3, r7, #3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b31      	cmp	r3, #49	; 0x31
 8002126:	d104      	bne.n	8002132 <_ZN13AC_controller7sendBitEh+0x46>
		delay_us(1500); // Ar de Joinville 1690 ou 1500us
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <_ZN13AC_controller7sendBitEh+0x58>)
 800212a:	0018      	movs	r0, r3
 800212c:	f003 fa96 	bl	800565c <delay_us>
	else
		delay_us(480); //Ar de Joinville Delay < 500us (deve ser 480)
}
 8002130:	e004      	b.n	800213c <_ZN13AC_controller7sendBitEh+0x50>
		delay_us(480); //Ar de Joinville Delay < 500us (deve ser 480)
 8002132:	23f0      	movs	r3, #240	; 0xf0
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	0018      	movs	r0, r3
 8002138:	f003 fa90 	bl	800565c <delay_us>
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	000005dc 	.word	0x000005dc

08002148 <_ZN13AC_controller8sendByteEh>:

void AC_controller::sendByte(unsigned char byte){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	000a      	movs	r2, r1
 8002152:	1cfb      	adds	r3, r7, #3
 8002154:	701a      	strb	r2, [r3, #0]
	unsigned int i;
	i = 8;
 8002156:	2308      	movs	r3, #8
 8002158:	60fb      	str	r3, [r7, #12]
	while (i > 0) {
 800215a:	e016      	b.n	800218a <_ZN13AC_controller8sendByteEh+0x42>
		if (byte & (1 << (i - 1)))
 800215c:	1cfb      	adds	r3, r7, #3
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	411a      	asrs	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d005      	beq.n	800217a <_ZN13AC_controller8sendByteEh+0x32>
			sendBit('1');
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2131      	movs	r1, #49	; 0x31
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff ffba 	bl	80020ec <_ZN13AC_controller7sendBitEh>
 8002178:	e004      	b.n	8002184 <_ZN13AC_controller8sendByteEh+0x3c>
		else
			sendBit('0');
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2130      	movs	r1, #48	; 0x30
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff ffb4 	bl	80020ec <_ZN13AC_controller7sendBitEh>
		i--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b01      	subs	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
	while (i > 0) {
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <_ZN13AC_controller8sendByteEh+0x14>
	}
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <_ZN13AC_controller10sendHeaderEv>:

void AC_controller::sendHeader(){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	GPIO_Output(&gpioPort, gpioPin, 0);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021aa:	2200      	movs	r2, #0
 80021ac:	0019      	movs	r1, r3
 80021ae:	f001 ff97 	bl	80040e0 <GPIO_Output>
	delay_us(800); //ar de Joinville
 80021b2:	23c8      	movs	r3, #200	; 0xc8
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	0018      	movs	r0, r3
 80021b8:	f003 fa50 	bl	800565c <delay_us>
	GPIO_Output(&gpioPort, gpioPin, 1);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c2:	2201      	movs	r2, #1
 80021c4:	0019      	movs	r1, r3
 80021c6:	f001 ff8b 	bl	80040e0 <GPIO_Output>
	delay_us(18000); //ar Joinville (?)
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <_ZN13AC_controller10sendHeaderEv+0x40>)
 80021cc:	0018      	movs	r0, r3
 80021ce:	f003 fa45 	bl	800565c <delay_us>
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	00004650 	.word	0x00004650

080021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>:

//PUBLIC FUNCTIONS
//REVER SEND COMMAND
void AC_controller::sendCommand(Mode mode, Fan fan, Temperature temperature,  Turbo turbo, Swing swing, Sheet sheet){
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	000c      	movs	r4, r1
 80021ea:	0010      	movs	r0, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	1cfb      	adds	r3, r7, #3
 80021f0:	1c22      	adds	r2, r4, #0
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	1cbb      	adds	r3, r7, #2
 80021f6:	1c02      	adds	r2, r0, #0
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	1c7b      	adds	r3, r7, #1
 80021fc:	1c0a      	adds	r2, r1, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    unsigned char hora = 0;
 8002200:	231f      	movs	r3, #31
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
    unsigned char min = 0;
 8002208:	231e      	movs	r3, #30
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
	char MSG[15];
    MSG[0]=0x6A;
 8002210:	210c      	movs	r1, #12
 8002212:	187b      	adds	r3, r7, r1
 8002214:	226a      	movs	r2, #106	; 0x6a
 8002216:	701a      	strb	r2, [r3, #0]
    MSG[1]=temperature;
 8002218:	187b      	adds	r3, r7, r1
 800221a:	1c7a      	adds	r2, r7, #1
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	705a      	strb	r2, [r3, #1]
    MSG[2]=0x00;
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2200      	movs	r2, #0
 8002224:	709a      	strb	r2, [r3, #2]
    MSG[3]=0x00;
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	70da      	strb	r2, [r3, #3]
    MSG[4]=(fan << 4)| mode;
 800222c:	1cbb      	adds	r3, r7, #2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	b25a      	sxtb	r2, r3
 8002234:	1cfb      	adds	r3, r7, #3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b25b      	sxtb	r3, r3
 800223e:	b2da      	uxtb	r2, r3
 8002240:	187b      	adds	r3, r7, r1
 8002242:	711a      	strb	r2, [r3, #4]
    if(mode==OFF){ // Se o Modo OFF foi selecionado, valores padrões podem ser passados
 8002244:	1cfb      	adds	r3, r7, #3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x74>
        MSG[5]=0X03;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2203      	movs	r2, #3
 8002250:	715a      	strb	r2, [r3, #5]
 8002252:	e01a      	b.n	800228a <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0xaa>
    }
    else{
        if(mode!=COOL){ // Se Modo diferente de COOL, folha não esta disponivel
 8002254:	1cfb      	adds	r3, r7, #3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d003      	beq.n	8002264 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x84>
            sheet=SHEET_OFF;
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
        }
        MSG[5]=(sheet<<7)|(swing<<3)|0x40;
 8002264:	2340      	movs	r3, #64	; 0x40
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	b25a      	sxtb	r2, r3
 800226e:	233c      	movs	r3, #60	; 0x3c
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	b25b      	sxtb	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b25b      	sxtb	r3, r3
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	4313      	orrs	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	230c      	movs	r3, #12
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	715a      	strb	r2, [r3, #5]
    }
    MSG[6]=0x00;
 800228a:	210c      	movs	r1, #12
 800228c:	187b      	adds	r3, r7, r1
 800228e:	2200      	movs	r2, #0
 8002290:	719a      	strb	r2, [r3, #6]
    MSG[7]=0x00;
 8002292:	187b      	adds	r3, r7, r1
 8002294:	2200      	movs	r2, #0
 8002296:	71da      	strb	r2, [r3, #7]
    MSG[8]=0x30;
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2230      	movs	r2, #48	; 0x30
 800229c:	721a      	strb	r2, [r3, #8]
    MSG[9]=0x00;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2200      	movs	r2, #0
 80022a2:	725a      	strb	r2, [r3, #9]
    MSG[10]=0x30|turbo;
 80022a4:	2338      	movs	r3, #56	; 0x38
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2230      	movs	r2, #48	; 0x30
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	000c      	movs	r4, r1
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	729a      	strb	r2, [r3, #10]
    MSG[11]=0x00; // Segundos
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	2200      	movs	r2, #0
 80022ba:	72da      	strb	r2, [r3, #11]
    MSG[12]=min; // Minutos
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	221e      	movs	r2, #30
 80022c0:	18ba      	adds	r2, r7, r2
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	731a      	strb	r2, [r3, #12]
    MSG[13]=hora; // Horas
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	221f      	movs	r2, #31
 80022ca:	18ba      	adds	r2, r7, r2
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	735a      	strb	r2, [r3, #13]
    MSG[14]=checksumCalculate(MSG);
 80022d0:	193a      	adds	r2, r7, r4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f834 	bl	8002344 <_ZN13AC_controller17checksumCalculateEPc>
 80022dc:	0003      	movs	r3, r0
 80022de:	001a      	movs	r2, r3
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	739a      	strb	r2, [r3, #14]

    sendHeader();
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7ff ff58 	bl	800219c <_ZN13AC_controller10sendHeaderEv>
    for(int byte=0; byte<15; byte++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e00c      	b.n	800230c <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x12c>
        sendByte(MSG[byte]);
 80022f2:	230c      	movs	r3, #12
 80022f4:	18fa      	adds	r2, r7, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	0011      	movs	r1, r2
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff ff21 	bl	8002148 <_ZN13AC_controller8sendByteEh>
    for(int byte=0; byte<15; byte++){
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	3301      	adds	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	2b0e      	cmp	r3, #14
 8002310:	ddef      	ble.n	80022f2 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x112>
    }
    sendBit('1');
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2131      	movs	r1, #49	; 0x31
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff fee8 	bl	80020ec <_ZN13AC_controller7sendBitEh>

    //clear message
    for(int byte=0; byte<15; byte++){
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	e008      	b.n	8002334 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x154>
        MSG[byte]=0;
 8002322:	230c      	movs	r3, #12
 8002324:	18fa      	adds	r2, r7, r3
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	18d3      	adds	r3, r2, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    for(int byte=0; byte<15; byte++){
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	3301      	adds	r3, #1
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b0e      	cmp	r3, #14
 8002338:	ddf3      	ble.n	8002322 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE+0x142>
    }
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b00b      	add	sp, #44	; 0x2c
 8002342:	bd90      	pop	{r4, r7, pc}

08002344 <_ZN13AC_controller17checksumCalculateEPc>:

char AC_controller::checksumCalculate(char *Data){
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	char LSB = 0;
 800234e:	240f      	movs	r4, #15
 8002350:	193b      	adds	r3, r7, r4
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	char MSB = 0;
 8002356:	250e      	movs	r5, #14
 8002358:	197b      	adds	r3, r7, r5
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
	LSB = (invertByte(Data[0] & 0x0F)) >> 4;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	220f      	movs	r2, #15
 8002364:	4013      	ands	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0011      	movs	r1, r2
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f857 	bl	8002420 <_ZN13AC_controller10invertByteEc>
 8002372:	0003      	movs	r3, r0
 8002374:	001a      	movs	r2, r3
 8002376:	193b      	adds	r3, r7, r4
 8002378:	0912      	lsrs	r2, r2, #4
 800237a:	701a      	strb	r2, [r3, #0]
	MSB = (invertByte(((Data[0] >> 4) & 0x0F))) >> 4;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0011      	movs	r1, r2
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f849 	bl	8002420 <_ZN13AC_controller10invertByteEc>
 800238e:	0003      	movs	r3, r0
 8002390:	001a      	movs	r2, r3
 8002392:	197b      	adds	r3, r7, r5
 8002394:	0912      	lsrs	r2, r2, #4
 8002396:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 14; i++) {
 8002398:	2301      	movs	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e02b      	b.n	80023f6 <_ZN13AC_controller17checksumCalculateEPc+0xb2>
		LSB = ((invertByte(Data[i] & 0x0F)) >> 4) + LSB;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	220f      	movs	r2, #15
 80023a8:	4013      	ands	r3, r2
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0011      	movs	r1, r2
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f835 	bl	8002420 <_ZN13AC_controller10invertByteEc>
 80023b6:	0003      	movs	r3, r0
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	220f      	movs	r2, #15
 80023be:	18bb      	adds	r3, r7, r2
 80023c0:	18ba      	adds	r2, r7, r2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	188a      	adds	r2, r1, r2
 80023c6:	701a      	strb	r2, [r3, #0]
		MSB = ((invertByte(((Data[i] >> 4) & 0x0F))) >> 4) + MSB;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	18d3      	adds	r3, r2, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f821 	bl	8002420 <_ZN13AC_controller10invertByteEc>
 80023de:	0003      	movs	r3, r0
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	220e      	movs	r2, #14
 80023e6:	18bb      	adds	r3, r7, r2
 80023e8:	18ba      	adds	r2, r7, r2
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	188a      	adds	r2, r1, r2
 80023ee:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < 14; i++) {
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b0d      	cmp	r3, #13
 80023fa:	ddd0      	ble.n	800239e <_ZN13AC_controller17checksumCalculateEPc+0x5a>

	}
	return invertByte(MSB + LSB);
 80023fc:	230e      	movs	r3, #14
 80023fe:	18fa      	adds	r2, r7, r3
 8002400:	230f      	movs	r3, #15
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	18d3      	adds	r3, r2, r3
 800240a:	b2da      	uxtb	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0011      	movs	r1, r2
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f805 	bl	8002420 <_ZN13AC_controller10invertByteEc>
 8002416:	0003      	movs	r3, r0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bdb0      	pop	{r4, r5, r7, pc}

08002420 <_ZN13AC_controller10invertByteEc>:

char AC_controller::invertByte(char byte){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	000a      	movs	r2, r1
 800242a:	1cfb      	adds	r3, r7, #3
 800242c:	701a      	strb	r2, [r3, #0]
    byte = (((byte & 0x0f) << 4) | ((byte & 0xf0) >> 4));
 800242e:	1cfb      	adds	r3, r7, #3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	b25a      	sxtb	r2, r3
 8002436:	1cfb      	adds	r3, r7, #3
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	b2db      	uxtb	r3, r3
 800243e:	b25b      	sxtb	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b25a      	sxtb	r2, r3
 8002444:	1cfb      	adds	r3, r7, #3
 8002446:	701a      	strb	r2, [r3, #0]
    byte = ((byte & 0x33) << 2) | ((byte & 0xcc) >> 2);
 8002448:	1cfb      	adds	r3, r7, #3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b25b      	sxtb	r3, r3
 8002450:	2233      	movs	r2, #51	; 0x33
 8002452:	4393      	bics	r3, r2
 8002454:	b25a      	sxtb	r2, r3
 8002456:	1cfb      	adds	r3, r7, #3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b25b      	sxtb	r3, r3
 8002460:	2133      	movs	r1, #51	; 0x33
 8002462:	400b      	ands	r3, r1
 8002464:	b25b      	sxtb	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b25a      	sxtb	r2, r3
 800246a:	1cfb      	adds	r3, r7, #3
 800246c:	701a      	strb	r2, [r3, #0]
    byte = ((byte & 0x55) << 1) | ((byte & 0xaa) >> 1);
 800246e:	1cfb      	adds	r3, r7, #3
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	b25b      	sxtb	r3, r3
 8002476:	2255      	movs	r2, #85	; 0x55
 8002478:	4393      	bics	r3, r2
 800247a:	b25a      	sxtb	r2, r3
 800247c:	1cfb      	adds	r3, r7, #3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	b25b      	sxtb	r3, r3
 8002486:	2155      	movs	r1, #85	; 0x55
 8002488:	400b      	ands	r3, r1
 800248a:	b25b      	sxtb	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b25a      	sxtb	r2, r3
 8002490:	1cfb      	adds	r3, r7, #3
 8002492:	701a      	strb	r2, [r3, #0]

    return byte;
 8002494:	1cfb      	adds	r3, r7, #3
 8002496:	781b      	ldrb	r3, [r3, #0]
}
 8002498:	0018      	movs	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN6SensorIfEC1Ev>:

#ifndef __SENSOR_H__
#define __SENSOR_H__

template<typename T>
class Sensor {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <_ZN6SensorIfEC1Ev+0x18>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	08009da8 	.word	0x08009da8

080024bc <_ZN6BMP280C1Ehh>:
#include <BMP280.hpp>

BMP280::BMP280(uint8_t register_F4, uint8_t register_F5)
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	0008      	movs	r0, r1
 80024c6:	0011      	movs	r1, r2
 80024c8:	1cfb      	adds	r3, r7, #3
 80024ca:	1c02      	adds	r2, r0, #0
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	1c0a      	adds	r2, r1, #0
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7ff ffe2 	bl	80024a0 <_ZN6SensorIfEC1Ev>
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <_ZN6BMP280C1Ehh+0x54>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
{

    I2C_Write_Register(BMP280_ADDR, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 80024e2:	1cfb      	adds	r3, r7, #3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	001a      	movs	r2, r3
 80024e8:	21f4      	movs	r1, #244	; 0xf4
 80024ea:	2077      	movs	r0, #119	; 0x77
 80024ec:	f001 fece 	bl	800428c <I2C_Write_Register>
	I2C_Write_Register(BMP280_ADDR, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 80024f0:	1cbb      	adds	r3, r7, #2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	21f5      	movs	r1, #245	; 0xf5
 80024f8:	2077      	movs	r0, #119	; 0x77
 80024fa:	f001 fec7 	bl	800428c <I2C_Write_Register>
    calibration();
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f807 	bl	8002514 <_ZN6BMP28011calibrationEv>
}
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	08009d9c 	.word	0x08009d9c

08002514 <_ZN6BMP28011calibrationEv>:

void BMP280::calibration()
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b08d      	sub	sp, #52	; 0x34
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
    uint8_t rx_buff[24], starting_address = 0x88;
 800251c:	210f      	movs	r1, #15
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2288      	movs	r2, #136	; 0x88
 8002522:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &starting_address, 1, 10000);
 8002524:	187a      	adds	r2, r7, r1
 8002526:	4822      	ldr	r0, [pc, #136]	; (80025b0 <_ZN6BMP28011calibrationEv+0x9c>)
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <_ZN6BMP28011calibrationEv+0xa0>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2301      	movs	r3, #1
 800252e:	2177      	movs	r1, #119	; 0x77
 8002530:	f003 fd1e 	bl	8005f70 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR + 1, &rx_buff[0], 24, 10000);
 8002534:	2410      	movs	r4, #16
 8002536:	193a      	adds	r2, r7, r4
 8002538:	481d      	ldr	r0, [pc, #116]	; (80025b0 <_ZN6BMP28011calibrationEv+0x9c>)
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <_ZN6BMP28011calibrationEv+0xa0>)
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2318      	movs	r3, #24
 8002540:	2178      	movs	r1, #120	; 0x78
 8002542:	f003 fe1d 	bl	8006180 <HAL_I2C_Master_Receive>

    dig_T1 = (rx_buff[0]) + (rx_buff[1] << 8);
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	731a      	strb	r2, [r3, #12]
    dig_T2 = (rx_buff[2]) + (rx_buff[3] << 8);
 8002550:	187b      	adds	r3, r7, r1
 8002552:	789a      	ldrb	r2, [r3, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	735a      	strb	r2, [r3, #13]
    dig_T3 = (rx_buff[4]) + (rx_buff[5] << 8);
 8002558:	187b      	adds	r3, r7, r1
 800255a:	791a      	ldrb	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	739a      	strb	r2, [r3, #14]
    dig_P1 = (rx_buff[6]) + (rx_buff[7] << 8);
 8002560:	187b      	adds	r3, r7, r1
 8002562:	799a      	ldrb	r2, [r3, #6]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	73da      	strb	r2, [r3, #15]
    dig_P2 = (rx_buff[8]) + (rx_buff[9] << 8);
 8002568:	187b      	adds	r3, r7, r1
 800256a:	7a1a      	ldrb	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	741a      	strb	r2, [r3, #16]
    dig_P3 = (rx_buff[10]) + (rx_buff[11] << 8);
 8002570:	187b      	adds	r3, r7, r1
 8002572:	7a9a      	ldrb	r2, [r3, #10]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	745a      	strb	r2, [r3, #17]
    dig_P4 = (rx_buff[12]) + (rx_buff[13] << 8);
 8002578:	187b      	adds	r3, r7, r1
 800257a:	7b1a      	ldrb	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	749a      	strb	r2, [r3, #18]
    dig_P5 = (rx_buff[14]) + (rx_buff[15] << 8);
 8002580:	187b      	adds	r3, r7, r1
 8002582:	7b9a      	ldrb	r2, [r3, #14]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	74da      	strb	r2, [r3, #19]
    dig_P6 = (rx_buff[16]) + (rx_buff[17] << 8);
 8002588:	187b      	adds	r3, r7, r1
 800258a:	7c1a      	ldrb	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	751a      	strb	r2, [r3, #20]
    dig_P7 = (rx_buff[18]) + (rx_buff[19] << 8);
 8002590:	187b      	adds	r3, r7, r1
 8002592:	7c9a      	ldrb	r2, [r3, #18]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	755a      	strb	r2, [r3, #21]
    dig_P8 = (rx_buff[20]) + (rx_buff[21] << 8);
 8002598:	187b      	adds	r3, r7, r1
 800259a:	7d1a      	ldrb	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	759a      	strb	r2, [r3, #22]
    dig_P9 = (rx_buff[22]) + (rx_buff[23] << 8);
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	7d9a      	ldrb	r2, [r3, #22]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	75da      	strb	r2, [r3, #23]
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b00b      	add	sp, #44	; 0x2c
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	20000078 	.word	0x20000078
 80025b4:	00002710 	.word	0x00002710

080025b8 <_ZN6BMP28010readSensorEv>:

float BMP280::readSensor(){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b093      	sub	sp, #76	; 0x4c
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
    uint8_t status, rx_buff[6], starting_address=0xF7;
 80025c0:	230f      	movs	r3, #15
 80025c2:	2208      	movs	r2, #8
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	19db      	adds	r3, r3, r7
 80025c8:	22f7      	movs	r2, #247	; 0xf7
 80025ca:	701a      	strb	r2, [r3, #0]
    signed long temperature_raw;
    do{
		status=I2C_Read_Register(BMP280_ADDR, 0xF3);
 80025cc:	2537      	movs	r5, #55	; 0x37
 80025ce:	2608      	movs	r6, #8
 80025d0:	19ab      	adds	r3, r5, r6
 80025d2:	19dc      	adds	r4, r3, r7
 80025d4:	21f3      	movs	r1, #243	; 0xf3
 80025d6:	2077      	movs	r0, #119	; 0x77
 80025d8:	f001 fe28 	bl	800422c <I2C_Read_Register>
 80025dc:	0003      	movs	r3, r0
 80025de:	7023      	strb	r3, [r4, #0]
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 80025e0:	0029      	movs	r1, r5
 80025e2:	0030      	movs	r0, r6
 80025e4:	180b      	adds	r3, r1, r0
 80025e6:	19db      	adds	r3, r3, r7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2208      	movs	r2, #8
 80025ec:	4013      	ands	r3, r2
 80025ee:	d1ed      	bne.n	80025cc <_ZN6BMP28010readSensorEv+0x14>
 80025f0:	180b      	adds	r3, r1, r0
 80025f2:	19db      	adds	r3, r3, r7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d1e7      	bne.n	80025cc <_ZN6BMP28010readSensorEv+0x14>

    HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &starting_address, 1, 10000);
 80025fc:	230f      	movs	r3, #15
 80025fe:	0005      	movs	r5, r0
 8002600:	195b      	adds	r3, r3, r5
 8002602:	19da      	adds	r2, r3, r7
 8002604:	4869      	ldr	r0, [pc, #420]	; (80027ac <_ZN6BMP28010readSensorEv+0x1f4>)
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <_ZN6BMP28010readSensorEv+0x1f8>)
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2301      	movs	r3, #1
 800260c:	2177      	movs	r1, #119	; 0x77
 800260e:	f003 fcaf 	bl	8005f70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR + 1, &rx_buff[0], 6, 10000);
 8002612:	2410      	movs	r4, #16
 8002614:	1963      	adds	r3, r4, r5
 8002616:	19da      	adds	r2, r3, r7
 8002618:	4864      	ldr	r0, [pc, #400]	; (80027ac <_ZN6BMP28010readSensorEv+0x1f4>)
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <_ZN6BMP28010readSensorEv+0x1f8>)
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2306      	movs	r3, #6
 8002620:	2178      	movs	r1, #120	; 0x78
 8002622:	f003 fdad 	bl	8006180 <HAL_I2C_Master_Receive>

    temperature_raw=(rx_buff[2]<<12)+(rx_buff[1]<<4)+(rx_buff[0]>>4);
 8002626:	0021      	movs	r1, r4
 8002628:	0028      	movs	r0, r5
 800262a:	180b      	adds	r3, r1, r0
 800262c:	19db      	adds	r3, r3, r7
 800262e:	789b      	ldrb	r3, [r3, #2]
 8002630:	031a      	lsls	r2, r3, #12
 8002632:	180b      	adds	r3, r1, r0
 8002634:	19db      	adds	r3, r3, r7
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	180a      	adds	r2, r1, r0
 800263e:	19d2      	adds	r2, r2, r7
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0912      	lsrs	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	189b      	adds	r3, r3, r2
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
    double aux1, aux2;
    aux1 = (((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 800264a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800264c:	f7ff fc2e 	bl	8001eac <__aeabi_i2d>
 8002650:	2200      	movs	r2, #0
 8002652:	4b58      	ldr	r3, [pc, #352]	; (80027b4 <_ZN6BMP28010readSensorEv+0x1fc>)
 8002654:	f7fe fac2 	bl	8000bdc <__aeabi_ddiv>
 8002658:	0002      	movs	r2, r0
 800265a:	000b      	movs	r3, r1
 800265c:	0014      	movs	r4, r2
 800265e:	001d      	movs	r5, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff fc51 	bl	8001f0c <__aeabi_ui2d>
 800266a:	2200      	movs	r2, #0
 800266c:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <_ZN6BMP28010readSensorEv+0x200>)
 800266e:	f7fe fab5 	bl	8000bdc <__aeabi_ddiv>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	0020      	movs	r0, r4
 8002678:	0029      	movs	r1, r5
 800267a:	f7ff f85f 	bl	800173c <__aeabi_dsub>
 800267e:	0002      	movs	r2, r0
 8002680:	000b      	movs	r3, r1
 8002682:	0014      	movs	r4, r2
 8002684:	001d      	movs	r5, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	7b5b      	ldrb	r3, [r3, #13]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fc3e 	bl	8001f0c <__aeabi_ui2d>
 8002690:	0002      	movs	r2, r0
 8002692:	000b      	movs	r3, r1
 8002694:	0020      	movs	r0, r4
 8002696:	0029      	movs	r1, r5
 8002698:	f7fe fd8e 	bl	80011b8 <__aeabi_dmul>
 800269c:	0002      	movs	r2, r0
 800269e:	000b      	movs	r3, r1
 80026a0:	633a      	str	r2, [r7, #48]	; 0x30
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
    aux2 = ((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 80026a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026a6:	f7ff fc01 	bl	8001eac <__aeabi_i2d>
 80026aa:	2200      	movs	r2, #0
 80026ac:	2382      	movs	r3, #130	; 0x82
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	f7fe fa94 	bl	8000bdc <__aeabi_ddiv>
 80026b4:	0002      	movs	r2, r0
 80026b6:	000b      	movs	r3, r1
 80026b8:	0014      	movs	r4, r2
 80026ba:	001d      	movs	r5, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	7b1b      	ldrb	r3, [r3, #12]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff fc23 	bl	8001f0c <__aeabi_ui2d>
 80026c6:	2200      	movs	r2, #0
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <_ZN6BMP28010readSensorEv+0x204>)
 80026ca:	f7fe fa87 	bl	8000bdc <__aeabi_ddiv>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0020      	movs	r0, r4
 80026d4:	0029      	movs	r1, r5
 80026d6:	f7ff f831 	bl	800173c <__aeabi_dsub>
 80026da:	0002      	movs	r2, r0
 80026dc:	000b      	movs	r3, r1
 80026de:	0014      	movs	r4, r2
 80026e0:	001d      	movs	r5, r3
 80026e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026e4:	f7ff fbe2 	bl	8001eac <__aeabi_i2d>
 80026e8:	2200      	movs	r2, #0
 80026ea:	2382      	movs	r3, #130	; 0x82
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	f7fe fa75 	bl	8000bdc <__aeabi_ddiv>
 80026f2:	0002      	movs	r2, r0
 80026f4:	000b      	movs	r3, r1
 80026f6:	603a      	str	r2, [r7, #0]
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff fc04 	bl	8001f0c <__aeabi_ui2d>
 8002704:	2200      	movs	r2, #0
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <_ZN6BMP28010readSensorEv+0x204>)
 8002708:	f7fe fa68 	bl	8000bdc <__aeabi_ddiv>
 800270c:	0002      	movs	r2, r0
 800270e:	000b      	movs	r3, r1
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	f7ff f812 	bl	800173c <__aeabi_dsub>
 8002718:	0002      	movs	r2, r0
 800271a:	000b      	movs	r3, r1
 800271c:	0020      	movs	r0, r4
 800271e:	0029      	movs	r1, r5
 8002720:	f7fe fd4a 	bl	80011b8 <__aeabi_dmul>
 8002724:	0002      	movs	r2, r0
 8002726:	000b      	movs	r3, r1
 8002728:	0014      	movs	r4, r2
 800272a:	001d      	movs	r5, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	7b9b      	ldrb	r3, [r3, #14]
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff fbeb 	bl	8001f0c <__aeabi_ui2d>
 8002736:	0002      	movs	r2, r0
 8002738:	000b      	movs	r3, r1
 800273a:	0020      	movs	r0, r4
 800273c:	0029      	movs	r1, r5
 800273e:	f7fe fd3b 	bl	80011b8 <__aeabi_dmul>
 8002742:	0002      	movs	r2, r0
 8002744:	000b      	movs	r3, r1
 8002746:	62ba      	str	r2, [r7, #40]	; 0x28
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
    double t_fine = (int32_t)(aux1+aux2);
 800274a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002752:	f7fd fee3 	bl	800051c <__aeabi_dadd>
 8002756:	0002      	movs	r2, r0
 8002758:	000b      	movs	r3, r1
 800275a:	0010      	movs	r0, r2
 800275c:	0019      	movs	r1, r3
 800275e:	f7ff fb6f 	bl	8001e40 <__aeabi_d2iz>
 8002762:	0003      	movs	r3, r0
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fba1 	bl	8001eac <__aeabi_i2d>
 800276a:	0002      	movs	r2, r0
 800276c:	000b      	movs	r3, r1
 800276e:	623a      	str	r2, [r7, #32]
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    tempValue = (aux1+aux2)/5120.0;
 8002772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800277a:	f7fd fecf 	bl	800051c <__aeabi_dadd>
 800277e:	0002      	movs	r2, r0
 8002780:	000b      	movs	r3, r1
 8002782:	0010      	movs	r0, r2
 8002784:	0019      	movs	r1, r3
 8002786:	2200      	movs	r2, #0
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <_ZN6BMP28010readSensorEv+0x208>)
 800278a:	f7fe fa27 	bl	8000bdc <__aeabi_ddiv>
 800278e:	0002      	movs	r2, r0
 8002790:	000b      	movs	r3, r1
 8002792:	0010      	movs	r0, r2
 8002794:	0019      	movs	r1, r3
 8002796:	f7ff fbdf 	bl	8001f58 <__aeabi_d2f>
 800279a:	1c02      	adds	r2, r0, #0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
    return tempValue;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
}
 80027a4:	1c18      	adds	r0, r3, #0
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b011      	add	sp, #68	; 0x44
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ac:	20000078 	.word	0x20000078
 80027b0:	00002710 	.word	0x00002710
 80027b4:	40d00000 	.word	0x40d00000
 80027b8:	40900000 	.word	0x40900000
 80027bc:	40c00000 	.word	0x40c00000
 80027c0:	40b40000 	.word	0x40b40000

080027c4 <_ZN8CalendarC1Eiii>:
/*File Calendar.cpp*/
#include "Calendar.h"

Calendar::Calendar(int m, int d, int y)
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
{
    setCalendar(m, d, y);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f805 	bl	80027e8 <_ZN8Calendar11setCalendarEiii>
}
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN8Calendar11setCalendarEiii>:

void Calendar::setCalendar(int m, int d, int y)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
    mo = m;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	601a      	str	r2, [r3, #0]
    day = d;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]
    yr = y;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	609a      	str	r2, [r3, #8]
}   
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN8Calendar15advanceCalendarEv>:
    m = mo;
    d = day;
    y = yr;
}
void Calendar::advanceCalendar()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    int N_DAY = 30;
 8002818:	231e      	movs	r3, #30
 800281a:	60fb      	str	r3, [r7, #12]
  
    if(mo == 1 || mo == 3 || mo == 5 || mo == 7 || mo == 8 || mo == 10 || mo == 12) N_DAY = 31;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d017      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d013      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d00f      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b07      	cmp	r3, #7
 800283a:	d00b      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d007      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b0a      	cmp	r3, #10
 800284a:	d003      	beq.n	8002854 <_ZN8Calendar15advanceCalendarEv+0x44>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d102      	bne.n	800285a <_ZN8Calendar15advanceCalendarEv+0x4a>
 8002854:	231f      	movs	r3, #31
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e008      	b.n	800286c <_ZN8Calendar15advanceCalendarEv+0x5c>
    else if (mo == 2) N_DAY = 28;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d102      	bne.n	8002868 <_ZN8Calendar15advanceCalendarEv+0x58>
 8002862:	231c      	movs	r3, #28
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e001      	b.n	800286c <_ZN8Calendar15advanceCalendarEv+0x5c>
    else N_DAY = 30;
 8002868:	231e      	movs	r3, #30
 800286a:	60fb      	str	r3, [r7, #12]

    day++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]
    if(day>N_DAY)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	da07      	bge.n	8002890 <_ZN8Calendar15advanceCalendarEv+0x80>
    {
        day = 1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	605a      	str	r2, [r3, #4]
        mo++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
    }
    if(mo>12)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	dd07      	ble.n	80028a8 <_ZN8Calendar15advanceCalendarEv+0x98>
    {
        mo = 1;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]
        yr++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
    }
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_ZN5ClockC1Eiiii>:
/*File Clock.cpp*/
#include "Clock.h"

Clock::Clock(int h, int s, int m, int pm)
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
{
    setClock(h, s, m, pm);
 80028be:	683c      	ldr	r4, [r7, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	0023      	movs	r3, r4
 80028cc:	f000 f805 	bl	80028da <_ZN5Clock8setClockEiiii>
}
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b005      	add	sp, #20
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <_ZN5Clock8setClockEiiii>:
void Clock::setClock(int h, int s, int m, int pm)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
    hr = h;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	601a      	str	r2, [r3, #0]
    min = m;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]
    sec = s;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
    is_pm = pm;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bd80      	pop	{r7, pc}

08002908 <_ZN5Clock9readClockERiS0_S0_S0_>:
void Clock::readClock(int& h, int& s, int& m, int& pm)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
    h = hr;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
    m = min;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
    s = sec;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
    pm = is_pm;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN5Clock12advanceClockEv>:
void Clock::advanceClock()
{       
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
    sec++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
    if(sec > 59)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b3b      	cmp	r3, #59	; 0x3b
 8002956:	dd07      	ble.n	8002968 <_ZN5Clock12advanceClockEv+0x2a>
    {
        sec = 0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
        min++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]
    }
    if(min>59)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b3b      	cmp	r3, #59	; 0x3b
 800296e:	dd26      	ble.n	80029be <_ZN5Clock12advanceClockEv+0x80>
    {
        min = 0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
        hr > 11 ? hr = 1:hr++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b0b      	cmp	r3, #11
 800297c:	dd03      	ble.n	8002986 <_ZN5Clock12advanceClockEv+0x48>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e004      	b.n	8002990 <_ZN5Clock12advanceClockEv+0x52>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
        if(is_pm && hr > 11) is_pm = 0; //vai ser meia noite
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <_ZN5Clock12advanceClockEv+0x6a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b0b      	cmp	r3, #11
 800299e:	dd03      	ble.n	80029a8 <_ZN5Clock12advanceClockEv+0x6a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
        else if(!is_pm && hr > 11) is_pm = 1; //vai ser meio dia
    }
}
 80029a6:	e00a      	b.n	80029be <_ZN5Clock12advanceClockEv+0x80>
        else if(!is_pm && hr > 11) is_pm = 1; //vai ser meio dia
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <_ZN5Clock12advanceClockEv+0x80>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b0b      	cmp	r3, #11
 80029b6:	dd02      	ble.n	80029be <_ZN5Clock12advanceClockEv+0x80>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	60da      	str	r2, [r3, #12]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_ZN13ClockCalendarC1Eiiiiiii>:
/*File ClockCalendar.cpp*/
#include "ClockCalendar.h"

ClockCalendar::ClockCalendar(int mo, int d, int y, int h, int m, int s, int pm): Clock(h, m, s, pm), Calendar(m, d, y)
 80029c6:	b590      	push	{r4, r7, lr}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af02      	add	r7, sp, #8
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	0023      	movs	r3, r4
 80029e2:	f7ff ff65 	bl	80028b0 <_ZN5ClockC1Eiiii>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3310      	adds	r3, #16
 80029ea:	0018      	movs	r0, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f2:	f7ff fee7 	bl	80027c4 <_ZN8CalendarC1Eiii>
{
    setClock(h, s, m, pm);
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	0023      	movs	r3, r4
 8002a04:	f7ff ff69 	bl	80028da <_ZN5Clock8setClockEiiii>
    setCalendar(mo, d, y);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	f7ff fee8 	bl	80027e8 <_ZN8Calendar11setCalendarEiii>
}
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b005      	add	sp, #20
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <_ZN13ClockCalendar7advanceEv>:

void ClockCalendar::advance() //avançar o calendário, caso o clock
{
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
    bool wasPm = is_pm; //mude de PM para AM.
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	240f      	movs	r4, #15
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	1e51      	subs	r1, r2, #1
 8002a34:	418a      	sbcs	r2, r1
 8002a36:	701a      	strb	r2, [r3, #0]
    Clock::advanceClock();
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7ff ff7f 	bl	800293e <_ZN5Clock12advanceClockEv>
    if (wasPm && !is_pm)
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <_ZN13ClockCalendar7advanceEv+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <_ZN13ClockCalendar7advanceEv+0x38>
    Calendar::advanceCalendar();
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3310      	adds	r3, #16
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7ff fedb 	bl	8002810 <_ZN8Calendar15advanceCalendarEv>
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b005      	add	sp, #20
 8002a60:	bd90      	pop	{r4, r7, pc}

08002a62 <_ZN4ListC1Ev>:

*/

#include "List.hpp"

List::List() {
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   head = 0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZN4List15insertAfterLastEiiiiiiii>:

void List::insertBeforeFirst(int sensor_id, int sensor_value, int door_open, int ac_on, int hr, int min, int seg, int isPM) {
  head = new Node(sensor_id, sensor_value, door_open, ac_on, hr, min, seg, isPM, head);
}

void List::insertAfterLast(int sensor_id, int sensor_value, int door_open, int ac_on, int hr, int min, int seg, int isPM) {
 8002a7a:	b5b0      	push	{r4, r5, r7, lr}
 8002a7c:	b08c      	sub	sp, #48	; 0x30
 8002a7e:	af06      	add	r7, sp, #24
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  Node* p = head;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
  Node* q = head;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]

  if (head == 0)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d123      	bne.n	8002ae4 <_ZN4List15insertAfterLastEiiiiiiii+0x6a>
     head = new Node(sensor_id, sensor_value, door_open, ac_on, hr, min, seg, isPM, head);
 8002a9c:	2024      	movs	r0, #36	; 0x24
 8002a9e:	f006 fa55 	bl	8008f4c <_Znwj>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	001c      	movs	r4, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	9305      	str	r3, [sp, #20]
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab8:	9303      	str	r3, [sp, #12]
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	9302      	str	r3, [sp, #8]
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	0020      	movs	r0, r4
 8002aca:	f000 f9e6 	bl	8002e9a <_ZN4NodeC1EiiiiiiiiPS_>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	601c      	str	r4, [r3, #0]
        p = q;
        q = p->getNext();
     }
     p->setNext(new Node(sensor_id, sensor_value, door_open, ac_on, hr, min, seg, isPM, 0));
  }
}
 8002ad2:	e027      	b.n	8002b24 <_ZN4List15insertAfterLastEiiiiiiii+0xaa>
        p = q;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	617b      	str	r3, [r7, #20]
        q = p->getNext();
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 fa54 	bl	8002f88 <_ZN4Node7getNextEv>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]
     while (q != 0) {
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f4      	bne.n	8002ad4 <_ZN4List15insertAfterLastEiiiiiiii+0x5a>
     p->setNext(new Node(sensor_id, sensor_value, door_open, ac_on, hr, min, seg, isPM, 0));
 8002aea:	697c      	ldr	r4, [r7, #20]
 8002aec:	2024      	movs	r0, #36	; 0x24
 8002aee:	f006 fa2d 	bl	8008f4c <_Znwj>
 8002af2:	0003      	movs	r3, r0
 8002af4:	001d      	movs	r5, r3
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	9303      	str	r3, [sp, #12]
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	0003      	movs	r3, r0
 8002b16:	0028      	movs	r0, r5
 8002b18:	f000 f9bf 	bl	8002e9a <_ZN4NodeC1EiiiiiiiiPS_>
 8002b1c:	0029      	movs	r1, r5
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f000 fa3c 	bl	8002f9c <_ZN4Node7setNextEPS_>
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b006      	add	sp, #24
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}

08002b2c <_ZN4List11removeFirstERiS0_S0_S0_S0_S0_S0_S0_>:

int List::readFirst() {
   return head->getId();
}

void List::removeFirst(int &retId, int &retSensorValue, int &retDoorOpen, int &retAcOn, int &retHora, int &retMinuto, int &retSegundo, int &retPM){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  if (head != 0){
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d051      	beq.n	8002be6 <_ZN4List11removeFirstERiS0_S0_S0_S0_S0_S0_S0_+0xba>
     //cout << "Removendo: " << head << endl;
     //cout << "e fica:" << head->getVal() << endl;
     retId = head->getId();
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f9ce 	bl	8002ee8 <_ZN4Node5getIdEv>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	601a      	str	r2, [r3, #0]
     retSensorValue = head->getSensorValue();
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f9d0 	bl	8002efc <_ZN4Node14getSensorValueEv>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
     retDoorOpen = head->getDoorOpen();
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f9d2 	bl	8002f10 <_ZN4Node11getDoorOpenEv>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
     retAcOn = head->getAcOn();
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f9d4 	bl	8002f24 <_ZN4Node7getAcOnEv>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	601a      	str	r2, [r3, #0]
     retHora = head->getHora();
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 f9d6 	bl	8002f38 <_ZN4Node7getHoraEv>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	601a      	str	r2, [r3, #0]
     retMinuto = head->getMinuto();
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 f9d8 	bl	8002f4c <_ZN4Node9getMinutoEv>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	601a      	str	r2, [r3, #0]
     retSegundo = head->getSegundo();
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f9da 	bl	8002f60 <_ZN4Node10getSegundoEv>
 8002bac:	0002      	movs	r2, r0
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	601a      	str	r2, [r3, #0]
     retPM = head->getPM();
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 f9dc 	bl	8002f74 <_ZN4Node5getPMEv>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	601a      	str	r2, [r3, #0]
     Node* oldHead = head;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	617b      	str	r3, [r7, #20]
     head = head->getNext();
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f9db 	bl	8002f88 <_ZN4Node7getNextEv>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]
     delete oldHead;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <_ZN4List11removeFirstERiS0_S0_S0_S0_S0_S0_S0_+0xba>
 8002bde:	2124      	movs	r1, #36	; 0x24
 8002be0:	0018      	movs	r0, r3
 8002be2:	f006 f9af 	bl	8008f44 <_ZdlPvj>
  }
  //return retval;
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ZN4List7listAllEv>:
  }

  return result;
}*/

int List::listAll() {
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
	Node *aux = head;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]
	int numNos = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
	while (aux != 0) {
 8002c00:	e008      	b.n	8002c14 <_ZN4List7listAllEv+0x26>
		numNos++;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
		aux = aux->getNext();
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 f9bc 	bl	8002f88 <_ZN4Node7getNextEv>
 8002c10:	0003      	movs	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
	while (aux != 0) {
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f3      	bne.n	8002c02 <_ZN4List7listAllEv+0x14>
	}
	  return numNos;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN4MQTTC1EPKctS1_S1_>:
/*MQTT implementation*/

#include "MQTT.hpp"

MQTT::MQTT(const char* bbroker, uint16_t pport, const char* sssid, const char* ppsw){
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	1dbb      	adds	r3, r7, #6
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <_ZN4MQTTC1EPKctS1_S1_+0xcc>)
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <_ZN4MQTTC1EPKctS1_S1_+0xd0>)
 8002c3e:	3304      	adds	r3, #4
 8002c40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c42:	c313      	stmia	r3!, {r0, r1, r4}
 8002c44:	ca03      	ldmia	r2!, {r0, r1}
 8002c46:	c303      	stmia	r3!, {r0, r1}

	setMQTTServer(bbroker);
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 f874 	bl	8002d3c <_ZN4MQTT13setMQTTServerEPKc>
	setMQTTPort(pport);
 8002c54:	1dbb      	adds	r3, r7, #6
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 f879 	bl	8002d54 <_ZN4MQTT11setMQTTPortEt>
	setSSID(sssid);
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	0011      	movs	r1, r2
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f84f 	bl	8002d0c <_ZN4MQTT7setSSIDEPKc>
	setPSW(ppsw);
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 f855 	bl	8002d24 <_ZN4MQTT6setPSWEPKc>

	sendATcommand(wifi_command, ssid, sizeof(ssid));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	2204      	movs	r2, #4
 8002c84:	0019      	movs	r1, r3
 8002c86:	f002 fd81 	bl	800578c <sendATcommand>
	sendCommand(psw, sizeof(psw));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2104      	movs	r1, #4
 8002c90:	0018      	movs	r0, r3
 8002c92:	f002 fd9d 	bl	80057d0 <sendCommand>

//AT+MQTTUSERCFG=<LinkID>,<scheme>,<"client_id">,<"username">,<"password">,<cert_key_ID>,<CA_ID>,<"path">
	sendATcommand(mqtt_commands[MQTTUSERCFG], 0, 1); //LinkID
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f002 fd74 	bl	800578c <sendATcommand>
	sendCommand((const char*)1, 1);//scheme
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f002 fd92 	bl	80057d0 <sendCommand>
	sendCommand("1", 1);//client id
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <_ZN4MQTTC1EPKctS1_S1_+0xd4>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f002 fd8d 	bl	80057d0 <sendCommand>
	sendCommand("user", 4); //user
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <_ZN4MQTTC1EPKctS1_S1_+0xd8>)
 8002cb8:	2104      	movs	r1, #4
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fd88 	bl	80057d0 <sendCommand>
	sendCommand("pass", 4); //pass
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_ZN4MQTTC1EPKctS1_S1_+0xdc>)
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 fd83 	bl	80057d0 <sendCommand>
	sendCommand(0, 1);
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f002 fd7f 	bl	80057d0 <sendCommand>
	sendCommand("" "", 3);
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <_ZN4MQTTC1EPKctS1_S1_+0xe0>)
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 fd7a 	bl	80057d0 <sendCommand>
	sendCommand("\r", 1);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <_ZN4MQTTC1EPKctS1_S1_+0xe4>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f002 fd75 	bl	80057d0 <sendCommand>
}
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b005      	add	sp, #20
 8002cee:	bd90      	pop	{r4, r7, pc}
 8002cf0:	08009c40 	.word	0x08009c40
 8002cf4:	08009cb0 	.word	0x08009cb0
 8002cf8:	08009c4c 	.word	0x08009c4c
 8002cfc:	08009c50 	.word	0x08009c50
 8002d00:	08009c58 	.word	0x08009c58
 8002d04:	08009c60 	.word	0x08009c60
 8002d08:	08009c64 	.word	0x08009c64

08002d0c <_ZN4MQTT7setSSIDEPKc>:

void MQTT::setSSID(const char* _ssid){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	ssid = _ssid;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_ZN4MQTT6setPSWEPKc>:

void MQTT::setPSW(const char* _psw){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	psw=_psw;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <_ZN4MQTT13setMQTTServerEPKc>:

void MQTT::setMQTTServer(const char* _broker){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]

	mqqt_server = _broker;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZN4MQTT11setMQTTPortEt>:

void MQTT::setMQTTPort(uint16_t _port){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	000a      	movs	r2, r1
 8002d5e:	1cbb      	adds	r3, r7, #2
 8002d60:	801a      	strh	r2, [r3, #0]
	mqtt_port = _port;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1cba      	adds	r2, r7, #2
 8002d66:	8812      	ldrh	r2, [r2, #0]
 8002d68:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN4MQTT9SubscribeB5cxx11EPKch>:

string MQTT::Subscribe(const char* _topic_in, uint8_t length){	//return a payload of the topic subscribed
 8002d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d74:	46c6      	mov	lr, r8
 8002d76:	b500      	push	{lr}
 8002d78:	b08e      	sub	sp, #56	; 0x38
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6278      	str	r0, [r7, #36]	; 0x24
 8002d7e:	6239      	str	r1, [r7, #32]
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	001a      	movs	r2, r3
 8002d84:	261b      	movs	r6, #27
 8002d86:	19bb      	adds	r3, r7, r6
 8002d88:	701a      	strb	r2, [r3, #0]
			aux[i] = receiveCommand();
			char c = (char)aux[i];
	        msg += c;
	    }
	return msg;
}
 8002d8a:	466b      	mov	r3, sp
 8002d8c:	4698      	mov	r8, r3
	string msg;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	0018      	movs	r0, r3
 8002d92:	f006 f974 	bl	800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	uint8_t aux[length];
 8002d96:	19bb      	adds	r3, r7, r6
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	633a      	str	r2, [r7, #48]	; 0x30
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	2200      	movs	r2, #0
 8002da4:	60fa      	str	r2, [r7, #12]
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	0002      	movs	r2, r0
 8002dac:	0f52      	lsrs	r2, r2, #29
 8002dae:	000e      	movs	r6, r1
 8002db0:	00f6      	lsls	r6, r6, #3
 8002db2:	617e      	str	r6, [r7, #20]
 8002db4:	697e      	ldr	r6, [r7, #20]
 8002db6:	4316      	orrs	r6, r2
 8002db8:	617e      	str	r6, [r7, #20]
 8002dba:	0002      	movs	r2, r0
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	613a      	str	r2, [r7, #16]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	6838      	ldr	r0, [r7, #0]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	0002      	movs	r2, r0
 8002dcc:	0f52      	lsrs	r2, r2, #29
 8002dce:	000e      	movs	r6, r1
 8002dd0:	00f5      	lsls	r5, r6, #3
 8002dd2:	4315      	orrs	r5, r2
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	00d4      	lsls	r4, r2, #3
 8002dd8:	3307      	adds	r3, #7
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	466a      	mov	r2, sp
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	469d      	mov	sp, r3
 8002de4:	466b      	mov	r3, sp
 8002de6:	3300      	adds	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	topic_in = _topic_in;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	619a      	str	r2, [r3, #24]
	sendATcommand(mqtt_commands[MQTTSUB], 0, 1); //LinkId
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	2201      	movs	r2, #1
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f002 fcc7 	bl	800578c <sendATcommand>
	sendCommand(topic_in, sizeof(topic_in));
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2104      	movs	r1, #4
 8002e04:	0018      	movs	r0, r3
 8002e06:	f002 fce3 	bl	80057d0 <sendCommand>
	for(int i = 0; i < length; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0e:	e01c      	b.n	8002e4a <_ZN4MQTT9SubscribeB5cxx11EPKch+0xd8>
			aux[i] = receiveCommand();
 8002e10:	f002 fd08 	bl	8005824 <receiveCommand>
 8002e14:	0003      	movs	r3, r0
 8002e16:	0019      	movs	r1, r3
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	1c0a      	adds	r2, r1, #0
 8002e20:	701a      	strb	r2, [r3, #0]
			char c = (char)aux[i];
 8002e22:	2013      	movs	r0, #19
 8002e24:	2418      	movs	r4, #24
 8002e26:	1903      	adds	r3, r0, r4
 8002e28:	19db      	adds	r3, r3, r7
 8002e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2e:	188a      	adds	r2, r1, r2
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]
	        msg += c;
 8002e34:	1903      	adds	r3, r0, r4
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f006 f974 	bl	800912c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(int i = 0; i < length; i++)
 8002e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e46:	3301      	adds	r3, #1
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4a:	231b      	movs	r3, #27
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbdc      	blt.n	8002e10 <_ZN4MQTT9SubscribeB5cxx11EPKch+0x9e>
	return msg;
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46c5      	mov	sp, r8
}
 8002e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b00e      	add	sp, #56	; 0x38
 8002e60:	bc80      	pop	{r7}
 8002e62:	46b8      	mov	r8, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e66 <_ZN4MQTT7PublishEPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MQTT::Publish(const char* _topic_out, string _payload){ //send a payload to the topic published
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
	topic_out = _topic_out;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	61da      	str	r2, [r3, #28]
	sendATcommand(mqtt_commands[MQTTPUBSTRING], 0, 1); //linkID
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2100      	movs	r1, #0
 8002e80:	0018      	movs	r0, r3
 8002e82:	f002 fc83 	bl	800578c <sendATcommand>
	sendCommand(topic_out, sizeof(topic_out));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f002 fc9f 	bl	80057d0 <sendCommand>
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZN4NodeC1EiiiiiiiiPS_>:

#include "Node.hpp"

// Constructor - initializes the node
//
Node::Node(int sensor_id, int sensor_value, int door_open, int ac_on, int hr, int min, int seg, int isPM, Node* nxt){
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
	id = sensor_id;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	601a      	str	r2, [r3, #0]
	sensorValue = sensor_value;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
	doorOpen = door_open;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	609a      	str	r2, [r3, #8]
	acOn = ac_on;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
	hora = hr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	611a      	str	r2, [r3, #16]
	minuto = min;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	615a      	str	r2, [r3, #20]
	PM = isPM;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed0:	61da      	str	r2, [r3, #28]
	segundo = seg;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	619a      	str	r2, [r3, #24]
	next = nxt;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZN4Node5getIdEv>:

// getVal returns the integer value stored in the node
//
int Node::getId(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
     return id;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN4Node14getSensorValueEv>:

int Node::getSensorValue() {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	return sensorValue;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN4Node11getDoorOpenEv>:
int Node::getDoorOpen() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	return doorOpen;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZN4Node7getAcOnEv>:
int Node::getAcOn() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	return acOn;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZN4Node7getHoraEv>:
int Node::getHora() {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	return hora;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_ZN4Node9getMinutoEv>:
int Node::getMinuto() {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	 return minuto;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZN4Node10getSegundoEv>:
int Node::getSegundo() {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	return segundo;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN4Node5getPMEv>:
int Node::getPM() {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	return PM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN4Node7getNextEv>:
// getNext returns a pointer for the next node in the linked list
//
Node* Node::getNext(){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
     return next;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_ZN4Node7setNextEPS_>:
     PM = isPM;
}

// setNext stores the pointer to the next node in the list in the "next" field
//
void Node::setNext(Node* nxt){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
       next = nxt;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	621a      	str	r2, [r3, #32]
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN6SensorImEC1Ev>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <_ZN6SensorImEC1Ev+0x18>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	08009dc0 	.word	0x08009dc0

08002fd0 <_ZN4RFIDC1EP12GPIO_TypeDeft>:

RFID::RFID() {
}

//Constructor prepare the CS pin for SPI communication
RFID::RFID(GPIO_TypeDef* _csPort, uint16_t _csPin){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff ffe7 	bl	8002fb4 <_ZN6SensorImEC1Ev>
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <_ZN4RFIDC1EP12GPIO_TypeDeft+0x34>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]
    csPort = _csPort;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
    csPin = _csPin;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1dba      	adds	r2, r7, #6
 8002ff6:	8812      	ldrh	r2, [r2, #0]
 8002ff8:	821a      	strh	r2, [r3, #16]
} //End constructor
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	08009db4 	.word	0x08009db4

08003008 <_ZN4RFID18RFID_WriteRegisterEhh>:

/**
 * Writes a uint8_t to the specified register in the RFID chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void RFID::RFID_WriteRegister(uint8_t reg, uint8_t value) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	0008      	movs	r0, r1
 8003012:	0011      	movs	r1, r2
 8003014:	1cfb      	adds	r3, r7, #3
 8003016:	1c02      	adds	r2, r0, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	1cbb      	adds	r3, r7, #2
 800301c:	1c0a      	adds	r2, r1, #0
 800301e:	701a      	strb	r2, [r3, #0]
	GPIO_Output(csPort, csPin, 1); //select rfid sensor
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68d8      	ldr	r0, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8a1b      	ldrh	r3, [r3, #16]
 8003028:	2201      	movs	r2, #1
 800302a:	0019      	movs	r1, r3
 800302c:	f001 f858 	bl	80040e0 <GPIO_Output>
	uint8_t aux = reg & 0x7E;
 8003030:	200f      	movs	r0, #15
 8003032:	183b      	adds	r3, r7, r0
 8003034:	1cfa      	adds	r2, r7, #3
 8003036:	7812      	ldrb	r2, [r2, #0]
 8003038:	217e      	movs	r1, #126	; 0x7e
 800303a:	400a      	ands	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
	SPI_Transfer(aux);// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800303e:	183b      	adds	r3, r7, r0
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	0018      	movs	r0, r3
 8003044:	f002 f9dc 	bl	8005400 <SPI_Transfer>
	SPI_Transfer(value);
 8003048:	1cbb      	adds	r3, r7, #2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	0018      	movs	r0, r3
 800304e:	f002 f9d7 	bl	8005400 <SPI_Transfer>
	GPIO_Output(csPort, csPin, 0); // Release rfid sensor
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68d8      	ldr	r0, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8a1b      	ldrh	r3, [r3, #16]
 800305a:	2200      	movs	r2, #0
 800305c:	0019      	movs	r1, r3
 800305e:	f001 f83f 	bl	80040e0 <GPIO_Output>
} // End RFID_WriteRegister()
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}

0800306a <_ZN4RFID18RFID_WriteRegisterEhhPh>:

void RFID::RFID_WriteRegister(uint8_t reg, uint8_t count, uint8_t *values){
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	0008      	movs	r0, r1
 8003074:	0011      	movs	r1, r2
 8003076:	607b      	str	r3, [r7, #4]
 8003078:	240b      	movs	r4, #11
 800307a:	193b      	adds	r3, r7, r4
 800307c:	1c02      	adds	r2, r0, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	230a      	movs	r3, #10
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	1c0a      	adds	r2, r1, #0
 8003086:	701a      	strb	r2, [r3, #0]
    MX_SPI1_Init(); //calls the init function of spi.h
 8003088:	f002 f90a 	bl	80052a0 <MX_SPI1_Init>
    GPIO_Output(csPort, csPin, 1); //select rfid sensor
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68d8      	ldr	r0, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8a1b      	ldrh	r3, [r3, #16]
 8003094:	2201      	movs	r2, #1
 8003096:	0019      	movs	r1, r3
 8003098:	f001 f822 	bl	80040e0 <GPIO_Output>
    SPI_Transfer(reg & 0x7E);
 800309c:	193b      	adds	r3, r7, r4
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	227e      	movs	r2, #126	; 0x7e
 80030a2:	4013      	ands	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	0018      	movs	r0, r3
 80030a8:	f002 f9aa 	bl	8005400 <SPI_Transfer>
    for (uint8_t index = 0; index < count; index++) {
 80030ac:	2317      	movs	r3, #23
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e00d      	b.n	80030d2 <_ZN4RFID18RFID_WriteRegisterEhhPh+0x68>
		SPI_Transfer(values[index]);
 80030b6:	2417      	movs	r4, #23
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f002 f99c 	bl	8005400 <SPI_Transfer>
    for (uint8_t index = 0; index < count; index++) {
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	3201      	adds	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	2317      	movs	r3, #23
 80030d4:	18fa      	adds	r2, r7, r3
 80030d6:	230a      	movs	r3, #10
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d3e9      	bcc.n	80030b6 <_ZN4RFID18RFID_WriteRegisterEhhPh+0x4c>
	}
	GPIO_Output(csPort, csPin, 0); // Release rfid sensor
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68d8      	ldr	r0, [r3, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8a1b      	ldrh	r3, [r3, #16]
 80030ea:	2200      	movs	r2, #0
 80030ec:	0019      	movs	r1, r3
 80030ee:	f000 fff7 	bl	80040e0 <GPIO_Output>
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b007      	add	sp, #28
 80030f8:	bd90      	pop	{r4, r7, pc}

080030fa <_ZN4RFID17RFID_ReadRegisterEh>:

uint8_t RFID::RFID_ReadRegister(uint8_t reg){
 80030fa:	b5b0      	push	{r4, r5, r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	000a      	movs	r2, r1
 8003104:	1cfb      	adds	r3, r7, #3
 8003106:	701a      	strb	r2, [r3, #0]
		uint8_t value;
	    GPIO_Output(csPort, csPin, 1); //select rfid sensor			// Select slave
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68d8      	ldr	r0, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8a1b      	ldrh	r3, [r3, #16]
 8003110:	2201      	movs	r2, #1
 8003112:	0019      	movs	r1, r3
 8003114:	f000 ffe4 	bl	80040e0 <GPIO_Output>
	    SPI_Transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8003118:	1cfb      	adds	r3, r7, #3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	227e      	movs	r2, #126	; 0x7e
 800311e:	4013      	ands	r3, r2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	4252      	negs	r2, r2
 8003126:	4313      	orrs	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	0018      	movs	r0, r3
 800312c:	f002 f968 	bl	8005400 <SPI_Transfer>
		value = SPI_Transfer(0);					// Read the value back. Send 0 to stop reading.
 8003130:	250f      	movs	r5, #15
 8003132:	197c      	adds	r4, r7, r5
 8003134:	2000      	movs	r0, #0
 8003136:	f002 f963 	bl	8005400 <SPI_Transfer>
 800313a:	0003      	movs	r3, r0
 800313c:	7023      	strb	r3, [r4, #0]
		GPIO_Output(csPort, csPin, 0); // Release rfid sensor
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68d8      	ldr	r0, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8a1b      	ldrh	r3, [r3, #16]
 8003146:	2200      	movs	r2, #0
 8003148:	0019      	movs	r1, r3
 800314a:	f000 ffc9 	bl	80040e0 <GPIO_Output>
		return value;
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bdb0      	pop	{r4, r5, r7, pc}

0800315a <_ZN4RFID17RFID_ReadRegisterEhhPhh>:

void RFID::RFID_ReadRegister(uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign){
 800315a:	b5b0      	push	{r4, r5, r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	0008      	movs	r0, r1
 8003164:	0011      	movs	r1, r2
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	250b      	movs	r5, #11
 800316a:	197b      	adds	r3, r7, r5
 800316c:	1c02      	adds	r2, r0, #0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	240a      	movs	r4, #10
 8003172:	193b      	adds	r3, r7, r4
 8003174:	1c0a      	adds	r2, r1, #0
 8003176:	701a      	strb	r2, [r3, #0]
    if (count == 0) {
 8003178:	193b      	adds	r3, r7, r4
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d100      	bne.n	8003182 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x28>
 8003180:	e0a1      	b.n	80032c6 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x16c>
		return;
	}
	//Serial.print(F("Reading ")); 	Serial.print(count); Serial.println(F(" uint8_ts from register."));
	uint8_t address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8003182:	197b      	adds	r3, r7, r5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	227e      	movs	r2, #126	; 0x7e
 8003188:	4013      	ands	r3, r2
 800318a:	b2da      	uxtb	r2, r3
 800318c:	2514      	movs	r5, #20
 800318e:	197b      	adds	r3, r7, r5
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	4249      	negs	r1, r1
 8003194:	430a      	orrs	r2, r1
 8003196:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0;							// Index in values array.
 8003198:	2317      	movs	r3, #23
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    GPIO_Output(csPort, csPin, 1);          //select rfid sensor
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68d8      	ldr	r0, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8a1b      	ldrh	r3, [r3, #16]
 80031a8:	2201      	movs	r2, #1
 80031aa:	0019      	movs	r1, r3
 80031ac:	f000 ff98 	bl	80040e0 <GPIO_Output>
	count--;								// One read is performed outside of the loop
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	3a01      	subs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
	SPI_Transfer(address);					// Tell RFID which address we want to read
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	0018      	movs	r0, r3
 80031c0:	f002 f91e 	bl	8005400 <SPI_Transfer>
	while (index < count) {
 80031c4:	e065      	b.n	8003292 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x138>
		if (index == 0 && rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
 80031c6:	2317      	movs	r3, #23
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d14d      	bne.n	800326c <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x112>
 80031d0:	2128      	movs	r1, #40	; 0x28
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d048      	beq.n	800326c <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x112>
			// Create bit mask for bit positions rxAlign..7
			uint8_t mask = 0;
 80031da:	2316      	movs	r3, #22
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = rxAlign; i <= 7; i++) {
 80031e2:	2315      	movs	r3, #21
 80031e4:	18fa      	adds	r2, r7, r3
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	7013      	strb	r3, [r2, #0]
 80031ec:	e013      	b.n	8003216 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0xbc>
				mask |= (1 << i);
 80031ee:	2115      	movs	r1, #21
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	b25a      	sxtb	r2, r3
 80031fc:	2016      	movs	r0, #22
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b25a      	sxtb	r2, r3
 8003208:	183b      	adds	r3, r7, r0
 800320a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = rxAlign; i <= 7; i++) {
 800320c:	187b      	adds	r3, r7, r1
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	187b      	adds	r3, r7, r1
 8003212:	3201      	adds	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	2315      	movs	r3, #21
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b07      	cmp	r3, #7
 800321e:	d9e6      	bls.n	80031ee <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x94>
			}
			// Read value and tell that we want to read the same address again.
			uint8_t value = SPI_Transfer(address);
 8003220:	2513      	movs	r5, #19
 8003222:	197c      	adds	r4, r7, r5
 8003224:	2314      	movs	r3, #20
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	0018      	movs	r0, r3
 800322c:	f002 f8e8 	bl	8005400 <SPI_Transfer>
 8003230:	0003      	movs	r3, r0
 8003232:	7023      	strb	r3, [r4, #0]
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
 8003234:	2317      	movs	r3, #23
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	18d3      	adds	r3, r2, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b25b      	sxtb	r3, r3
 8003242:	2116      	movs	r1, #22
 8003244:	187a      	adds	r2, r7, r1
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	b252      	sxtb	r2, r2
 800324a:	43d2      	mvns	r2, r2
 800324c:	b252      	sxtb	r2, r2
 800324e:	4013      	ands	r3, r2
 8003250:	b25a      	sxtb	r2, r3
 8003252:	197b      	adds	r3, r7, r5
 8003254:	1879      	adds	r1, r7, r1
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	7809      	ldrb	r1, [r1, #0]
 800325a:	400b      	ands	r3, r1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	b25b      	sxtb	r3, r3
 8003260:	4313      	orrs	r3, r2
 8003262:	b25b      	sxtb	r3, r3
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	701a      	strb	r2, [r3, #0]
		}
 800326a:	e00c      	b.n	8003286 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x12c>
		else { // Normal case
			values[index] = SPI_Transfer(address);	// Read value and tell that we want to read the same address again.
 800326c:	2317      	movs	r3, #23
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	18d4      	adds	r4, r2, r3
 8003276:	2314      	movs	r3, #20
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	0018      	movs	r0, r3
 800327e:	f002 f8bf 	bl	8005400 <SPI_Transfer>
 8003282:	0003      	movs	r3, r0
 8003284:	7023      	strb	r3, [r4, #0]
		}
		index++;
 8003286:	2117      	movs	r1, #23
 8003288:	187b      	adds	r3, r7, r1
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	187b      	adds	r3, r7, r1
 800328e:	3201      	adds	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
	while (index < count) {
 8003292:	2117      	movs	r1, #23
 8003294:	187a      	adds	r2, r7, r1
 8003296:	230a      	movs	r3, #10
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d391      	bcc.n	80031c6 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x6c>
	}
	values[index] = SPI_Transfer(0);			// Read the final uint8_t. Send 0 to stop reading.
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	18d4      	adds	r4, r2, r3
 80032aa:	2000      	movs	r0, #0
 80032ac:	f002 f8a8 	bl	8005400 <SPI_Transfer>
 80032b0:	0003      	movs	r3, r0
 80032b2:	7023      	strb	r3, [r4, #0]
	GPIO_Output(csPort, csPin, 0);              // Release rfid sensor
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68d8      	ldr	r0, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8a1b      	ldrh	r3, [r3, #16]
 80032bc:	2200      	movs	r2, #0
 80032be:	0019      	movs	r1, r3
 80032c0:	f000 ff0e 	bl	80040e0 <GPIO_Output>
 80032c4:	e000      	b.n	80032c8 <_ZN4RFID17RFID_ReadRegisterEhhPhh+0x16e>
		return;
 80032c6:	46c0      	nop			; (mov r8, r8)
}
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b006      	add	sp, #24
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}

080032ce <_ZN4RFID23RFID_SetRegisterBitMaskEhh>:

void RFID::RFID_SetRegisterBitMask(	uint8_t reg, uint8_t mask) {
 80032ce:	b5b0      	push	{r4, r5, r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	0008      	movs	r0, r1
 80032d8:	0011      	movs	r1, r2
 80032da:	1cfb      	adds	r3, r7, #3
 80032dc:	1c02      	adds	r2, r0, #0
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	1cbb      	adds	r3, r7, #2
 80032e2:	1c0a      	adds	r2, r1, #0
 80032e4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = RFID_ReadRegister(reg);
 80032e6:	250f      	movs	r5, #15
 80032e8:	197c      	adds	r4, r7, r5
 80032ea:	1cfb      	adds	r3, r7, #3
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0011      	movs	r1, r2
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff ff01 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 80032f8:	0003      	movs	r3, r0
 80032fa:	7023      	strb	r3, [r4, #0]
	RFID_WriteRegister(reg, tmp | mask);			// set bit mask
 80032fc:	197a      	adds	r2, r7, r5
 80032fe:	1cbb      	adds	r3, r7, #2
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	b2da      	uxtb	r2, r3
 8003308:	1cfb      	adds	r3, r7, #3
 800330a:	7819      	ldrb	r1, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff fe7a 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
} // End RFID_SetRegisterBitMask()
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bdb0      	pop	{r4, r5, r7, pc}

0800331c <_ZN4RFID25RFID_ClearRegisterBitMaskEhh>:

void RFID::RFID_ClearRegisterBitMask(uint8_t reg, uint8_t mask){
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	0008      	movs	r0, r1
 8003326:	0011      	movs	r1, r2
 8003328:	1cfb      	adds	r3, r7, #3
 800332a:	1c02      	adds	r2, r0, #0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	1c0a      	adds	r2, r1, #0
 8003332:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = RFID_ReadRegister(reg);
 8003334:	250f      	movs	r5, #15
 8003336:	197c      	adds	r4, r7, r5
 8003338:	1cfb      	adds	r3, r7, #3
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff feda 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 8003346:	0003      	movs	r3, r0
 8003348:	7023      	strb	r3, [r4, #0]
	RFID_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 800334a:	1cbb      	adds	r3, r7, #2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b25b      	sxtb	r3, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	b25b      	sxtb	r3, r3
 8003354:	197a      	adds	r2, r7, r5
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	b252      	sxtb	r2, r2
 800335a:	4013      	ands	r3, r2
 800335c:	b25b      	sxtb	r3, r3
 800335e:	b2da      	uxtb	r2, r3
 8003360:	1cfb      	adds	r3, r7, #3
 8003362:	7819      	ldrb	r1, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f7ff fe4e 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bdb0      	pop	{r4, r5, r7, pc}

08003374 <_ZN4RFID17RFID_CalculateCRCEPhhS0_>:

RFID::StatusCode RFID::RFID_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result){
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	701a      	strb	r2, [r3, #0]

	RFID_WriteRegister(CommandReg, RFID_Idle);			// Stop any active command.
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	2102      	movs	r1, #2
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff fe3c 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2204      	movs	r2, #4
 8003394:	210a      	movs	r1, #10
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fe36 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	2114      	movs	r1, #20
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff ff93 	bl	80032ce <_ZN4RFID23RFID_SetRegisterBitMaskEhh>
	RFID_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	000b      	movs	r3, r1
 80033b2:	2112      	movs	r1, #18
 80033b4:	f7ff fe59 	bl	800306a <_ZN4RFID18RFID_WriteRegisterEhhPh>
	RFID_WriteRegister(CommandReg, RFID_CalcCRC);		// Start the calculation
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2203      	movs	r2, #3
 80033bc:	2102      	movs	r1, #2
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff fe22 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	uint16_t i = 5000;
 80033c4:	2316      	movs	r3, #22
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <_ZN4RFID17RFID_CalculateCRCEPhhS0_+0xd0>)
 80033ca:	801a      	strh	r2, [r3, #0]
	uint8_t n;
	while (1) {
		n = RFID_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
 80033cc:	2515      	movs	r5, #21
 80033ce:	197c      	adds	r4, r7, r5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	210a      	movs	r1, #10
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fe90 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 80033da:	0003      	movs	r3, r0
 80033dc:	7023      	strb	r3, [r4, #0]
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80033de:	197b      	adds	r3, r7, r5
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2204      	movs	r2, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d10e      	bne.n	8003406 <_ZN4RFID17RFID_CalculateCRCEPhhS0_+0x92>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the RFID might be down.
 80033e8:	2116      	movs	r1, #22
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	187a      	adds	r2, r7, r1
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	3a01      	subs	r2, #1
 80033f2:	801a      	strh	r2, [r3, #0]
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	425a      	negs	r2, r3
 80033fa:	4153      	adcs	r3, r2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0e4      	beq.n	80033cc <_ZN4RFID17RFID_CalculateCRCEPhhS0_+0x58>
			return STATUS_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e019      	b.n	800343a <_ZN4RFID17RFID_CalculateCRCEPhhS0_+0xc6>
			break;
 8003406:	46c0      	nop			; (mov r8, r8)
		}
	}
	RFID_WriteRegister(CommandReg, RFID_Idle);		// Stop calculating CRC for new content in the FIFO.
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	2102      	movs	r1, #2
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff fdfa 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = RFID_ReadRegister(CRCResultRegL);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2144      	movs	r1, #68	; 0x44
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff fe6e 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 800341e:	0003      	movs	r3, r0
 8003420:	001a      	movs	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	701a      	strb	r2, [r3, #0]
	result[1] = RFID_ReadRegister(CRCResultRegH);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	1c5c      	adds	r4, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2142      	movs	r1, #66	; 0x42
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff fe63 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 8003434:	0003      	movs	r3, r0
 8003436:	7023      	strb	r3, [r4, #0]
	return STATUS_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b006      	add	sp, #24
 8003440:	bdb0      	pop	{r4, r5, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	00001388 	.word	0x00001388

08003448 <_ZN4RFID9RFID_InitEv>:

void RFID::RFID_Init(){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	setID(1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2101      	movs	r1, #1
 8003454:	0018      	movs	r0, r3
 8003456:	f000 fd6c 	bl	8003f32 <_ZN6SensorImE5setIDEi>
	MX_GPIO_Init();
 800345a:	f000 fd81 	bl	8003f60 <MX_GPIO_Init>
	GPIO_Output(csPort, csPin, 1); //select rfid sensor
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68d8      	ldr	r0, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8a1b      	ldrh	r3, [r3, #16]
 8003466:	2201      	movs	r2, #1
 8003468:	0019      	movs	r1, r3
 800346a:	f000 fe39 	bl	80040e0 <GPIO_Output>

	RFID_Reset(); //soft reset
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f82c 	bl	80034ce <_ZN4RFID10RFID_ResetEv>

	// When communicating with a RFID we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	RFID_WriteRegister(TModeReg, 0x80);	// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	2154      	movs	r1, #84	; 0x54
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fdc3 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(TPrescalerReg, 0xA9);// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	22a9      	movs	r2, #169	; 0xa9
 8003486:	2156      	movs	r1, #86	; 0x56
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fdbd 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(TReloadRegH, 0x03);// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	2158      	movs	r1, #88	; 0x58
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff fdb7 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(TReloadRegL, 0xE8);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	22e8      	movs	r2, #232	; 0xe8
 800349e:	215a      	movs	r1, #90	; 0x5a
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fdb1 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>

	RFID_WriteRegister(TxASKReg, 0x40);	// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	212a      	movs	r1, #42	; 0x2a
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff fdab 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(ModeReg, 0x3D);// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2122      	movs	r1, #34	; 0x22
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fda5 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_AntennaOn();
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f825 	bl	8003510 <_ZN4RFID14RFID_AntennaOnEv>
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZN4RFID10RFID_ResetEv>:
    csPin = _csPin;
	RFID_Init();
}


void RFID::RFID_Reset() {
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
	RFID_WriteRegister(CommandReg, RFID_SoftReset);	// Issue the SoftReset command.
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	220f      	movs	r2, #15
 80034da:	2102      	movs	r1, #2
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fd93 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the RFID might have been in soft power-down mode (triggered by bit 4 of CommandReg)
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	HAL_Delay(50);
 80034e2:	2032      	movs	r0, #50	; 0x32
 80034e4:	f002 fa40 	bl	8005968 <HAL_Delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (RFID_ReadRegister(CommandReg) & (1<<4)) {
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2102      	movs	r1, #2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff fe03 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 80034f4:	0003      	movs	r3, r0
 80034f6:	001a      	movs	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	4013      	ands	r3, r2
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	4193      	sbcs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f1      	bne.n	80034ea <_ZN4RFID10RFID_ResetEv+0x1c>
		// RFID still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End RFID_Reset()
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZN4RFID14RFID_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void RFID::RFID_AntennaOn() {
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	uint8_t value = RFID_ReadRegister(TxControlReg);
 8003518:	250f      	movs	r5, #15
 800351a:	197c      	adds	r4, r7, r5
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2128      	movs	r1, #40	; 0x28
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff fdea 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 8003526:	0003      	movs	r3, r0
 8003528:	7023      	strb	r3, [r4, #0]
	if ((value & 0x03) != 0x03) {
 800352a:	197b      	adds	r3, r7, r5
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2203      	movs	r2, #3
 8003530:	4013      	ands	r3, r2
 8003532:	2b03      	cmp	r3, #3
 8003534:	d009      	beq.n	800354a <_ZN4RFID14RFID_AntennaOnEv+0x3a>
		RFID_WriteRegister(TxControlReg, value | 0x03);
 8003536:	197b      	adds	r3, r7, r5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2203      	movs	r2, #3
 800353c:	4313      	orrs	r3, r2
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2128      	movs	r1, #40	; 0x28
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff fd5f 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	}
} // End RFID_AntennaOn()
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bdb0      	pop	{r4, r5, r7, pc}

08003552 <_ZN4RFID19RFID_TransceiveDataEPhhS0_S0_S0_hb>:
													uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
													uint8_t *backLen,		///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
													uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits. Default NULL.
													uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													bool checkCRC		///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
								 ) {
 8003552:	b580      	push	{r7, lr}
 8003554:	b08c      	sub	sp, #48	; 0x30
 8003556:	af06      	add	r7, sp, #24
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	701a      	strb	r2, [r3, #0]
	uint8_t waitIRq = 0x30;		// RxIRq and IdleIRq
 8003562:	2017      	movs	r0, #23
 8003564:	183b      	adds	r3, r7, r0
 8003566:	2230      	movs	r2, #48	; 0x30
 8003568:	701a      	strb	r2, [r3, #0]
	return RFID_CommunicateWithPICC(RFID_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	183b      	adds	r3, r7, r0
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	232c      	movs	r3, #44	; 0x2c
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	9305      	str	r3, [sp, #20]
 800357a:	2328      	movs	r3, #40	; 0x28
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	000b      	movs	r3, r1
 8003596:	210c      	movs	r1, #12
 8003598:	f000 f805 	bl	80035a6 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
 800359c:	0003      	movs	r3, r0
} // End RFID_TransceiveData()
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b006      	add	sp, #24
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
														uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
														uint8_t *backLen,		///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
														uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
														uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														bool checkCRC		///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80035a6:	b5b0      	push	{r4, r5, r7, lr}
 80035a8:	b08a      	sub	sp, #40	; 0x28
 80035aa:	af02      	add	r7, sp, #8
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	0008      	movs	r0, r1
 80035b0:	0011      	movs	r1, r2
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	230b      	movs	r3, #11
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	1c02      	adds	r2, r0, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	230a      	movs	r3, #10
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	1c0a      	adds	r2, r1, #0
 80035c2:	701a      	strb	r2, [r3, #0]
	uint8_t n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	e000      	b.n	80035d2 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2c>
 80035d0:	2200      	movs	r2, #0
 80035d2:	2017      	movs	r0, #23
 80035d4:	183b      	adds	r3, r7, r0
 80035d6:	701a      	strb	r2, [r3, #0]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80035d8:	2340      	movs	r3, #64	; 0x40
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	b2d9      	uxtb	r1, r3
 80035e2:	2416      	movs	r4, #22
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	183a      	adds	r2, r7, r0
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	188a      	adds	r2, r1, r2
 80035ec:	701a      	strb	r2, [r3, #0]

	RFID_WriteRegister(CommandReg, RFID_Idle);			// Stop any active command.
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2102      	movs	r1, #2
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fd07 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	227f      	movs	r2, #127	; 0x7f
 80035fe:	2108      	movs	r1, #8
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fd01 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_SetRegisterBitMask(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	2114      	movs	r1, #20
 800360c:	0018      	movs	r0, r3
 800360e:	f7ff fe5e 	bl	80032ce <_ZN4RFID23RFID_SetRegisterBitMaskEhh>
	RFID_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	2330      	movs	r3, #48	; 0x30
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	000b      	movs	r3, r1
 800361e:	2112      	movs	r1, #18
 8003620:	f7ff fd23 	bl	800306a <_ZN4RFID18RFID_WriteRegisterEhhPh>
	RFID_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 8003624:	193b      	adds	r3, r7, r4
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	211a      	movs	r1, #26
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff fceb 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(CommandReg, command);				// Execute the command
 8003632:	240b      	movs	r4, #11
 8003634:	193b      	adds	r3, r7, r4
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2102      	movs	r1, #2
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff fce3 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	if (command == RFID_Transceive) {
 8003642:	193b      	adds	r3, r7, r4
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d105      	bne.n	8003656 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
		RFID_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	211a      	movs	r1, #26
 8003650:	0018      	movs	r0, r3
 8003652:	f7ff fe3c 	bl	80032ce <_ZN4RFID23RFID_SetRegisterBitMaskEhh>
	}

	// Wait for the command to complete.
	// In RFID_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the RFID stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
 8003656:	23fa      	movs	r3, #250	; 0xfa
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	61bb      	str	r3, [r7, #24]
	while (1) {
		n = RFID_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 800365c:	2515      	movs	r5, #21
 800365e:	197c      	adds	r4, r7, r5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2108      	movs	r1, #8
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff fd48 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 800366a:	0003      	movs	r3, r0
 800366c:	7023      	strb	r3, [r4, #0]
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 800366e:	0029      	movs	r1, r5
 8003670:	187b      	adds	r3, r7, r1
 8003672:	220a      	movs	r2, #10
 8003674:	18ba      	adds	r2, r7, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	4013      	ands	r3, r2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d111      	bne.n	80036a6 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 8003682:	187b      	adds	r3, r7, r1
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d001      	beq.n	8003690 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xea>
			return STATUS_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0ac      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
		if (--i == 0) {						// The emergency break. If all other conditions fail we will eventually terminate on this one after 35.7ms. Communication with the RFID might be down.
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	3b01      	subs	r3, #1
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	425a      	negs	r2, r3
 800369a:	4153      	adcs	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0dc      	beq.n	800365c <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb6>
			return STATUS_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0a1      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
			break;
 80036a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = RFID_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
 80036a8:	2514      	movs	r5, #20
 80036aa:	197c      	adds	r4, r7, r5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	210c      	movs	r1, #12
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7ff fd22 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 80036b6:	0003      	movs	r3, r0
 80036b8:	7023      	strb	r3, [r4, #0]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80036ba:	197b      	adds	r3, r7, r5
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2213      	movs	r2, #19
 80036c0:	4013      	ands	r3, r2
 80036c2:	d001      	beq.n	80036c8 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x122>
		return STATUS_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e090      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
	}

	// If the caller wants data back, get it from the RFID.
	if (backData && backLen) {
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d037      	beq.n	800373e <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d034      	beq.n	800373e <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
		n = RFID_ReadRegister(FIFOLevelReg);			// Number of uint8_ts in the FIFO
 80036d4:	2515      	movs	r5, #21
 80036d6:	197c      	adds	r4, r7, r5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2114      	movs	r1, #20
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff fd0c 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 80036e2:	0003      	movs	r3, r0
 80036e4:	7023      	strb	r3, [r4, #0]
		if (n > *backLen) {
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	197a      	adds	r2, r7, r5
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d901      	bls.n	80036f6 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return STATUS_NO_ROOM;
 80036f2:	2304      	movs	r3, #4
 80036f4:	e079      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
		*backLen = n;											// Number of uint8_ts returned
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2015      	movs	r0, #21
 80036fa:	183a      	adds	r2, r7, r0
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	701a      	strb	r2, [r3, #0]
		RFID_ReadRegister(FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
 8003700:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003702:	183b      	adds	r3, r7, r0
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	2340      	movs	r3, #64	; 0x40
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	000b      	movs	r3, r1
 8003712:	2112      	movs	r1, #18
 8003714:	f7ff fd21 	bl	800315a <_ZN4RFID17RFID_ReadRegisterEhhPhh>
		_validBits = RFID_ReadRegister(ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2118      	movs	r1, #24
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff fcec 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 8003722:	0003      	movs	r3, r0
 8003724:	0019      	movs	r1, r3
 8003726:	201f      	movs	r0, #31
 8003728:	183b      	adds	r3, r7, r0
 800372a:	2207      	movs	r2, #7
 800372c:	400a      	ands	r2, r1
 800372e:	701a      	strb	r2, [r3, #0]
		if (validBits) {
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
			*validBits = _validBits;
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	183a      	adds	r2, r7, r0
 800373a:	7812      	ldrb	r2, [r2, #0]
 800373c:	701a      	strb	r2, [r3, #0]
		}
	}

	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
 800373e:	2314      	movs	r3, #20
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2208      	movs	r2, #8
 8003746:	4013      	ands	r3, r2
 8003748:	d001      	beq.n	800374e <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a8>
		return STATUS_COLLISION;
 800374a:	2302      	movs	r3, #2
 800374c:	e04d      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
	}

	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d049      	beq.n	80037e8 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x242>
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d046      	beq.n	80037e8 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x242>
 800375a:	2344      	movs	r3, #68	; 0x44
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d041      	beq.n	80037e8 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x242>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d4>
 800376c:	231f      	movs	r3, #31
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d101      	bne.n	800377a <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1d4>
			return STATUS_MIFARE_NACK;
 8003776:	23ff      	movs	r3, #255	; 0xff
 8003778:	e037      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d904      	bls.n	800378c <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1e6>
 8003782:	231f      	movs	r3, #31
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ea>
			return STATUS_CRC_WRONG;
 800378c:	2307      	movs	r3, #7
 800378e:	e02c      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		RFID::StatusCode status = RFID_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	3b02      	subs	r3, #2
 8003796:	b2da      	uxtb	r2, r3
 8003798:	2513      	movs	r5, #19
 800379a:	197c      	adds	r4, r7, r5
 800379c:	2310      	movs	r3, #16
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fde6 	bl	8003374 <_ZN4RFID17RFID_CalculateCRCEPhhS0_>
 80037a8:	0003      	movs	r3, r0
 80037aa:	7023      	strb	r3, [r4, #0]
		if (status != STATUS_OK) {
 80037ac:	197b      	adds	r3, r7, r5
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x214>
			return status;
 80037b4:	197b      	adds	r3, r7, r5
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	e017      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	3b02      	subs	r3, #2
 80037c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c2:	18d3      	adds	r3, r2, r3
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	2110      	movs	r1, #16
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d109      	bne.n	80037e4 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x23e>
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	785b      	ldrb	r3, [r3, #1]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x242>
			return STATUS_CRC_WRONG;
 80037e4:	2307      	movs	r3, #7
 80037e6:	e000      	b.n	80037ea <_ZN4RFID24RFID_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x244>
		}
	}
	return STATUS_OK;
 80037e8:	2300      	movs	r3, #0
} // End RFID_CommunicateWithRFID()
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b008      	add	sp, #32
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}

080037f2 <_ZN4RFID13RFID_RequestAEPhS0_>:
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
RFID::StatusCode RFID::RFID_RequestA(uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											uint8_t *bufferSize	///< Buffer size, at least two uint8_ts. Also number of uint8_ts returned if STATUS_OK.
										) {
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
	return RFID_REQA_or_WUPA(RFID_CMD_REQA, bufferATQA, bufferSize);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	2126      	movs	r1, #38	; 0x26
 8003806:	f000 f805 	bl	8003814 <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_>
 800380a:	0003      	movs	r3, r0
} // End RFID_RequestA()
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_>:
 * Transmits REQA or WUPA commands.
 * Beware: When two RFIDs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
RFID::StatusCode RFID::RFID_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize) {
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	b08b      	sub	sp, #44	; 0x2c
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	230b      	movs	r3, #11
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	1c0a      	adds	r2, r1, #0
 8003826:	701a      	strb	r2, [r3, #0]
	uint8_t validBits;
	RFID::StatusCode status;

	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 uint8_ts long.
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x22>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d801      	bhi.n	800383a <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x26>
		return STATUS_NO_ROOM;
 8003836:	2304      	movs	r3, #4
 8003838:	e030      	b.n	800389c <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x88>
	}
	RFID_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	211c      	movs	r1, #28
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fd6b 	bl	800331c <_ZN4RFID25RFID_ClearRegisterBitMaskEhh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 8003846:	2616      	movs	r6, #22
 8003848:	19bb      	adds	r3, r7, r6
 800384a:	2207      	movs	r2, #7
 800384c:	701a      	strb	r2, [r3, #0]
	status = RFID_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 800384e:	2517      	movs	r5, #23
 8003850:	197c      	adds	r4, r7, r5
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	230b      	movs	r3, #11
 8003856:	18f9      	adds	r1, r7, r3
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	2300      	movs	r3, #0
 800385c:	9303      	str	r3, [sp, #12]
 800385e:	2300      	movs	r3, #0
 8003860:	9302      	str	r3, [sp, #8]
 8003862:	19bb      	adds	r3, r7, r6
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	0013      	movs	r3, r2
 800386c:	2201      	movs	r2, #1
 800386e:	f7ff fe70 	bl	8003552 <_ZN4RFID19RFID_TransceiveDataEPhhS0_S0_S0_hb>
 8003872:	0003      	movs	r3, r0
 8003874:	7023      	strb	r3, [r4, #0]
	if (status != STATUS_OK) {
 8003876:	197b      	adds	r3, r7, r5
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x70>
		return status;
 800387e:	197b      	adds	r3, r7, r5
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	e00b      	b.n	800389c <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x88>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d104      	bne.n	8003896 <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x82>
 800388c:	2316      	movs	r3, #22
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x86>
		return STATUS_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <_ZN4RFID17RFID_REQA_or_WUPAEhPhS0_+0x88>
	}
	return STATUS_OK;
 800389a:	2300      	movs	r3, #0
} // End RFID_REQA_or_WUPA()
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b007      	add	sp, #28
 80038a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038a4 <_ZN4RFID11RFID_SelectEPNS_3UidEh>:
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
RFID::StatusCode RFID::RFID_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											uint8_t validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	b093      	sub	sp, #76	; 0x4c
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	701a      	strb	r2, [r3, #0]
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	uint8_t cascadeLevel = 1;
 80038b2:	2334      	movs	r3, #52	; 0x34
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
	//		10 uint8_ts		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9

	// Sanity checks
	if (validBits > 80) {
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b50      	cmp	r3, #80	; 0x50
 80038c0:	d901      	bls.n	80038c6 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x22>
		return STATUS_INVALID;
 80038c2:	2306      	movs	r3, #6
 80038c4:	e2c1      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
	}

	// Prepare RFID
	RFID_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	211c      	movs	r1, #28
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff fd25 	bl	800331c <_ZN4RFID25RFID_ClearRegisterBitMaskEhh>

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
 80038d2:	2337      	movs	r3, #55	; 0x37
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
	while (!uidComplete) {
 80038da:	e2a1      	b.n	8003e20 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x57c>
		// Set the Cascade Level in the SEL uint8_t, find out if we need to use the Cascade Tag in uint8_t 2.
		switch (cascadeLevel) {
 80038dc:	2334      	movs	r3, #52	; 0x34
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d033      	beq.n	800394e <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xaa>
 80038e6:	dc3f      	bgt.n	8003968 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xc4>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x4e>
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d017      	beq.n	8003920 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x7c>
 80038f0:	e03a      	b.n	8003968 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xc4>
			case 1:
				buffer[0] = RFID_CMD_SEL_CL1;
 80038f2:	2318      	movs	r3, #24
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2293      	movs	r2, #147	; 0x93
 80038f8:	701a      	strb	r2, [r3, #0]
				uidIndex = 0;
 80038fa:	2331      	movs	r3, #49	; 0x31
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 uint8_ts
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x72>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d901      	bls.n	8003916 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x72>
 8003912:	2201      	movs	r2, #1
 8003914:	e000      	b.n	8003918 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x74>
 8003916:	2200      	movs	r2, #0
 8003918:	2335      	movs	r3, #53	; 0x35
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	701a      	strb	r2, [r3, #0]
				break;
 800391e:	e025      	b.n	800396c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xc8>

			case 2:
				buffer[0] = RFID_CMD_SEL_CL2;
 8003920:	2318      	movs	r3, #24
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2295      	movs	r2, #149	; 0x95
 8003926:	701a      	strb	r2, [r3, #0]
				uidIndex = 3;
 8003928:	2331      	movs	r3, #49	; 0x31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2203      	movs	r2, #3
 800392e:	701a      	strb	r2, [r3, #0]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 uint8_ts
 8003930:	1dfb      	adds	r3, r7, #7
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xa0>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d901      	bls.n	8003944 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xa0>
 8003940:	2201      	movs	r2, #1
 8003942:	e000      	b.n	8003946 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xa2>
 8003944:	2200      	movs	r2, #0
 8003946:	2335      	movs	r3, #53	; 0x35
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	701a      	strb	r2, [r3, #0]
				break;
 800394c:	e00e      	b.n	800396c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xc8>

			case 3:
				buffer[0] = RFID_CMD_SEL_CL3;
 800394e:	2318      	movs	r3, #24
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2297      	movs	r2, #151	; 0x97
 8003954:	701a      	strb	r2, [r3, #0]
				uidIndex = 6;
 8003956:	2331      	movs	r3, #49	; 0x31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2206      	movs	r2, #6
 800395c:	701a      	strb	r2, [r3, #0]
				useCascadeTag = false;						// Never used in CL3.
 800395e:	2335      	movs	r3, #53	; 0x35
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
				break;
 8003966:	e001      	b.n	800396c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xc8>

			default:
				return STATUS_INTERNAL_ERROR;
 8003968:	2305      	movs	r3, #5
 800396a:	e26e      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
				break;
		}

		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 800396c:	2331      	movs	r3, #49	; 0x31
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	1dfa      	adds	r2, r7, #7
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	b2da      	uxtb	r2, r3
 800397e:	2130      	movs	r1, #48	; 0x30
 8003980:	187b      	adds	r3, r7, r1
 8003982:	701a      	strb	r2, [r3, #0]
		if (currentLevelKnownBits < 0) {
 8003984:	000a      	movs	r2, r1
 8003986:	18bb      	adds	r3, r7, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b7f      	cmp	r3, #127	; 0x7f
 800398c:	d902      	bls.n	8003994 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0xf0>
			currentLevelKnownBits = 0;
 800398e:	18bb      	adds	r3, r7, r2
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
		}
		// Copy the known bits from uid->uiduint8_t[] to buffer[]
		index = 2; // destination index in buffer[]
 8003994:	2132      	movs	r1, #50	; 0x32
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]
		if (useCascadeTag) {
 800399c:	2335      	movs	r3, #53	; 0x35
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x116>
			buffer[index++] = RFID_CMD_CT;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	187a      	adds	r2, r7, r1
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	7011      	strb	r1, [r2, #0]
 80039b0:	001a      	movs	r2, r3
 80039b2:	2318      	movs	r3, #24
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2188      	movs	r1, #136	; 0x88
 80039b8:	5499      	strb	r1, [r3, r2]
		}
		uint8_t bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of uint8_ts needed to represent the known bits for this level.
 80039ba:	2330      	movs	r3, #48	; 0x30
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da00      	bge.n	80039c8 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x124>
 80039c6:	3307      	adds	r3, #7
 80039c8:	10db      	asrs	r3, r3, #3
 80039ca:	b25b      	sxtb	r3, r3
 80039cc:	b2d9      	uxtb	r1, r3
 80039ce:	2330      	movs	r3, #48	; 0x30
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2207      	movs	r2, #7
 80039d6:	4013      	ands	r3, r2
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x13e>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x140>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2027      	movs	r0, #39	; 0x27
 80039e6:	183a      	adds	r2, r7, r0
 80039e8:	185b      	adds	r3, r3, r1
 80039ea:	7013      	strb	r3, [r2, #0]
		if (bytesToCopy) {
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03b      	beq.n	8003a6c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x1c8>
			uint8_t maxBytes = useCascadeTag ? 3 : 4; // Max 4 uint8_ts in each Cascade Level. Only 3 left if we use the Cascade Tag
 80039f4:	2335      	movs	r3, #53	; 0x35
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x15e>
 80039fe:	2203      	movs	r2, #3
 8003a00:	e000      	b.n	8003a04 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x160>
 8003a02:	2204      	movs	r2, #4
 8003a04:	2125      	movs	r1, #37	; 0x25
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	701a      	strb	r2, [r3, #0]
			if (bytesToCopy > maxBytes) {
 8003a0a:	2027      	movs	r0, #39	; 0x27
 8003a0c:	183a      	adds	r2, r7, r0
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d903      	bls.n	8003a20 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x17c>
				bytesToCopy = maxBytes;
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	187a      	adds	r2, r7, r1
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
			}
			for (count = 0; count < bytesToCopy; count++) {
 8003a20:	2333      	movs	r3, #51	; 0x33
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e018      	b.n	8003a5c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x1b8>
				buffer[index++] = uid->uidByte[uidIndex + count];
 8003a2a:	2331      	movs	r3, #49	; 0x31
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	781a      	ldrb	r2, [r3, #0]
 8003a30:	2433      	movs	r4, #51	; 0x33
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	18d2      	adds	r2, r2, r3
 8003a38:	2132      	movs	r1, #50	; 0x32
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	1879      	adds	r1, r7, r1
 8003a40:	1c58      	adds	r0, r3, #1
 8003a42:	7008      	strb	r0, [r1, #0]
 8003a44:	0019      	movs	r1, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	785a      	ldrb	r2, [r3, #1]
 8003a4c:	2318      	movs	r3, #24
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	545a      	strb	r2, [r3, r1]
			for (count = 0; count < bytesToCopy; count++) {
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	3201      	adds	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	2333      	movs	r3, #51	; 0x33
 8003a5e:	18fa      	adds	r2, r7, r3
 8003a60:	2327      	movs	r3, #39	; 0x27
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3de      	bcc.n	8003a2a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x186>
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 8003a6c:	2335      	movs	r3, #53	; 0x35
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x1e0>
			currentLevelKnownBits += 8;
 8003a76:	2130      	movs	r1, #48	; 0x30
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	701a      	strb	r2, [r3, #0]
		}

		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
 8003a84:	2336      	movs	r3, #54	; 0x36
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
		while (!selectDone) {
 8003a8c:	e13d      	b.n	8003d0a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x466>
			// Find out how many bits and uint8_ts to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 8003a8e:	2330      	movs	r3, #48	; 0x30
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	2b1f      	cmp	r3, #31
 8003a98:	dd36      	ble.n	8003b08 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x264>
				//Serial.print(F("SELECT: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole uint8_ts
 8003a9a:	2118      	movs	r1, #24
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2270      	movs	r2, #112	; 0x70
 8003aa0:	705a      	strb	r2, [r3, #1]
				// Calculate BCC - Block Check uint8_tacter
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	789a      	ldrb	r2, [r3, #2]
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	78db      	ldrb	r3, [r3, #3]
 8003aaa:	4053      	eors	r3, r2
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	791b      	ldrb	r3, [r3, #4]
 8003ab2:	4053      	eors	r3, r2
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	795b      	ldrb	r3, [r3, #5]
 8003aba:	4053      	eors	r3, r2
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	719a      	strb	r2, [r3, #6]
				// Calculate CRC_A
				result = RFID_CalculateCRC(buffer, 7, &buffer[7]);
 8003ac2:	2524      	movs	r5, #36	; 0x24
 8003ac4:	197c      	adds	r4, r7, r5
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	3307      	adds	r3, #7
 8003aca:	1879      	adds	r1, r7, r1
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	f7ff fc50 	bl	8003374 <_ZN4RFID17RFID_CalculateCRCEPhhS0_>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	7023      	strb	r3, [r4, #0]
				if (result != STATUS_OK) {
 8003ad8:	197b      	adds	r3, r7, r5
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x242>
					return result;
 8003ae0:	197b      	adds	r3, r7, r5
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	e1b1      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 8003ae6:	2317      	movs	r3, #23
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
				bufferUsed		= 9;
 8003aee:	232f      	movs	r3, #47	; 0x2f
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2209      	movs	r2, #9
 8003af4:	701a      	strb	r2, [r3, #0]
				// Store response in the last 3 uint8_ts of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 8003af6:	2318      	movs	r3, #24
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	3306      	adds	r3, #6
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= 3;
 8003afe:	2316      	movs	r3, #22
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2203      	movs	r2, #3
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e04b      	b.n	8003ba0 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x2fc>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print(F("ANTICOLLISION: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 8003b08:	2330      	movs	r3, #48	; 0x30
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	4ad0      	ldr	r2, [pc, #832]	; (8003e54 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5b0>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	d504      	bpl.n	8003b20 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x27c>
 8003b16:	3b01      	subs	r3, #1
 8003b18:	2208      	movs	r2, #8
 8003b1a:	4252      	negs	r2, r2
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	3301      	adds	r3, #1
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	2317      	movs	r3, #23
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	701a      	strb	r2, [r3, #0]
				count			= currentLevelKnownBits / 8;	// Number of whole uint8_ts in the UID part.
 8003b2a:	2330      	movs	r3, #48	; 0x30
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da00      	bge.n	8003b38 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x294>
 8003b36:	3307      	adds	r3, #7
 8003b38:	10db      	asrs	r3, r3, #3
 8003b3a:	b25a      	sxtb	r2, r3
 8003b3c:	2133      	movs	r1, #51	; 0x33
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	701a      	strb	r2, [r3, #0]
				index			= 2 + count;					// Number of whole uint8_ts: SEL + NVB + UIDs
 8003b42:	2032      	movs	r0, #50	; 0x32
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	187a      	adds	r2, r7, r1
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	3202      	adds	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	2117      	movs	r1, #23
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	2318      	movs	r3, #24
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	705a      	strb	r2, [r3, #1]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x2ce>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x2d0>
 8003b72:	2300      	movs	r3, #0
 8003b74:	222f      	movs	r2, #47	; 0x2f
 8003b76:	18ba      	adds	r2, r7, r2
 8003b78:	2032      	movs	r0, #50	; 0x32
 8003b7a:	1839      	adds	r1, r7, r0
 8003b7c:	7809      	ldrb	r1, [r1, #0]
 8003b7e:	185b      	adds	r3, r3, r1
 8003b80:	7013      	strb	r3, [r2, #0]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 8003b82:	0001      	movs	r1, r0
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2218      	movs	r2, #24
 8003b8a:	18ba      	adds	r2, r7, r2
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= sizeof(buffer) - index;
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2209      	movs	r2, #9
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	2316      	movs	r3, #22
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	701a      	strb	r2, [r3, #0]
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
 8003ba0:	2623      	movs	r6, #35	; 0x23
 8003ba2:	19bb      	adds	r3, r7, r6
 8003ba4:	2117      	movs	r1, #23
 8003ba6:	187a      	adds	r2, r7, r1
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	701a      	strb	r2, [r3, #0]
			RFID_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8003bac:	19bb      	adds	r3, r7, r6
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	18d3      	adds	r3, r2, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	211a      	movs	r1, #26
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff fa21 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = RFID_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	18bc      	adds	r4, r7, r2
 8003bca:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8003bcc:	202f      	movs	r0, #47	; 0x2f
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	2018      	movs	r0, #24
 8003bd4:	1839      	adds	r1, r7, r0
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	19bb      	adds	r3, r7, r6
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	2317      	movs	r3, #23
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2316      	movs	r3, #22
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	002b      	movs	r3, r5
 8003bf0:	f7ff fcaf 	bl	8003552 <_ZN4RFID19RFID_TransceiveDataEPhhS0_S0_S0_hb>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	7023      	strb	r3, [r4, #0]
			if (result == STATUS_COLLISION) { // More than one RFID in the field => collision.
 8003bf8:	2224      	movs	r2, #36	; 0x24
 8003bfa:	18bb      	adds	r3, r7, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d16c      	bne.n	8003cdc <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x438>
				uint8_t valueOfCollReg = RFID_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 8003c02:	2522      	movs	r5, #34	; 0x22
 8003c04:	197c      	adds	r4, r7, r5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	211c      	movs	r1, #28
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7ff fa75 	bl	80030fa <_ZN4RFID17RFID_ReadRegisterEh>
 8003c10:	0003      	movs	r3, r0
 8003c12:	7023      	strb	r3, [r4, #0]
				if (valueOfCollReg & 0x20) { // CollPosNotValid
 8003c14:	197b      	adds	r3, r7, r5
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d001      	beq.n	8003c22 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x37e>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e113      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
				}
				uint8_t collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
 8003c22:	2026      	movs	r0, #38	; 0x26
 8003c24:	183b      	adds	r3, r7, r0
 8003c26:	2222      	movs	r2, #34	; 0x22
 8003c28:	18ba      	adds	r2, r7, r2
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	211f      	movs	r1, #31
 8003c2e:	400a      	ands	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
				if (collisionPos == 0) {
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x39c>
					collisionPos = 32;
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	701a      	strb	r2, [r3, #0]
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen
 8003c40:	2326      	movs	r3, #38	; 0x26
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	2330      	movs	r3, #48	; 0x30
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dc01      	bgt.n	8003c56 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x3b2>
					return STATUS_INTERNAL_ERROR;
 8003c52:	2305      	movs	r3, #5
 8003c54:	e0f9      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
				}
				// Choose the RFID with the bit set.
				currentLevelKnownBits = collisionPos;
 8003c56:	2130      	movs	r1, #48	; 0x30
 8003c58:	187b      	adds	r3, r7, r1
 8003c5a:	2226      	movs	r2, #38	; 0x26
 8003c5c:	18ba      	adds	r2, r7, r2
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	701a      	strb	r2, [r3, #0]
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4a7a      	ldr	r2, [pc, #488]	; (8003e54 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5b0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d504      	bpl.n	8003c7a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x3d6>
 8003c70:	3b01      	subs	r3, #1
 8003c72:	2208      	movs	r2, #8
 8003c74:	4252      	negs	r2, r2
 8003c76:	4313      	orrs	r3, r2
 8003c78:	3301      	adds	r3, #1
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	2333      	movs	r3, #51	; 0x33
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	701a      	strb	r2, [r3, #0]
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First uint8_t is index 0.
 8003c82:	2330      	movs	r3, #48	; 0x30
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da00      	bge.n	8003c90 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x3ec>
 8003c8e:	3307      	adds	r3, #7
 8003c90:	10db      	asrs	r3, r3, #3
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	2333      	movs	r3, #51	; 0x33
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x400>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x402>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	2032      	movs	r0, #50	; 0x32
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	3201      	adds	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
				buffer[index]	|= (1 << count);
 8003cb2:	183b      	adds	r3, r7, r0
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2418      	movs	r4, #24
 8003cb8:	193a      	adds	r2, r7, r4
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	2333      	movs	r3, #51	; 0x33
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4099      	lsls	r1, r3
 8003cc8:	000b      	movs	r3, r1
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b25a      	sxtb	r2, r3
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2d1      	uxtb	r1, r2
 8003cd6:	193a      	adds	r2, r7, r4
 8003cd8:	54d1      	strb	r1, [r2, r3]
 8003cda:	e016      	b.n	8003d0a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x466>
			}
			else if (result != STATUS_OK) {
 8003cdc:	2224      	movs	r2, #36	; 0x24
 8003cde:	18bb      	adds	r3, r7, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x448>
				return result;
 8003ce6:	18bb      	adds	r3, r7, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	e0ae      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 8003cec:	2330      	movs	r3, #48	; 0x30
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	2b1f      	cmp	r3, #31
 8003cf6:	dd04      	ble.n	8003d02 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x45e>
					selectDone = true; // No more anticollision
 8003cf8:	2336      	movs	r3, #54	; 0x36
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e003      	b.n	8003d0a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x466>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 8003d02:	2330      	movs	r3, #48	; 0x30
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	2220      	movs	r2, #32
 8003d08:	701a      	strb	r2, [r3, #0]
		while (!selectDone) {
 8003d0a:	2336      	movs	r3, #54	; 0x36
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4053      	eors	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d000      	beq.n	8003d1c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x478>
 8003d1a:	e6b8      	b.n	8003a8e <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x1ea>
		} // End of while (!selectDone)

		// We do not check the CBB - it was constructed by us above.

		// Copy the found UID uint8_ts from buffer[] to uid->uiduint8_t[]
		index			= (buffer[2] == RFID_CMD_CT) ? 3 : 2; // source index in buffer[]
 8003d1c:	2318      	movs	r3, #24
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	2b88      	cmp	r3, #136	; 0x88
 8003d24:	d101      	bne.n	8003d2a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x486>
 8003d26:	2203      	movs	r2, #3
 8003d28:	e000      	b.n	8003d2c <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x488>
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	2332      	movs	r3, #50	; 0x32
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	701a      	strb	r2, [r3, #0]
		bytesToCopy		= (buffer[2] == RFID_CMD_CT) ? 3 : 4;
 8003d32:	2318      	movs	r3, #24
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	789b      	ldrb	r3, [r3, #2]
 8003d38:	2b88      	cmp	r3, #136	; 0x88
 8003d3a:	d101      	bne.n	8003d40 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x49c>
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	e000      	b.n	8003d42 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x49e>
 8003d40:	2204      	movs	r2, #4
 8003d42:	2327      	movs	r3, #39	; 0x27
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	701a      	strb	r2, [r3, #0]
		for (count = 0; count < bytesToCopy; count++) {
 8003d48:	2333      	movs	r3, #51	; 0x33
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e019      	b.n	8003d86 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x4e2>
			uid->uidByte[uidIndex + count] = buffer[index++];
 8003d52:	2232      	movs	r2, #50	; 0x32
 8003d54:	18bb      	adds	r3, r7, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	18ba      	adds	r2, r7, r2
 8003d5a:	1c59      	adds	r1, r3, #1
 8003d5c:	7011      	strb	r1, [r2, #0]
 8003d5e:	0019      	movs	r1, r3
 8003d60:	2331      	movs	r3, #49	; 0x31
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	2033      	movs	r0, #51	; 0x33
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	18d3      	adds	r3, r2, r3
 8003d6e:	2218      	movs	r2, #24
 8003d70:	18ba      	adds	r2, r7, r2
 8003d72:	5c51      	ldrb	r1, [r2, r1]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	1c0a      	adds	r2, r1, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 8003d7c:	183b      	adds	r3, r7, r0
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	3201      	adds	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	2333      	movs	r3, #51	; 0x33
 8003d88:	18fa      	adds	r2, r7, r3
 8003d8a:	2327      	movs	r3, #39	; 0x27
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3dd      	bcc.n	8003d52 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x4ae>
		}

		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 uint8_t + CRC_A).
 8003d96:	2316      	movs	r3, #22
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d104      	bne.n	8003daa <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x506>
 8003da0:	2317      	movs	r3, #23
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x50a>
			return STATUS_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e04d      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those uint8_ts are not needed anymore.
		result = RFID_CalculateCRC(responseBuffer, 1, &buffer[2]);
 8003dae:	2524      	movs	r5, #36	; 0x24
 8003db0:	197c      	adds	r4, r7, r5
 8003db2:	2318      	movs	r3, #24
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	3302      	adds	r3, #2
 8003db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f7ff fad9 	bl	8003374 <_ZN4RFID17RFID_CalculateCRCEPhhS0_>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	7023      	strb	r3, [r4, #0]
		if (result != STATUS_OK) {
 8003dc6:	197b      	adds	r3, r7, r5
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x530>
			return result;
 8003dce:	197b      	adds	r3, r7, r5
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	e03a      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 8003dd4:	2118      	movs	r1, #24
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	789a      	ldrb	r2, [r3, #2]
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	3301      	adds	r3, #1
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x54e>
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	78da      	ldrb	r2, [r3, #3]
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	3302      	adds	r3, #2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x552>
			return STATUS_CRC_WRONG;
 8003df2:	2307      	movs	r3, #7
 8003df4:	e029      	b.n	8003e4a <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x5a6>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d006      	beq.n	8003e10 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x56c>
			cascadeLevel++;
 8003e02:	2134      	movs	r1, #52	; 0x34
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	3201      	adds	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e007      	b.n	8003e20 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x57c>
		}
		else {
			uidComplete = true;
 8003e10:	2337      	movs	r3, #55	; 0x37
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
			uid->sak = responseBuffer[0];
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 8003e20:	2337      	movs	r3, #55	; 0x37
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	4053      	eors	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d000      	beq.n	8003e32 <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x58e>
 8003e30:	e554      	b.n	80038dc <_ZN4RFID11RFID_SelectEPNS_3UidEh+0x38>
		}
	} // End of while (!uidComplete)

	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 8003e32:	2334      	movs	r3, #52	; 0x34
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	1c1a      	adds	r2, r3, #0
 8003e3a:	1892      	adds	r2, r2, r2
 8003e3c:	18d3      	adds	r3, r2, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8003e48:	2300      	movs	r3, #0
} // End RFID_Select()
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b00f      	add	sp, #60	; 0x3c
 8003e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	80000007 	.word	0x80000007

08003e58 <_ZN4RFID16isNewCardPresentEv>:
	return result;
} // End RFID_HaltA()



bool RFID::isNewCardPresent(){
 8003e58:	b5b0      	push	{r4, r5, r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 8003e60:	210b      	movs	r1, #11
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2202      	movs	r2, #2
 8003e66:	701a      	strb	r2, [r3, #0]
	RFID::StatusCode result = RFID_RequestA(bufferATQA, &bufferSize);
 8003e68:	250f      	movs	r5, #15
 8003e6a:	197c      	adds	r4, r7, r5
 8003e6c:	187a      	adds	r2, r7, r1
 8003e6e:	230c      	movs	r3, #12
 8003e70:	18f9      	adds	r1, r7, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fcbc 	bl	80037f2 <_ZN4RFID13RFID_RequestAEPhS0_>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	7023      	strb	r3, [r4, #0]
	return (result == STATUS_OK || result == STATUS_COLLISION);
 8003e7e:	197b      	adds	r3, r7, r5
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <_ZN4RFID16isNewCardPresentEv+0x36>
 8003e86:	197b      	adds	r3, r7, r5
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d101      	bne.n	8003e92 <_ZN4RFID16isNewCardPresentEv+0x3a>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <_ZN4RFID16isNewCardPresentEv+0x3c>
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bdb0      	pop	{r4, r5, r7, pc}

08003e9c <_ZN4RFID14readCardSerialEv>:
bool RFID::readCardSerial(){
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	RFID::StatusCode result = RFID_Select(&uid);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3312      	adds	r3, #18
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	250f      	movs	r5, #15
 8003eac:	197c      	adds	r4, r7, r5
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7ff fcf6 	bl	80038a4 <_ZN4RFID11RFID_SelectEPNS_3UidEh>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	7023      	strb	r3, [r4, #0]
	return (result == STATUS_OK);
 8003ebc:	197b      	adds	r3, r7, r5
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	425a      	negs	r2, r3
 8003ec2:	4153      	adcs	r3, r2
 8003ec4:	b2db      	uxtb	r3, r3
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bdb0      	pop	{r4, r5, r7, pc}

08003ece <_ZN4RFID10readSensorEv>:

uint32_t RFID::readSensor(){
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
	// Wake PIC up
	uint8_t bufferATQA[2];
	//uint8_t bufferSize = sizeof(bufferATQA);
	RFID_WriteRegister(TxModeReg, 0x00);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2124      	movs	r1, #36	; 0x24
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff f893 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(RxModeReg, 0x00);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2126      	movs	r1, #38	; 0x26
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff f88d 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>
	RFID_WriteRegister(ModWidthReg, 0x26);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2226      	movs	r2, #38	; 0x26
 8003ef2:	2148      	movs	r1, #72	; 0x48
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff f887 	bl	8003008 <_ZN4RFID18RFID_WriteRegisterEhh>

	// Look for new cards
	  if (!RFID::isNewCardPresent()) {}
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7ff ffab 	bl	8003e58 <_ZN4RFID16isNewCardPresentEv>
	  // Select one of the cards
	  if (!RFID::readCardSerial()){}
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff ffc9 	bl	8003e9c <_ZN4RFID14readCardSerialEv>

	return *((uint32_t*) &uid.uidByte);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3313      	adds	r3, #19
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b004      	add	sp, #16
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZN4RFID11getSensorIDEv>:
int RFID::getSensorID(){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	return getID();
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 f811 	bl	8003f4a <_ZN6SensorImE5getIDEv>
 8003f28:	0003      	movs	r3, r0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZN6SensorImE5setIDEi>:
int Sensor<T>::getID(){
    return id;
}

template<typename T>
void Sensor<T>::setID(int newID){
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
    id = newID;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	605a      	str	r2, [r3, #4]
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_ZN6SensorImE5getIDEv>:
int Sensor<T>::getID(){
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
    return id;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b08b      	sub	sp, #44	; 0x2c
 8003f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f66:	2414      	movs	r4, #20
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	2314      	movs	r3, #20
 8003f6e:	001a      	movs	r2, r3
 8003f70:	2100      	movs	r1, #0
 8003f72:	f005 fa50 	bl	8009416 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f76:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	0309      	lsls	r1, r1, #12
 8003f80:	430a      	orrs	r2, r1
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	031b      	lsls	r3, r3, #12
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f92:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	4b4f      	ldr	r3, [pc, #316]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	03c9      	lsls	r1, r1, #15
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	615a      	str	r2, [r3, #20]
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	03db      	lsls	r3, r3, #15
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fae:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	0289      	lsls	r1, r1, #10
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	029b      	lsls	r3, r3, #10
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	02c9      	lsls	r1, r1, #11
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	615a      	str	r2, [r3, #20]
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <MX_GPIO_Init+0x174>)
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	02db      	lsls	r3, r3, #11
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003fe6:	2390      	movs	r3, #144	; 0x90
 8003fe8:	05db      	lsls	r3, r3, #23
 8003fea:	2200      	movs	r2, #0
 8003fec:	2120      	movs	r1, #32
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f001 ff0a 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003ff4:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <MX_GPIO_Init+0x178>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f001 ff04 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOOR_Pin|INFRARED_Pin, GPIO_PIN_RESET);
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <MX_GPIO_Init+0x17c>)
 8004002:	2200      	movs	r2, #0
 8004004:	2106      	movs	r1, #6
 8004006:	0018      	movs	r0, r3
 8004008:	f001 fefe 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800400c:	193b      	adds	r3, r7, r4
 800400e:	2280      	movs	r2, #128	; 0x80
 8004010:	0192      	lsls	r2, r2, #6
 8004012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004014:	193b      	adds	r3, r7, r4
 8004016:	2284      	movs	r2, #132	; 0x84
 8004018:	0392      	lsls	r2, r2, #14
 800401a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	193b      	adds	r3, r7, r4
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004022:	193b      	adds	r3, r7, r4
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <MX_GPIO_Init+0x178>)
 8004026:	0019      	movs	r1, r3
 8004028:	0010      	movs	r0, r2
 800402a:	f001 fd75 	bl	8005b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800402e:	193b      	adds	r3, r7, r4
 8004030:	220c      	movs	r2, #12
 8004032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	193b      	adds	r3, r7, r4
 8004036:	2202      	movs	r2, #2
 8004038:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	193b      	adds	r3, r7, r4
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004040:	193b      	adds	r3, r7, r4
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004046:	193b      	adds	r3, r7, r4
 8004048:	2201      	movs	r2, #1
 800404a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404c:	193a      	adds	r2, r7, r4
 800404e:	2390      	movs	r3, #144	; 0x90
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f001 fd5f 	bl	8005b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800405a:	193b      	adds	r3, r7, r4
 800405c:	2220      	movs	r2, #32
 800405e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004060:	193b      	adds	r3, r7, r4
 8004062:	2201      	movs	r2, #1
 8004064:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	193b      	adds	r3, r7, r4
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406c:	193b      	adds	r3, r7, r4
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004072:	193a      	adds	r2, r7, r4
 8004074:	2390      	movs	r3, #144	; 0x90
 8004076:	05db      	lsls	r3, r3, #23
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f001 fd4c 	bl	8005b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8004080:	193b      	adds	r3, r7, r4
 8004082:	2210      	movs	r2, #16
 8004084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	193b      	adds	r3, r7, r4
 8004088:	2201      	movs	r2, #1
 800408a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	193b      	adds	r3, r7, r4
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004092:	193b      	adds	r3, r7, r4
 8004094:	2200      	movs	r2, #0
 8004096:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8004098:	193b      	adds	r3, r7, r4
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <MX_GPIO_Init+0x178>)
 800409c:	0019      	movs	r1, r3
 800409e:	0010      	movs	r0, r2
 80040a0:	f001 fd3a 	bl	8005b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DOOR_Pin|INFRARED_Pin;
 80040a4:	0021      	movs	r1, r4
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2206      	movs	r2, #6
 80040aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	2201      	movs	r2, #1
 80040b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	4a06      	ldr	r2, [pc, #24]	; (80040dc <MX_GPIO_Init+0x17c>)
 80040c2:	0019      	movs	r1, r3
 80040c4:	0010      	movs	r0, r2
 80040c6:	f001 fd27 	bl	8005b18 <HAL_GPIO_Init>

}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b00b      	add	sp, #44	; 0x2c
 80040d0:	bd90      	pop	{r4, r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40021000 	.word	0x40021000
 80040d8:	48000800 	.word	0x48000800
 80040dc:	48000400 	.word	0x48000400

080040e0 <GPIO_Output>:

/* USER CODE BEGIN 2 */
void GPIO_Output(GPIO_TypeDef*  port, uint16_t pin, uint8_t value){
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	0008      	movs	r0, r1
 80040ea:	0011      	movs	r1, r2
 80040ec:	1cbb      	adds	r3, r7, #2
 80040ee:	1c02      	adds	r2, r0, #0
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	1c7b      	adds	r3, r7, #1
 80040f4:	1c0a      	adds	r2, r1, #0
 80040f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, value);
 80040f8:	1c7b      	adds	r3, r7, #1
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	1cbb      	adds	r3, r7, #2
 80040fe:	8819      	ldrh	r1, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f001 fe80 	bl	8005e08 <HAL_GPIO_WritePin>
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <MX_I2C1_Init+0x74>)
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <MX_I2C1_Init+0x78>)
 8004118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <MX_I2C1_Init+0x74>)
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <MX_I2C1_Init+0x7c>)
 800411e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <MX_I2C1_Init+0x74>)
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <MX_I2C1_Init+0x74>)
 8004128:	2201      	movs	r2, #1
 800412a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <MX_I2C1_Init+0x74>)
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <MX_I2C1_Init+0x74>)
 8004134:	2200      	movs	r2, #0
 8004136:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <MX_I2C1_Init+0x74>)
 800413a:	2200      	movs	r2, #0
 800413c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <MX_I2C1_Init+0x74>)
 8004140:	2200      	movs	r2, #0
 8004142:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <MX_I2C1_Init+0x74>)
 8004146:	2200      	movs	r2, #0
 8004148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <MX_I2C1_Init+0x74>)
 800414c:	0018      	movs	r0, r3
 800414e:	f001 fe79 	bl	8005e44 <HAL_I2C_Init>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004156:	f001 f88a 	bl	800526e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <MX_I2C1_Init+0x74>)
 800415c:	2100      	movs	r1, #0
 800415e:	0018      	movs	r0, r3
 8004160:	f002 fbcc 	bl	80068fc <HAL_I2CEx_ConfigAnalogFilter>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d001      	beq.n	800416c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004168:	f001 f881 	bl	800526e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <MX_I2C1_Init+0x74>)
 800416e:	2100      	movs	r1, #0
 8004170:	0018      	movs	r0, r3
 8004172:	f002 fc0f 	bl	8006994 <HAL_I2CEx_ConfigDigitalFilter>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d001      	beq.n	800417e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800417a:	f001 f878 	bl	800526e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000078 	.word	0x20000078
 8004188:	40005400 	.word	0x40005400
 800418c:	2000090e 	.word	0x2000090e

08004190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b08b      	sub	sp, #44	; 0x2c
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	2414      	movs	r4, #20
 800419a:	193b      	adds	r3, r7, r4
 800419c:	0018      	movs	r0, r3
 800419e:	2314      	movs	r3, #20
 80041a0:	001a      	movs	r2, r3
 80041a2:	2100      	movs	r1, #0
 80041a4:	f005 f937 	bl	8009416 <memset>
  if(i2cHandle->Instance==I2C1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_I2C_MspInit+0x94>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d133      	bne.n	800421a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_I2C_MspInit+0x98>)
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_I2C_MspInit+0x98>)
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	0289      	lsls	r1, r1, #10
 80041bc:	430a      	orrs	r2, r1
 80041be:	615a      	str	r2, [r3, #20]
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_I2C_MspInit+0x98>)
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	22c0      	movs	r2, #192	; 0xc0
 80041d2:	00d2      	lsls	r2, r2, #3
 80041d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041d6:	0021      	movs	r1, r4
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2212      	movs	r2, #18
 80041dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2203      	movs	r2, #3
 80041e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	2204      	movs	r2, #4
 80041ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	187a      	adds	r2, r7, r1
 80041f2:	2390      	movs	r3, #144	; 0x90
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	0011      	movs	r1, r2
 80041f8:	0018      	movs	r0, r3
 80041fa:	f001 fc8d 	bl	8005b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_I2C_MspInit+0x98>)
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_I2C_MspInit+0x98>)
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	0389      	lsls	r1, r1, #14
 8004208:	430a      	orrs	r2, r1
 800420a:	61da      	str	r2, [r3, #28]
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_I2C_MspInit+0x98>)
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	039b      	lsls	r3, r3, #14
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b00b      	add	sp, #44	; 0x2c
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	40005400 	.word	0x40005400
 8004228:	40021000 	.word	0x40021000

0800422c <I2C_Read_Register>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af02      	add	r7, sp, #8
 8004232:	0002      	movs	r2, r0
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	1c0a      	adds	r2, r1, #0
 800423c:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 800423e:	200c      	movs	r0, #12
 8004240:	183b      	adds	r3, r7, r0
 8004242:	1dba      	adds	r2, r7, #6
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b299      	uxth	r1, r3
 800424e:	183a      	adds	r2, r7, r0
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <I2C_Read_Register+0x58>)
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <I2C_Read_Register+0x5c>)
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2301      	movs	r3, #1
 8004258:	f001 fe8a 	bl	8005f70 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	b299      	uxth	r1, r3
 8004266:	2408      	movs	r4, #8
 8004268:	193a      	adds	r2, r7, r4
 800426a:	4806      	ldr	r0, [pc, #24]	; (8004284 <I2C_Read_Register+0x58>)
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <I2C_Read_Register+0x5c>)
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2301      	movs	r3, #1
 8004272:	f001 ff85 	bl	8006180 <HAL_I2C_Master_Receive>


	return rx_buff[0];
 8004276:	193b      	adds	r3, r7, r4
 8004278:	781b      	ldrb	r3, [r3, #0]
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b005      	add	sp, #20
 8004280:	bd90      	pop	{r4, r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	20000078 	.word	0x20000078
 8004288:	00002710 	.word	0x00002710

0800428c <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b087      	sub	sp, #28
 8004290:	af02      	add	r7, sp, #8
 8004292:	0004      	movs	r4, r0
 8004294:	0008      	movs	r0, r1
 8004296:	0011      	movs	r1, r2
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	1c22      	adds	r2, r4, #0
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	1dbb      	adds	r3, r7, #6
 80042a0:	1c02      	adds	r2, r0, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	1d7b      	adds	r3, r7, #5
 80042a6:	1c0a      	adds	r2, r1, #0
 80042a8:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 80042aa:	200c      	movs	r0, #12
 80042ac:	183b      	adds	r3, r7, r0
 80042ae:	1dba      	adds	r2, r7, #6
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = data;
 80042b4:	183b      	adds	r3, r7, r0
 80042b6:	1d7a      	adds	r2, r7, #5
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 80042bc:	1dfb      	adds	r3, r7, #7
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b299      	uxth	r1, r3
 80042c2:	183a      	adds	r2, r7, r0
 80042c4:	4804      	ldr	r0, [pc, #16]	; (80042d8 <I2C_Write_Register+0x4c>)
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <I2C_Write_Register+0x50>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2302      	movs	r3, #2
 80042cc:	f001 fe50 	bl	8005f70 <HAL_I2C_Master_Transmit>
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b005      	add	sp, #20
 80042d6:	bd90      	pop	{r4, r7, pc}
 80042d8:	20000078 	.word	0x20000078
 80042dc:	00002710 	.word	0x00002710

080042e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	4ce5      	ldr	r4, [pc, #916]	; (8004678 <main+0x398>)
 80042e4:	44a5      	add	sp, r4
 80042e6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */

	uint8_t cases = StandBy;
 80042e8:	4be4      	ldr	r3, [pc, #912]	; (800467c <main+0x39c>)
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
	uint32_t card;
	uint32_t registeredCards[16];
	string acButton;
 80042f0:	23d0      	movs	r3, #208	; 0xd0
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	0018      	movs	r0, r3
 80042f8:	f004 fec1 	bl	800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	string acTempMButton;
 80042fc:	23c4      	movs	r3, #196	; 0xc4
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	0018      	movs	r0, r3
 8004304:	f004 febb 	bl	800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	string acTempPButton;
 8004308:	23b8      	movs	r3, #184	; 0xb8
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	0018      	movs	r0, r3
 8004310:	f004 feb5 	bl	800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	string doorButton;
 8004314:	23ac      	movs	r3, #172	; 0xac
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	0018      	movs	r0, r3
 800431c:	f004 feaf 	bl	800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	uint8_t flagAcOn = 0;
 8004320:	4bd7      	ldr	r3, [pc, #860]	; (8004680 <main+0x3a0>)
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
	uint8_t flagDoorOpen = 0;
 8004328:	4bd6      	ldr	r3, [pc, #856]	; (8004684 <main+0x3a4>)
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
	uint8_t flagPlusTemp = 0;
 8004330:	4bd5      	ldr	r3, [pc, #852]	; (8004688 <main+0x3a8>)
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
	uint8_t flagMinusTemp = 0;
 8004338:	23b1      	movs	r3, #177	; 0xb1
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
	float temperature = 0.00;
 8004342:	2300      	movs	r3, #0
 8004344:	22b0      	movs	r2, #176	; 0xb0
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	6013      	str	r3, [r2, #0]
	const char* ssid = "LISHA_WIFI";
 800434c:	4bcf      	ldr	r3, [pc, #828]	; (800468c <main+0x3ac>)
 800434e:	22ae      	movs	r2, #174	; 0xae
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	18b9      	adds	r1, r7, r2
 8004354:	600b      	str	r3, [r1, #0]
	const char* password = "l1sh4_2022";
 8004356:	4bce      	ldr	r3, [pc, #824]	; (8004690 <main+0x3b0>)
 8004358:	21ad      	movs	r1, #173	; 0xad
 800435a:	0089      	lsls	r1, r1, #2
 800435c:	1878      	adds	r0, r7, r1
 800435e:	6003      	str	r3, [r0, #0]
	const char* broker = "mqtt.eclipse.org";
 8004360:	4bcc      	ldr	r3, [pc, #816]	; (8004694 <main+0x3b4>)
 8004362:	20ac      	movs	r0, #172	; 0xac
 8004364:	0080      	lsls	r0, r0, #2
 8004366:	183c      	adds	r4, r7, r0
 8004368:	6023      	str	r3, [r4, #0]
	uint16_t mqttPort = 1883;
 800436a:	4ccb      	ldr	r4, [pc, #812]	; (8004698 <main+0x3b8>)
 800436c:	193b      	adds	r3, r7, r4
 800436e:	4acb      	ldr	r2, [pc, #812]	; (800469c <main+0x3bc>)
 8004370:	801a      	strh	r2, [r3, #0]
	const char* topicAcOn = "/acbutton/";
 8004372:	4bcb      	ldr	r3, [pc, #812]	; (80046a0 <main+0x3c0>)
 8004374:	25aa      	movs	r5, #170	; 0xaa
 8004376:	00ad      	lsls	r5, r5, #2
 8004378:	197d      	adds	r5, r7, r5
 800437a:	602b      	str	r3, [r5, #0]
	const char* topicAcTempPlus = "/acplustemp/";
 800437c:	4bc9      	ldr	r3, [pc, #804]	; (80046a4 <main+0x3c4>)
 800437e:	25a9      	movs	r5, #169	; 0xa9
 8004380:	00ad      	lsls	r5, r5, #2
 8004382:	197d      	adds	r5, r7, r5
 8004384:	602b      	str	r3, [r5, #0]
	const char* topicAcTempMinus = "/acminustemp/";
 8004386:	4bc8      	ldr	r3, [pc, #800]	; (80046a8 <main+0x3c8>)
 8004388:	25a8      	movs	r5, #168	; 0xa8
 800438a:	00ad      	lsls	r5, r5, #2
 800438c:	197d      	adds	r5, r7, r5
 800438e:	602b      	str	r3, [r5, #0]
	const char* topic_out = "/temperature/";
 8004390:	4bc6      	ldr	r3, [pc, #792]	; (80046ac <main+0x3cc>)
 8004392:	25a7      	movs	r5, #167	; 0xa7
 8004394:	00ad      	lsls	r5, r5, #2
 8004396:	197d      	adds	r5, r7, r5
 8004398:	602b      	str	r3, [r5, #0]
	const char* topicDoorButton = "/doorButton/";
 800439a:	4bc5      	ldr	r3, [pc, #788]	; (80046b0 <main+0x3d0>)
 800439c:	25a6      	movs	r5, #166	; 0xa6
 800439e:	00ad      	lsls	r5, r5, #2
 80043a0:	197d      	adds	r5, r7, r5
 80043a2:	602b      	str	r3, [r5, #0]

	uint8_t temp = 24; //valro padrão de temperatura do ar condicionado
 80043a4:	4dc3      	ldr	r5, [pc, #780]	; (80046b4 <main+0x3d4>)
 80043a6:	197b      	adds	r3, r7, r5
 80043a8:	2218      	movs	r2, #24
 80043aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043ac:	f001 fa78 	bl	80058a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043b0:	f000 fef4 	bl	800519c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043b4:	f7ff fdd4 	bl	8003f60 <MX_GPIO_Init>
  MX_I2C1_Init();
 80043b8:	f7ff feaa 	bl	8004110 <MX_I2C1_Init>
  MX_SPI1_Init();
 80043bc:	f000 ff70 	bl	80052a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80043c0:	f001 f8d4 	bl	800556c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80043c4:	f001 f964 	bl	8005690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	ClockCalendar clkCalendar(9, 20, 2023, 7, 32, 20, 1); // 13/09/2023 - 7:50:50 PM;
 80043c8:	4abb      	ldr	r2, [pc, #748]	; (80046b8 <main+0x3d8>)
 80043ca:	259e      	movs	r5, #158	; 0x9e
 80043cc:	006d      	lsls	r5, r5, #1
 80043ce:	1978      	adds	r0, r7, r5
 80043d0:	2301      	movs	r3, #1
 80043d2:	9303      	str	r3, [sp, #12]
 80043d4:	2314      	movs	r3, #20
 80043d6:	9302      	str	r3, [sp, #8]
 80043d8:	2320      	movs	r3, #32
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2307      	movs	r3, #7
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	0013      	movs	r3, r2
 80043e2:	2214      	movs	r2, #20
 80043e4:	2109      	movs	r1, #9
 80043e6:	f7fe faee 	bl	80029c6 <_ZN13ClockCalendarC1Eiiiiiii>
	RFID rfid(CS_GPIO_Port, CS_Pin);
 80043ea:	49b4      	ldr	r1, [pc, #720]	; (80046bc <main+0x3dc>)
 80043ec:	258e      	movs	r5, #142	; 0x8e
 80043ee:	006d      	lsls	r5, r5, #1
 80043f0:	197b      	adds	r3, r7, r5
 80043f2:	2210      	movs	r2, #16
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7fe fdeb 	bl	8002fd0 <_ZN4RFIDC1EP12GPIO_TypeDeft>
	rfid.RFID_Init();
 80043fa:	197b      	adds	r3, r7, r5
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff f823 	bl	8003448 <_ZN4RFID9RFID_InitEv>
	BMP280 bmp(0xF5, 0xF4);
 8004402:	1d7b      	adds	r3, r7, #5
 8004404:	33ff      	adds	r3, #255	; 0xff
 8004406:	22f4      	movs	r2, #244	; 0xf4
 8004408:	21f5      	movs	r1, #245	; 0xf5
 800440a:	0018      	movs	r0, r3
 800440c:	f7fe f856 	bl	80024bc <_ZN6BMP280C1Ehh>
	AC_controller ac(*INFRARED_GPIO_Port, INFRARED_Pin);
 8004410:	48ab      	ldr	r0, [pc, #684]	; (80046c0 <main+0x3e0>)
 8004412:	25d4      	movs	r5, #212	; 0xd4
 8004414:	197c      	adds	r4, r7, r5
 8004416:	2304      	movs	r3, #4
 8004418:	9308      	str	r3, [sp, #32]
 800441a:	466b      	mov	r3, sp
 800441c:	001a      	movs	r2, r3
 800441e:	0003      	movs	r3, r0
 8004420:	330c      	adds	r3, #12
 8004422:	cb62      	ldmia	r3!, {r1, r5, r6}
 8004424:	c262      	stmia	r2!, {r1, r5, r6}
 8004426:	cb62      	ldmia	r3!, {r1, r5, r6}
 8004428:	c262      	stmia	r2!, {r1, r5, r6}
 800442a:	cb22      	ldmia	r3!, {r1, r5}
 800442c:	c222      	stmia	r2!, {r1, r5}
 800442e:	6801      	ldr	r1, [r0, #0]
 8004430:	6842      	ldr	r2, [r0, #4]
 8004432:	6883      	ldr	r3, [r0, #8]
 8004434:	0020      	movs	r0, r4
 8004436:	f7fd fe33 	bl	80020a0 <_ZN13AC_controllerC1E12GPIO_TypeDeft>
	List log;
 800443a:	25d0      	movs	r5, #208	; 0xd0
 800443c:	197b      	adds	r3, r7, r5
 800443e:	0018      	movs	r0, r3
 8004440:	f7fe fb0f 	bl	8002a62 <_ZN4ListC1Ev>
	MQTT mqtt(broker, mqttPort, ssid, password);
 8004444:	22ae      	movs	r2, #174	; 0xae
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	18bd      	adds	r5, r7, r2
 800444a:	682c      	ldr	r4, [r5, #0]
 800444c:	4a92      	ldr	r2, [pc, #584]	; (8004698 <main+0x3b8>)
 800444e:	18bb      	adds	r3, r7, r2
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	20ac      	movs	r0, #172	; 0xac
 8004454:	0080      	lsls	r0, r0, #2
 8004456:	1838      	adds	r0, r7, r0
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	20a0      	movs	r0, #160	; 0xa0
 800445c:	1838      	adds	r0, r7, r0
 800445e:	23ad      	movs	r3, #173	; 0xad
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	0023      	movs	r3, r4
 800446a:	f7fe fbdb 	bl	8002c24 <_ZN4MQTTC1EPKctS1_S1_>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (cases) {
 800446e:	4b83      	ldr	r3, [pc, #524]	; (800467c <main+0x39c>)
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d901      	bls.n	800447c <main+0x19c>
 8004478:	f000 fe71 	bl	800515e <main+0xe7e>
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	4b91      	ldr	r3, [pc, #580]	; (80046c4 <main+0x3e4>)
 8004480:	18d3      	adds	r3, r2, r3
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	469f      	mov	pc, r3
		case StandBy:
			acButton = mqtt.Subscribe(topicAcOn, 2);
 8004486:	25fc      	movs	r5, #252	; 0xfc
 8004488:	006d      	lsls	r5, r5, #1
 800448a:	1978      	adds	r0, r7, r5
 800448c:	23aa      	movs	r3, #170	; 0xaa
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	24a0      	movs	r4, #160	; 0xa0
 8004496:	1939      	adds	r1, r7, r4
 8004498:	2302      	movs	r3, #2
 800449a:	f7fe fc6a 	bl	8002d72 <_ZN4MQTT9SubscribeB5cxx11EPKch>
 800449e:	197a      	adds	r2, r7, r5
 80044a0:	26d0      	movs	r6, #208	; 0xd0
 80044a2:	0076      	lsls	r6, r6, #1
 80044a4:	19bb      	adds	r3, r7, r6
 80044a6:	0011      	movs	r1, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	f004 fdf5 	bl	8009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80044ae:	197b      	adds	r3, r7, r5
 80044b0:	0018      	movs	r0, r3
 80044b2:	f004 fdeb 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			acTempMButton = mqtt.Subscribe(topicAcTempMinus, 1);
 80044b6:	2584      	movs	r5, #132	; 0x84
 80044b8:	00ad      	lsls	r5, r5, #2
 80044ba:	1978      	adds	r0, r7, r5
 80044bc:	23a8      	movs	r3, #168	; 0xa8
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	1939      	adds	r1, r7, r4
 80044c6:	2301      	movs	r3, #1
 80044c8:	f7fe fc53 	bl	8002d72 <_ZN4MQTT9SubscribeB5cxx11EPKch>
 80044cc:	197a      	adds	r2, r7, r5
 80044ce:	23c4      	movs	r3, #196	; 0xc4
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	0011      	movs	r1, r2
 80044d6:	0018      	movs	r0, r3
 80044d8:	f004 fdde 	bl	8009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80044dc:	197b      	adds	r3, r7, r5
 80044de:	0018      	movs	r0, r3
 80044e0:	f004 fdd4 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			acTempPButton = mqtt.Subscribe(topicAcTempPlus, 1);
 80044e4:	258a      	movs	r5, #138	; 0x8a
 80044e6:	00ad      	lsls	r5, r5, #2
 80044e8:	1978      	adds	r0, r7, r5
 80044ea:	23a9      	movs	r3, #169	; 0xa9
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	1939      	adds	r1, r7, r4
 80044f4:	2301      	movs	r3, #1
 80044f6:	f7fe fc3c 	bl	8002d72 <_ZN4MQTT9SubscribeB5cxx11EPKch>
 80044fa:	197a      	adds	r2, r7, r5
 80044fc:	23b8      	movs	r3, #184	; 0xb8
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f004 fdc7 	bl	8009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800450a:	197b      	adds	r3, r7, r5
 800450c:	0018      	movs	r0, r3
 800450e:	f004 fdbd 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			doorButton = mqtt.Subscribe(topicDoorButton, 2);
 8004512:	2590      	movs	r5, #144	; 0x90
 8004514:	00ad      	lsls	r5, r5, #2
 8004516:	1978      	adds	r0, r7, r5
 8004518:	23a6      	movs	r3, #166	; 0xa6
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	1939      	adds	r1, r7, r4
 8004522:	2302      	movs	r3, #2
 8004524:	f7fe fc25 	bl	8002d72 <_ZN4MQTT9SubscribeB5cxx11EPKch>
 8004528:	197a      	adds	r2, r7, r5
 800452a:	23ac      	movs	r3, #172	; 0xac
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f004 fdb0 	bl	8009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004538:	197b      	adds	r3, r7, r5
 800453a:	0018      	movs	r0, r3
 800453c:	f004 fda6 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			temperature = bmp.readSensor();
 8004540:	1d7b      	adds	r3, r7, #5
 8004542:	33ff      	adds	r3, #255	; 0xff
 8004544:	0018      	movs	r0, r3
 8004546:	f7fe f837 	bl	80025b8 <_ZN6BMP28010readSensorEv>
 800454a:	1c03      	adds	r3, r0, #0
 800454c:	22b0      	movs	r2, #176	; 0xb0
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	18ba      	adds	r2, r7, r2
 8004552:	6013      	str	r3, [r2, #0]

			if(acButton == "L")
 8004554:	4a5c      	ldr	r2, [pc, #368]	; (80046c8 <main+0x3e8>)
 8004556:	19bb      	adds	r3, r7, r6
 8004558:	0011      	movs	r1, r2
 800455a:	0018      	movs	r0, r3
 800455c:	f000 fe8c 	bl	8005278 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d008      	beq.n	8004576 <main+0x296>
			{
				flagAcOn = 1;
 8004564:	4b46      	ldr	r3, [pc, #280]	; (8004680 <main+0x3a0>)
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
				cases = CommAndroid;
 800456c:	4b43      	ldr	r3, [pc, #268]	; (800467c <main+0x39c>)
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2203      	movs	r2, #3
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e04e      	b.n	8004614 <main+0x334>
			}
			else if (acTempMButton == "M"){
 8004576:	4a55      	ldr	r2, [pc, #340]	; (80046cc <main+0x3ec>)
 8004578:	23c4      	movs	r3, #196	; 0xc4
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f000 fe79 	bl	8005278 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004586:	1e03      	subs	r3, r0, #0
 8004588:	d009      	beq.n	800459e <main+0x2be>
				flagMinusTemp = 1;
 800458a:	23b1      	movs	r3, #177	; 0xb1
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]
				cases = CommAndroid;
 8004594:	4b39      	ldr	r3, [pc, #228]	; (800467c <main+0x39c>)
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2203      	movs	r2, #3
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e03a      	b.n	8004614 <main+0x334>
			}
			else if (acTempPButton == "P"){
 800459e:	4a4c      	ldr	r2, [pc, #304]	; (80046d0 <main+0x3f0>)
 80045a0:	23b8      	movs	r3, #184	; 0xb8
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fe65 	bl	8005278 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d008      	beq.n	80045c4 <main+0x2e4>
				flagPlusTemp = 1;
 80045b2:	4b35      	ldr	r3, [pc, #212]	; (8004688 <main+0x3a8>)
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
				cases = CommAndroid;
 80045ba:	4b30      	ldr	r3, [pc, #192]	; (800467c <main+0x39c>)
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2203      	movs	r2, #3
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e027      	b.n	8004614 <main+0x334>
			}
			else if (doorButton == "L"){
 80045c4:	4a40      	ldr	r2, [pc, #256]	; (80046c8 <main+0x3e8>)
 80045c6:	23ac      	movs	r3, #172	; 0xac
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fe52 	bl	8005278 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d008      	beq.n	80045ea <main+0x30a>
				flagDoorOpen = 1;
 80045d8:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <main+0x3a4>)
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
				cases = CommAndroid;
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <main+0x39c>)
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2203      	movs	r2, #3
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e014      	b.n	8004614 <main+0x334>
			}

			else{
				flagAcOn = 0;
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <main+0x3a0>)
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
				flagDoorOpen = 0;
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <main+0x3a4>)
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
				flagMinusTemp = 0;
 80045fa:	23b1      	movs	r3, #177	; 0xb1
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
				flagPlusTemp = 0;
 8004604:	4b20      	ldr	r3, [pc, #128]	; (8004688 <main+0x3a8>)
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
				cases = StandBy;
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <main+0x39c>)
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]

			}

			int hour, minute, second, isPM, day, month, year;
			temperature = bmp.readSensor();
 8004614:	1d7b      	adds	r3, r7, #5
 8004616:	33ff      	adds	r3, #255	; 0xff
 8004618:	0018      	movs	r0, r3
 800461a:	f7fd ffcd 	bl	80025b8 <_ZN6BMP28010readSensorEv>
 800461e:	1c03      	adds	r3, r0, #0
 8004620:	22b0      	movs	r2, #176	; 0xb0
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	18ba      	adds	r2, r7, r2
 8004626:	6013      	str	r3, [r2, #0]
			card = rfid.readSensor();
 8004628:	238e      	movs	r3, #142	; 0x8e
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff fc4d 	bl	8003ece <_ZN4RFID10readSensorEv>
 8004634:	0003      	movs	r3, r0
 8004636:	22b2      	movs	r2, #178	; 0xb2
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	18ba      	adds	r2, r7, r2
 800463c:	6013      	str	r3, [r2, #0]
			for (uint8_t i = 0; i < 16; i++) {
 800463e:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <main+0x3f4>)
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e07f      	b.n	8004748 <main+0x468>
				if (card == registeredCards[i]) {
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <main+0x3f4>)
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <main+0x3f8>)
 8004650:	21b4      	movs	r1, #180	; 0xb4
 8004652:	0089      	lsls	r1, r1, #2
 8004654:	185b      	adds	r3, r3, r1
 8004656:	19db      	adds	r3, r3, r7
 8004658:	0092      	lsls	r2, r2, #2
 800465a:	58d3      	ldr	r3, [r2, r3]
 800465c:	21b2      	movs	r1, #178	; 0xb2
 800465e:	0089      	lsls	r1, r1, #2
 8004660:	187a      	adds	r2, r7, r1
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d139      	bne.n	80046dc <main+0x3fc>
					cases = CmdPorta;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <main+0x39c>)
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
					card = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	187a      	adds	r2, r7, r1
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e061      	b.n	800473c <main+0x45c>
 8004678:	fffffd04 	.word	0xfffffd04
 800467c:	000002cf 	.word	0x000002cf
 8004680:	000002c7 	.word	0x000002c7
 8004684:	000002c6 	.word	0x000002c6
 8004688:	000002c5 	.word	0x000002c5
 800468c:	08009cc4 	.word	0x08009cc4
 8004690:	08009cd0 	.word	0x08009cd0
 8004694:	08009cdc 	.word	0x08009cdc
 8004698:	000002ae 	.word	0x000002ae
 800469c:	0000075b 	.word	0x0000075b
 80046a0:	08009cf0 	.word	0x08009cf0
 80046a4:	08009cfc 	.word	0x08009cfc
 80046a8:	08009d0c 	.word	0x08009d0c
 80046ac:	08009d1c 	.word	0x08009d1c
 80046b0:	08009d2c 	.word	0x08009d2c
 80046b4:	000002bf 	.word	0x000002bf
 80046b8:	000007e7 	.word	0x000007e7
 80046bc:	48000800 	.word	0x48000800
 80046c0:	48000400 	.word	0x48000400
 80046c4:	08009dc4 	.word	0x08009dc4
 80046c8:	08009d3c 	.word	0x08009d3c
 80046cc:	08009d40 	.word	0x08009d40
 80046d0:	08009d44 	.word	0x08009d44
 80046d4:	000002be 	.word	0x000002be
 80046d8:	fffffee8 	.word	0xfffffee8
				} else if (card == MASTER_CARD_UID) {
 80046dc:	23b2      	movs	r3, #178	; 0xb2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4ae4      	ldr	r2, [pc, #912]	; (8004a78 <main+0x798>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d128      	bne.n	800473c <main+0x45c>
					delay_us(1000);
 80046ea:	23fa      	movs	r3, #250	; 0xfa
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f000 ffb4 	bl	800565c <delay_us>
					uint32_t temp_card = rfid.readSensor();
 80046f4:	238e      	movs	r3, #142	; 0x8e
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff fbe7 	bl	8003ece <_ZN4RFID10readSensorEv>
 8004700:	0003      	movs	r3, r0
 8004702:	21a4      	movs	r1, #164	; 0xa4
 8004704:	0089      	lsls	r1, r1, #2
 8004706:	187a      	adds	r2, r7, r1
 8004708:	6013      	str	r3, [r2, #0]
					if (registeredCards[i] == 0) {
 800470a:	48dc      	ldr	r0, [pc, #880]	; (8004a7c <main+0x79c>)
 800470c:	183b      	adds	r3, r7, r0
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	4bdb      	ldr	r3, [pc, #876]	; (8004a80 <main+0x7a0>)
 8004712:	24b4      	movs	r4, #180	; 0xb4
 8004714:	00a4      	lsls	r4, r4, #2
 8004716:	191b      	adds	r3, r3, r4
 8004718:	19db      	adds	r3, r3, r7
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	58d3      	ldr	r3, [r2, r3]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <main+0x45c>
						registeredCards[i] = temp_card;
 8004722:	183b      	adds	r3, r7, r0
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	4bd6      	ldr	r3, [pc, #856]	; (8004a80 <main+0x7a0>)
 8004728:	191b      	adds	r3, r3, r4
 800472a:	19db      	adds	r3, r3, r7
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	1879      	adds	r1, r7, r1
 8004730:	6809      	ldr	r1, [r1, #0]
 8004732:	50d1      	str	r1, [r2, r3]
						cases = CmdPorta;
 8004734:	4bd3      	ldr	r3, [pc, #844]	; (8004a84 <main+0x7a4>)
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 16; i++) {
 800473c:	49cf      	ldr	r1, [pc, #828]	; (8004a7c <main+0x79c>)
 800473e:	187b      	adds	r3, r7, r1
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	187b      	adds	r3, r7, r1
 8004744:	3201      	adds	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	4bcc      	ldr	r3, [pc, #816]	; (8004a7c <main+0x79c>)
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	d800      	bhi.n	8004754 <main+0x474>
 8004752:	e779      	b.n	8004648 <main+0x368>
					}
				}
			}

			break;
 8004754:	f000 fd03 	bl	800515e <main+0xe7e>
		case CmdPorta:
			GPIO_Output(DOOR_GPIO_Port, DOOR_Pin, 1);
 8004758:	4bcb      	ldr	r3, [pc, #812]	; (8004a88 <main+0x7a8>)
 800475a:	2201      	movs	r2, #1
 800475c:	2102      	movs	r1, #2
 800475e:	0018      	movs	r0, r3
 8004760:	f7ff fcbe 	bl	80040e0 <GPIO_Output>
			delay_us(1000);
 8004764:	23fa      	movs	r3, #250	; 0xfa
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	0018      	movs	r0, r3
 800476a:	f000 ff77 	bl	800565c <delay_us>
			GPIO_Output(DOOR_GPIO_Port, DOOR_Pin, 0);
 800476e:	4bc6      	ldr	r3, [pc, #792]	; (8004a88 <main+0x7a8>)
 8004770:	2200      	movs	r2, #0
 8004772:	2102      	movs	r1, #2
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fcb3 	bl	80040e0 <GPIO_Output>
			clkCalendar.readClock(hour, second, minute, isPM);
 800477a:	2598      	movs	r5, #152	; 0x98
 800477c:	197c      	adds	r4, r7, r5
 800477e:	2394      	movs	r3, #148	; 0x94
 8004780:	18fa      	adds	r2, r7, r3
 8004782:	219c      	movs	r1, #156	; 0x9c
 8004784:	1879      	adds	r1, r7, r1
 8004786:	269e      	movs	r6, #158	; 0x9e
 8004788:	0076      	lsls	r6, r6, #1
 800478a:	19b8      	adds	r0, r7, r6
 800478c:	2690      	movs	r6, #144	; 0x90
 800478e:	19bb      	adds	r3, r7, r6
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	0023      	movs	r3, r4
 8004794:	f7fe f8b8 	bl	8002908 <_ZN5Clock9readClockERiS0_S0_S0_>
			log.insertAfterLast(rfid.getSensorID(), temp, 1, flagAcOn, hour, minute, second, isPM);
 8004798:	228e      	movs	r2, #142	; 0x8e
 800479a:	0052      	lsls	r2, r2, #1
 800479c:	18bb      	adds	r3, r7, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff fbba 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 80047a4:	4684      	mov	ip, r0
 80047a6:	4ab9      	ldr	r2, [pc, #740]	; (8004a8c <main+0x7ac>)
 80047a8:	18bb      	adds	r3, r7, r2
 80047aa:	781e      	ldrb	r6, [r3, #0]
 80047ac:	4ab8      	ldr	r2, [pc, #736]	; (8004a90 <main+0x7b0>)
 80047ae:	18bb      	adds	r3, r7, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	219c      	movs	r1, #156	; 0x9c
 80047b4:	187a      	adds	r2, r7, r1
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	1979      	adds	r1, r7, r5
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	2094      	movs	r0, #148	; 0x94
 80047be:	1838      	adds	r0, r7, r0
 80047c0:	6800      	ldr	r0, [r0, #0]
 80047c2:	2490      	movs	r4, #144	; 0x90
 80047c4:	193c      	adds	r4, r7, r4
 80047c6:	6824      	ldr	r4, [r4, #0]
 80047c8:	25d0      	movs	r5, #208	; 0xd0
 80047ca:	197d      	adds	r5, r7, r5
 80047cc:	9404      	str	r4, [sp, #16]
 80047ce:	9003      	str	r0, [sp, #12]
 80047d0:	9102      	str	r1, [sp, #8]
 80047d2:	9201      	str	r2, [sp, #4]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2301      	movs	r3, #1
 80047d8:	0032      	movs	r2, r6
 80047da:	4661      	mov	r1, ip
 80047dc:	0028      	movs	r0, r5
 80047de:	f7fe f94c 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
			cases = StandBy;
 80047e2:	4ba8      	ldr	r3, [pc, #672]	; (8004a84 <main+0x7a4>)
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
			break;
 80047ea:	f000 fcb8 	bl	800515e <main+0xe7e>
		case CmdAC:
			switch (temp) {
 80047ee:	4ba7      	ldr	r3, [pc, #668]	; (8004a8c <main+0x7ac>)
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	3b10      	subs	r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d900      	bls.n	80047fc <main+0x51c>
 80047fa:	e38d      	b.n	8004f18 <main+0xc38>
 80047fc:	009a      	lsls	r2, r3, #2
 80047fe:	4ba5      	ldr	r3, [pc, #660]	; (8004a94 <main+0x7b4>)
 8004800:	18d3      	adds	r3, r2, r3
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	469f      	mov	pc, r3
			case 16:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T16, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004806:	23d4      	movs	r3, #212	; 0xd4
 8004808:	18f8      	adds	r0, r7, r3
 800480a:	2300      	movs	r3, #0
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	2303      	movs	r3, #3
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	2301      	movs	r3, #1
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2336      	movs	r3, #54	; 0x36
 8004818:	2200      	movs	r2, #0
 800481a:	2104      	movs	r1, #4
 800481c:	f7fd fce0 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004820:	238e      	movs	r3, #142	; 0x8e
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fb76 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 800482c:	4684      	mov	ip, r0
 800482e:	4b97      	ldr	r3, [pc, #604]	; (8004a8c <main+0x7ac>)
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	781e      	ldrb	r6, [r3, #0]
 8004834:	4b96      	ldr	r3, [pc, #600]	; (8004a90 <main+0x7b0>)
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	229c      	movs	r2, #156	; 0x9c
 800483c:	18ba      	adds	r2, r7, r2
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	2198      	movs	r1, #152	; 0x98
 8004842:	1879      	adds	r1, r7, r1
 8004844:	6809      	ldr	r1, [r1, #0]
 8004846:	2094      	movs	r0, #148	; 0x94
 8004848:	1838      	adds	r0, r7, r0
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	2490      	movs	r4, #144	; 0x90
 800484e:	193c      	adds	r4, r7, r4
 8004850:	6824      	ldr	r4, [r4, #0]
 8004852:	25d0      	movs	r5, #208	; 0xd0
 8004854:	197d      	adds	r5, r7, r5
 8004856:	9404      	str	r4, [sp, #16]
 8004858:	9003      	str	r0, [sp, #12]
 800485a:	9102      	str	r1, [sp, #8]
 800485c:	9201      	str	r2, [sp, #4]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	0032      	movs	r2, r6
 8004864:	4661      	mov	r1, ip
 8004866:	0028      	movs	r0, r5
 8004868:	f7fe f907 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 800486c:	e388      	b.n	8004f80 <main+0xca0>
			case 17:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T17, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 800486e:	23d4      	movs	r3, #212	; 0xd4
 8004870:	18f8      	adds	r0, r7, r3
 8004872:	2300      	movs	r3, #0
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	2303      	movs	r3, #3
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2301      	movs	r3, #1
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	23b6      	movs	r3, #182	; 0xb6
 8004880:	2200      	movs	r2, #0
 8004882:	2104      	movs	r1, #4
 8004884:	f7fd fcac 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004888:	238e      	movs	r3, #142	; 0x8e
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	0018      	movs	r0, r3
 8004890:	f7ff fb42 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004894:	4684      	mov	ip, r0
 8004896:	4b7d      	ldr	r3, [pc, #500]	; (8004a8c <main+0x7ac>)
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	781e      	ldrb	r6, [r3, #0]
 800489c:	4b7c      	ldr	r3, [pc, #496]	; (8004a90 <main+0x7b0>)
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	229c      	movs	r2, #156	; 0x9c
 80048a4:	18ba      	adds	r2, r7, r2
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	2198      	movs	r1, #152	; 0x98
 80048aa:	1879      	adds	r1, r7, r1
 80048ac:	6809      	ldr	r1, [r1, #0]
 80048ae:	2094      	movs	r0, #148	; 0x94
 80048b0:	1838      	adds	r0, r7, r0
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	2490      	movs	r4, #144	; 0x90
 80048b6:	193c      	adds	r4, r7, r4
 80048b8:	6824      	ldr	r4, [r4, #0]
 80048ba:	25d0      	movs	r5, #208	; 0xd0
 80048bc:	197d      	adds	r5, r7, r5
 80048be:	9404      	str	r4, [sp, #16]
 80048c0:	9003      	str	r0, [sp, #12]
 80048c2:	9102      	str	r1, [sp, #8]
 80048c4:	9201      	str	r2, [sp, #4]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	0032      	movs	r2, r6
 80048cc:	4661      	mov	r1, ip
 80048ce:	0028      	movs	r0, r5
 80048d0:	f7fe f8d3 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 80048d4:	e354      	b.n	8004f80 <main+0xca0>
			case 18:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T18, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 80048d6:	23d4      	movs	r3, #212	; 0xd4
 80048d8:	18f8      	adds	r0, r7, r3
 80048da:	2300      	movs	r3, #0
 80048dc:	9302      	str	r3, [sp, #8]
 80048de:	2303      	movs	r3, #3
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	2301      	movs	r3, #1
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2376      	movs	r3, #118	; 0x76
 80048e8:	2200      	movs	r2, #0
 80048ea:	2104      	movs	r1, #4
 80048ec:	f7fd fc78 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 80048f0:	238e      	movs	r3, #142	; 0x8e
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7ff fb0e 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 80048fc:	4684      	mov	ip, r0
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <main+0x7ac>)
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	781e      	ldrb	r6, [r3, #0]
 8004904:	4b62      	ldr	r3, [pc, #392]	; (8004a90 <main+0x7b0>)
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	229c      	movs	r2, #156	; 0x9c
 800490c:	18ba      	adds	r2, r7, r2
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	2198      	movs	r1, #152	; 0x98
 8004912:	1879      	adds	r1, r7, r1
 8004914:	6809      	ldr	r1, [r1, #0]
 8004916:	2094      	movs	r0, #148	; 0x94
 8004918:	1838      	adds	r0, r7, r0
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	2490      	movs	r4, #144	; 0x90
 800491e:	193c      	adds	r4, r7, r4
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	25d0      	movs	r5, #208	; 0xd0
 8004924:	197d      	adds	r5, r7, r5
 8004926:	9404      	str	r4, [sp, #16]
 8004928:	9003      	str	r0, [sp, #12]
 800492a:	9102      	str	r1, [sp, #8]
 800492c:	9201      	str	r2, [sp, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	0032      	movs	r2, r6
 8004934:	4661      	mov	r1, ip
 8004936:	0028      	movs	r0, r5
 8004938:	f7fe f89f 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 800493c:	e320      	b.n	8004f80 <main+0xca0>
			case 19:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T19, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 800493e:	23d4      	movs	r3, #212	; 0xd4
 8004940:	18f8      	adds	r0, r7, r3
 8004942:	2300      	movs	r3, #0
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	2303      	movs	r3, #3
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2301      	movs	r3, #1
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	23f6      	movs	r3, #246	; 0xf6
 8004950:	2200      	movs	r2, #0
 8004952:	2104      	movs	r1, #4
 8004954:	f7fd fc44 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004958:	238e      	movs	r3, #142	; 0x8e
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	0018      	movs	r0, r3
 8004960:	f7ff fada 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004964:	4684      	mov	ip, r0
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <main+0x7ac>)
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	781e      	ldrb	r6, [r3, #0]
 800496c:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <main+0x7b0>)
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	229c      	movs	r2, #156	; 0x9c
 8004974:	18ba      	adds	r2, r7, r2
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	2198      	movs	r1, #152	; 0x98
 800497a:	1879      	adds	r1, r7, r1
 800497c:	6809      	ldr	r1, [r1, #0]
 800497e:	2094      	movs	r0, #148	; 0x94
 8004980:	1838      	adds	r0, r7, r0
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2490      	movs	r4, #144	; 0x90
 8004986:	193c      	adds	r4, r7, r4
 8004988:	6824      	ldr	r4, [r4, #0]
 800498a:	25d0      	movs	r5, #208	; 0xd0
 800498c:	197d      	adds	r5, r7, r5
 800498e:	9404      	str	r4, [sp, #16]
 8004990:	9003      	str	r0, [sp, #12]
 8004992:	9102      	str	r1, [sp, #8]
 8004994:	9201      	str	r2, [sp, #4]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	0032      	movs	r2, r6
 800499c:	4661      	mov	r1, ip
 800499e:	0028      	movs	r0, r5
 80049a0:	f7fe f86b 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 80049a4:	e2ec      	b.n	8004f80 <main+0xca0>
			case 20:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T20, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 80049a6:	23d4      	movs	r3, #212	; 0xd4
 80049a8:	18f8      	adds	r0, r7, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	2303      	movs	r3, #3
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	2301      	movs	r3, #1
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	230e      	movs	r3, #14
 80049b8:	2200      	movs	r2, #0
 80049ba:	2104      	movs	r1, #4
 80049bc:	f7fd fc10 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 80049c0:	238e      	movs	r3, #142	; 0x8e
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7ff faa6 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 80049cc:	4684      	mov	ip, r0
 80049ce:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <main+0x7ac>)
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	781e      	ldrb	r6, [r3, #0]
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <main+0x7b0>)
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	229c      	movs	r2, #156	; 0x9c
 80049dc:	18ba      	adds	r2, r7, r2
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	2198      	movs	r1, #152	; 0x98
 80049e2:	1879      	adds	r1, r7, r1
 80049e4:	6809      	ldr	r1, [r1, #0]
 80049e6:	2094      	movs	r0, #148	; 0x94
 80049e8:	1838      	adds	r0, r7, r0
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	2490      	movs	r4, #144	; 0x90
 80049ee:	193c      	adds	r4, r7, r4
 80049f0:	6824      	ldr	r4, [r4, #0]
 80049f2:	25d0      	movs	r5, #208	; 0xd0
 80049f4:	197d      	adds	r5, r7, r5
 80049f6:	9404      	str	r4, [sp, #16]
 80049f8:	9003      	str	r0, [sp, #12]
 80049fa:	9102      	str	r1, [sp, #8]
 80049fc:	9201      	str	r2, [sp, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	0032      	movs	r2, r6
 8004a04:	4661      	mov	r1, ip
 8004a06:	0028      	movs	r0, r5
 8004a08:	f7fe f837 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004a0c:	e2b8      	b.n	8004f80 <main+0xca0>
			case 21:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T21, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004a0e:	23d4      	movs	r3, #212	; 0xd4
 8004a10:	18f8      	adds	r0, r7, r3
 8004a12:	2300      	movs	r3, #0
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	2303      	movs	r3, #3
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	238e      	movs	r3, #142	; 0x8e
 8004a20:	2200      	movs	r2, #0
 8004a22:	2104      	movs	r1, #4
 8004a24:	f7fd fbdc 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004a28:	238e      	movs	r3, #142	; 0x8e
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7ff fa72 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004a34:	4684      	mov	ip, r0
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <main+0x7ac>)
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	781e      	ldrb	r6, [r3, #0]
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <main+0x7b0>)
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	229c      	movs	r2, #156	; 0x9c
 8004a44:	18ba      	adds	r2, r7, r2
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	2198      	movs	r1, #152	; 0x98
 8004a4a:	1879      	adds	r1, r7, r1
 8004a4c:	6809      	ldr	r1, [r1, #0]
 8004a4e:	2094      	movs	r0, #148	; 0x94
 8004a50:	1838      	adds	r0, r7, r0
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	2490      	movs	r4, #144	; 0x90
 8004a56:	193c      	adds	r4, r7, r4
 8004a58:	6824      	ldr	r4, [r4, #0]
 8004a5a:	25d0      	movs	r5, #208	; 0xd0
 8004a5c:	197d      	adds	r5, r7, r5
 8004a5e:	9404      	str	r4, [sp, #16]
 8004a60:	9003      	str	r0, [sp, #12]
 8004a62:	9102      	str	r1, [sp, #8]
 8004a64:	9201      	str	r2, [sp, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	0032      	movs	r2, r6
 8004a6c:	4661      	mov	r1, ip
 8004a6e:	0028      	movs	r0, r5
 8004a70:	f7fe f803 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004a74:	e284      	b.n	8004f80 <main+0xca0>
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	a3a59670 	.word	0xa3a59670
 8004a7c:	000002be 	.word	0x000002be
 8004a80:	fffffee8 	.word	0xfffffee8
 8004a84:	000002cf 	.word	0x000002cf
 8004a88:	48000400 	.word	0x48000400
 8004a8c:	000002bf 	.word	0x000002bf
 8004a90:	000002c7 	.word	0x000002c7
 8004a94:	08009dd8 	.word	0x08009dd8
			case 22:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T22, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004a98:	23d4      	movs	r3, #212	; 0xd4
 8004a9a:	18f8      	adds	r0, r7, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	234e      	movs	r3, #78	; 0x4e
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2104      	movs	r1, #4
 8004aae:	f7fd fb97 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004ab2:	238e      	movs	r3, #142	; 0x8e
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7ff fa2d 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004abe:	4684      	mov	ip, r0
 8004ac0:	4bdf      	ldr	r3, [pc, #892]	; (8004e40 <main+0xb60>)
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	781e      	ldrb	r6, [r3, #0]
 8004ac6:	4bdf      	ldr	r3, [pc, #892]	; (8004e44 <main+0xb64>)
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	229c      	movs	r2, #156	; 0x9c
 8004ace:	18ba      	adds	r2, r7, r2
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	2198      	movs	r1, #152	; 0x98
 8004ad4:	1879      	adds	r1, r7, r1
 8004ad6:	6809      	ldr	r1, [r1, #0]
 8004ad8:	2094      	movs	r0, #148	; 0x94
 8004ada:	1838      	adds	r0, r7, r0
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	2490      	movs	r4, #144	; 0x90
 8004ae0:	193c      	adds	r4, r7, r4
 8004ae2:	6824      	ldr	r4, [r4, #0]
 8004ae4:	25d0      	movs	r5, #208	; 0xd0
 8004ae6:	197d      	adds	r5, r7, r5
 8004ae8:	9404      	str	r4, [sp, #16]
 8004aea:	9003      	str	r0, [sp, #12]
 8004aec:	9102      	str	r1, [sp, #8]
 8004aee:	9201      	str	r2, [sp, #4]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	0032      	movs	r2, r6
 8004af6:	4661      	mov	r1, ip
 8004af8:	0028      	movs	r0, r5
 8004afa:	f7fd ffbe 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004afe:	e23f      	b.n	8004f80 <main+0xca0>
			case 23:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T23, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004b00:	23d4      	movs	r3, #212	; 0xd4
 8004b02:	18f8      	adds	r0, r7, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2303      	movs	r3, #3
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	23ce      	movs	r3, #206	; 0xce
 8004b12:	2200      	movs	r2, #0
 8004b14:	2104      	movs	r1, #4
 8004b16:	f7fd fb63 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004b1a:	238e      	movs	r3, #142	; 0x8e
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7ff f9f9 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004b26:	4684      	mov	ip, r0
 8004b28:	4bc5      	ldr	r3, [pc, #788]	; (8004e40 <main+0xb60>)
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	781e      	ldrb	r6, [r3, #0]
 8004b2e:	4bc5      	ldr	r3, [pc, #788]	; (8004e44 <main+0xb64>)
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	229c      	movs	r2, #156	; 0x9c
 8004b36:	18ba      	adds	r2, r7, r2
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	2198      	movs	r1, #152	; 0x98
 8004b3c:	1879      	adds	r1, r7, r1
 8004b3e:	6809      	ldr	r1, [r1, #0]
 8004b40:	2094      	movs	r0, #148	; 0x94
 8004b42:	1838      	adds	r0, r7, r0
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	2490      	movs	r4, #144	; 0x90
 8004b48:	193c      	adds	r4, r7, r4
 8004b4a:	6824      	ldr	r4, [r4, #0]
 8004b4c:	25d0      	movs	r5, #208	; 0xd0
 8004b4e:	197d      	adds	r5, r7, r5
 8004b50:	9404      	str	r4, [sp, #16]
 8004b52:	9003      	str	r0, [sp, #12]
 8004b54:	9102      	str	r1, [sp, #8]
 8004b56:	9201      	str	r2, [sp, #4]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	0032      	movs	r2, r6
 8004b5e:	4661      	mov	r1, ip
 8004b60:	0028      	movs	r0, r5
 8004b62:	f7fd ff8a 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004b66:	e20b      	b.n	8004f80 <main+0xca0>
			case 24:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T24, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004b68:	23d4      	movs	r3, #212	; 0xd4
 8004b6a:	18f8      	adds	r0, r7, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2303      	movs	r3, #3
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	2301      	movs	r3, #1
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	232e      	movs	r3, #46	; 0x2e
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	f7fd fb2f 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004b82:	238e      	movs	r3, #142	; 0x8e
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff f9c5 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004b8e:	4684      	mov	ip, r0
 8004b90:	4bab      	ldr	r3, [pc, #684]	; (8004e40 <main+0xb60>)
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781e      	ldrb	r6, [r3, #0]
 8004b96:	4bab      	ldr	r3, [pc, #684]	; (8004e44 <main+0xb64>)
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	229c      	movs	r2, #156	; 0x9c
 8004b9e:	18ba      	adds	r2, r7, r2
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	2198      	movs	r1, #152	; 0x98
 8004ba4:	1879      	adds	r1, r7, r1
 8004ba6:	6809      	ldr	r1, [r1, #0]
 8004ba8:	2094      	movs	r0, #148	; 0x94
 8004baa:	1838      	adds	r0, r7, r0
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	2490      	movs	r4, #144	; 0x90
 8004bb0:	193c      	adds	r4, r7, r4
 8004bb2:	6824      	ldr	r4, [r4, #0]
 8004bb4:	25d0      	movs	r5, #208	; 0xd0
 8004bb6:	197d      	adds	r5, r7, r5
 8004bb8:	9404      	str	r4, [sp, #16]
 8004bba:	9003      	str	r0, [sp, #12]
 8004bbc:	9102      	str	r1, [sp, #8]
 8004bbe:	9201      	str	r2, [sp, #4]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	0032      	movs	r2, r6
 8004bc6:	4661      	mov	r1, ip
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f7fd ff56 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004bce:	e1d7      	b.n	8004f80 <main+0xca0>
			case 25:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T25, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004bd0:	23d4      	movs	r3, #212	; 0xd4
 8004bd2:	18f8      	adds	r0, r7, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9302      	str	r3, [sp, #8]
 8004bd8:	2303      	movs	r3, #3
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	23ae      	movs	r3, #174	; 0xae
 8004be2:	2200      	movs	r2, #0
 8004be4:	2104      	movs	r1, #4
 8004be6:	f7fd fafb 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004bea:	238e      	movs	r3, #142	; 0x8e
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7ff f991 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004bf6:	4684      	mov	ip, r0
 8004bf8:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <main+0xb60>)
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781e      	ldrb	r6, [r3, #0]
 8004bfe:	4b91      	ldr	r3, [pc, #580]	; (8004e44 <main+0xb64>)
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	229c      	movs	r2, #156	; 0x9c
 8004c06:	18ba      	adds	r2, r7, r2
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	2198      	movs	r1, #152	; 0x98
 8004c0c:	1879      	adds	r1, r7, r1
 8004c0e:	6809      	ldr	r1, [r1, #0]
 8004c10:	2094      	movs	r0, #148	; 0x94
 8004c12:	1838      	adds	r0, r7, r0
 8004c14:	6800      	ldr	r0, [r0, #0]
 8004c16:	2490      	movs	r4, #144	; 0x90
 8004c18:	193c      	adds	r4, r7, r4
 8004c1a:	6824      	ldr	r4, [r4, #0]
 8004c1c:	25d0      	movs	r5, #208	; 0xd0
 8004c1e:	197d      	adds	r5, r7, r5
 8004c20:	9404      	str	r4, [sp, #16]
 8004c22:	9003      	str	r0, [sp, #12]
 8004c24:	9102      	str	r1, [sp, #8]
 8004c26:	9201      	str	r2, [sp, #4]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	0032      	movs	r2, r6
 8004c2e:	4661      	mov	r1, ip
 8004c30:	0028      	movs	r0, r5
 8004c32:	f7fd ff22 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004c36:	e1a3      	b.n	8004f80 <main+0xca0>
			case 26:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T26, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004c38:	23d4      	movs	r3, #212	; 0xd4
 8004c3a:	18f8      	adds	r0, r7, r3
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	2303      	movs	r3, #3
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	2301      	movs	r3, #1
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	236e      	movs	r3, #110	; 0x6e
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2104      	movs	r1, #4
 8004c4e:	f7fd fac7 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004c52:	238e      	movs	r3, #142	; 0x8e
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff f95d 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004c5e:	4684      	mov	ip, r0
 8004c60:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <main+0xb60>)
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	781e      	ldrb	r6, [r3, #0]
 8004c66:	4b77      	ldr	r3, [pc, #476]	; (8004e44 <main+0xb64>)
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	229c      	movs	r2, #156	; 0x9c
 8004c6e:	18ba      	adds	r2, r7, r2
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	2198      	movs	r1, #152	; 0x98
 8004c74:	1879      	adds	r1, r7, r1
 8004c76:	6809      	ldr	r1, [r1, #0]
 8004c78:	2094      	movs	r0, #148	; 0x94
 8004c7a:	1838      	adds	r0, r7, r0
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	2490      	movs	r4, #144	; 0x90
 8004c80:	193c      	adds	r4, r7, r4
 8004c82:	6824      	ldr	r4, [r4, #0]
 8004c84:	25d0      	movs	r5, #208	; 0xd0
 8004c86:	197d      	adds	r5, r7, r5
 8004c88:	9404      	str	r4, [sp, #16]
 8004c8a:	9003      	str	r0, [sp, #12]
 8004c8c:	9102      	str	r1, [sp, #8]
 8004c8e:	9201      	str	r2, [sp, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	0032      	movs	r2, r6
 8004c96:	4661      	mov	r1, ip
 8004c98:	0028      	movs	r0, r5
 8004c9a:	f7fd feee 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004c9e:	e16f      	b.n	8004f80 <main+0xca0>
			case 27:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T27, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004ca0:	23d4      	movs	r3, #212	; 0xd4
 8004ca2:	18f8      	adds	r0, r7, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	2303      	movs	r3, #3
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	2301      	movs	r3, #1
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	23ee      	movs	r3, #238	; 0xee
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	f7fd fa93 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004cba:	238e      	movs	r3, #142	; 0x8e
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff f929 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004cc6:	4684      	mov	ip, r0
 8004cc8:	4b5d      	ldr	r3, [pc, #372]	; (8004e40 <main+0xb60>)
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	781e      	ldrb	r6, [r3, #0]
 8004cce:	4b5d      	ldr	r3, [pc, #372]	; (8004e44 <main+0xb64>)
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	229c      	movs	r2, #156	; 0x9c
 8004cd6:	18ba      	adds	r2, r7, r2
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	2198      	movs	r1, #152	; 0x98
 8004cdc:	1879      	adds	r1, r7, r1
 8004cde:	6809      	ldr	r1, [r1, #0]
 8004ce0:	2094      	movs	r0, #148	; 0x94
 8004ce2:	1838      	adds	r0, r7, r0
 8004ce4:	6800      	ldr	r0, [r0, #0]
 8004ce6:	2490      	movs	r4, #144	; 0x90
 8004ce8:	193c      	adds	r4, r7, r4
 8004cea:	6824      	ldr	r4, [r4, #0]
 8004cec:	25d0      	movs	r5, #208	; 0xd0
 8004cee:	197d      	adds	r5, r7, r5
 8004cf0:	9404      	str	r4, [sp, #16]
 8004cf2:	9003      	str	r0, [sp, #12]
 8004cf4:	9102      	str	r1, [sp, #8]
 8004cf6:	9201      	str	r2, [sp, #4]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	0032      	movs	r2, r6
 8004cfe:	4661      	mov	r1, ip
 8004d00:	0028      	movs	r0, r5
 8004d02:	f7fd feba 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004d06:	e13b      	b.n	8004f80 <main+0xca0>
			case 28:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T28, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004d08:	23d4      	movs	r3, #212	; 0xd4
 8004d0a:	18f8      	adds	r0, r7, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	2303      	movs	r3, #3
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	2301      	movs	r3, #1
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	231e      	movs	r3, #30
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2104      	movs	r1, #4
 8004d1e:	f7fd fa5f 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004d22:	238e      	movs	r3, #142	; 0x8e
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff f8f5 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004d2e:	4684      	mov	ip, r0
 8004d30:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <main+0xb60>)
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781e      	ldrb	r6, [r3, #0]
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <main+0xb64>)
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	229c      	movs	r2, #156	; 0x9c
 8004d3e:	18ba      	adds	r2, r7, r2
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	2198      	movs	r1, #152	; 0x98
 8004d44:	1879      	adds	r1, r7, r1
 8004d46:	6809      	ldr	r1, [r1, #0]
 8004d48:	2094      	movs	r0, #148	; 0x94
 8004d4a:	1838      	adds	r0, r7, r0
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	2490      	movs	r4, #144	; 0x90
 8004d50:	193c      	adds	r4, r7, r4
 8004d52:	6824      	ldr	r4, [r4, #0]
 8004d54:	25d0      	movs	r5, #208	; 0xd0
 8004d56:	197d      	adds	r5, r7, r5
 8004d58:	9404      	str	r4, [sp, #16]
 8004d5a:	9003      	str	r0, [sp, #12]
 8004d5c:	9102      	str	r1, [sp, #8]
 8004d5e:	9201      	str	r2, [sp, #4]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	0032      	movs	r2, r6
 8004d66:	4661      	mov	r1, ip
 8004d68:	0028      	movs	r0, r5
 8004d6a:	f7fd fe86 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004d6e:	e107      	b.n	8004f80 <main+0xca0>
			case 29:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T29, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004d70:	23d4      	movs	r3, #212	; 0xd4
 8004d72:	18f8      	adds	r0, r7, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	2303      	movs	r3, #3
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	239e      	movs	r3, #158	; 0x9e
 8004d82:	2200      	movs	r2, #0
 8004d84:	2104      	movs	r1, #4
 8004d86:	f7fd fa2b 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004d8a:	238e      	movs	r3, #142	; 0x8e
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff f8c1 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004d96:	4684      	mov	ip, r0
 8004d98:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <main+0xb60>)
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781e      	ldrb	r6, [r3, #0]
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <main+0xb64>)
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	229c      	movs	r2, #156	; 0x9c
 8004da6:	18ba      	adds	r2, r7, r2
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	2198      	movs	r1, #152	; 0x98
 8004dac:	1879      	adds	r1, r7, r1
 8004dae:	6809      	ldr	r1, [r1, #0]
 8004db0:	2094      	movs	r0, #148	; 0x94
 8004db2:	1838      	adds	r0, r7, r0
 8004db4:	6800      	ldr	r0, [r0, #0]
 8004db6:	2490      	movs	r4, #144	; 0x90
 8004db8:	193c      	adds	r4, r7, r4
 8004dba:	6824      	ldr	r4, [r4, #0]
 8004dbc:	25d0      	movs	r5, #208	; 0xd0
 8004dbe:	197d      	adds	r5, r7, r5
 8004dc0:	9404      	str	r4, [sp, #16]
 8004dc2:	9003      	str	r0, [sp, #12]
 8004dc4:	9102      	str	r1, [sp, #8]
 8004dc6:	9201      	str	r2, [sp, #4]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	0032      	movs	r2, r6
 8004dce:	4661      	mov	r1, ip
 8004dd0:	0028      	movs	r0, r5
 8004dd2:	f7fd fe52 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004dd6:	e0d3      	b.n	8004f80 <main+0xca0>
			case 30:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T30, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004dd8:	23d4      	movs	r3, #212	; 0xd4
 8004dda:	18f8      	adds	r0, r7, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	2303      	movs	r3, #3
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	2301      	movs	r3, #1
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	235e      	movs	r3, #94	; 0x5e
 8004dea:	2200      	movs	r2, #0
 8004dec:	2104      	movs	r1, #4
 8004dee:	f7fd f9f7 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004df2:	238e      	movs	r3, #142	; 0x8e
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff f88d 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004dfe:	4684      	mov	ip, r0
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <main+0xb60>)
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	781e      	ldrb	r6, [r3, #0]
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <main+0xb64>)
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	229c      	movs	r2, #156	; 0x9c
 8004e0e:	18ba      	adds	r2, r7, r2
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	2198      	movs	r1, #152	; 0x98
 8004e14:	1879      	adds	r1, r7, r1
 8004e16:	6809      	ldr	r1, [r1, #0]
 8004e18:	2094      	movs	r0, #148	; 0x94
 8004e1a:	1838      	adds	r0, r7, r0
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	2490      	movs	r4, #144	; 0x90
 8004e20:	193c      	adds	r4, r7, r4
 8004e22:	6824      	ldr	r4, [r4, #0]
 8004e24:	25d0      	movs	r5, #208	; 0xd0
 8004e26:	197d      	adds	r5, r7, r5
 8004e28:	9404      	str	r4, [sp, #16]
 8004e2a:	9003      	str	r0, [sp, #12]
 8004e2c:	9102      	str	r1, [sp, #8]
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	0032      	movs	r2, r6
 8004e36:	4661      	mov	r1, ip
 8004e38:	0028      	movs	r0, r5
 8004e3a:	f7fd fe1e 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004e3e:	e09f      	b.n	8004f80 <main+0xca0>
 8004e40:	000002bf 	.word	0x000002bf
 8004e44:	000002c7 	.word	0x000002c7
			case 31:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T31, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004e48:	23d4      	movs	r3, #212	; 0xd4
 8004e4a:	18f8      	adds	r0, r7, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	2303      	movs	r3, #3
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2301      	movs	r3, #1
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	23de      	movs	r3, #222	; 0xde
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	f7fd f9bf 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004e62:	238e      	movs	r3, #142	; 0x8e
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7ff f855 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004e6e:	4684      	mov	ip, r0
 8004e70:	4bc1      	ldr	r3, [pc, #772]	; (8005178 <main+0xe98>)
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	781e      	ldrb	r6, [r3, #0]
 8004e76:	4bc1      	ldr	r3, [pc, #772]	; (800517c <main+0xe9c>)
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	229c      	movs	r2, #156	; 0x9c
 8004e7e:	18ba      	adds	r2, r7, r2
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	2198      	movs	r1, #152	; 0x98
 8004e84:	1879      	adds	r1, r7, r1
 8004e86:	6809      	ldr	r1, [r1, #0]
 8004e88:	2094      	movs	r0, #148	; 0x94
 8004e8a:	1838      	adds	r0, r7, r0
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	2490      	movs	r4, #144	; 0x90
 8004e90:	193c      	adds	r4, r7, r4
 8004e92:	6824      	ldr	r4, [r4, #0]
 8004e94:	25d0      	movs	r5, #208	; 0xd0
 8004e96:	197d      	adds	r5, r7, r5
 8004e98:	9404      	str	r4, [sp, #16]
 8004e9a:	9003      	str	r0, [sp, #12]
 8004e9c:	9102      	str	r1, [sp, #8]
 8004e9e:	9201      	str	r2, [sp, #4]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	0032      	movs	r2, r6
 8004ea6:	4661      	mov	r1, ip
 8004ea8:	0028      	movs	r0, r5
 8004eaa:	f7fd fde6 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004eae:	e067      	b.n	8004f80 <main+0xca0>
			case 32:
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T32, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004eb0:	23d4      	movs	r3, #212	; 0xd4
 8004eb2:	18f8      	adds	r0, r7, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	2303      	movs	r3, #3
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	233e      	movs	r3, #62	; 0x3e
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	f7fd f98b 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004eca:	238e      	movs	r3, #142	; 0x8e
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff f821 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004ed6:	4684      	mov	ip, r0
 8004ed8:	4ba7      	ldr	r3, [pc, #668]	; (8005178 <main+0xe98>)
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	781e      	ldrb	r6, [r3, #0]
 8004ede:	4ba7      	ldr	r3, [pc, #668]	; (800517c <main+0xe9c>)
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	229c      	movs	r2, #156	; 0x9c
 8004ee6:	18ba      	adds	r2, r7, r2
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	2198      	movs	r1, #152	; 0x98
 8004eec:	1879      	adds	r1, r7, r1
 8004eee:	6809      	ldr	r1, [r1, #0]
 8004ef0:	2094      	movs	r0, #148	; 0x94
 8004ef2:	1838      	adds	r0, r7, r0
 8004ef4:	6800      	ldr	r0, [r0, #0]
 8004ef6:	2490      	movs	r4, #144	; 0x90
 8004ef8:	193c      	adds	r4, r7, r4
 8004efa:	6824      	ldr	r4, [r4, #0]
 8004efc:	25d0      	movs	r5, #208	; 0xd0
 8004efe:	197d      	adds	r5, r7, r5
 8004f00:	9404      	str	r4, [sp, #16]
 8004f02:	9003      	str	r0, [sp, #12]
 8004f04:	9102      	str	r1, [sp, #8]
 8004f06:	9201      	str	r2, [sp, #4]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	0032      	movs	r2, r6
 8004f0e:	4661      	mov	r1, ip
 8004f10:	0028      	movs	r0, r5
 8004f12:	f7fd fdb2 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004f16:	e033      	b.n	8004f80 <main+0xca0>
			default: //liga o ar e seta em 24
				ac.sendCommand(AC_controller::COOL, AC_controller::FAN_AUTO, AC_controller::T24, AC_controller::TURBO_ON, AC_controller::SWING_ON, AC_controller::SHEET_ON);
 8004f18:	23d4      	movs	r3, #212	; 0xd4
 8004f1a:	18f8      	adds	r0, r7, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	2303      	movs	r3, #3
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2301      	movs	r3, #1
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	232e      	movs	r3, #46	; 0x2e
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	f7fd f957 	bl	80021e0 <_ZN13AC_controller11sendCommandENS_4ModeENS_3FanENS_11TemperatureENS_5TurboENS_5SwingENS_5SheetE>
				log.insertAfterLast(rfid.getSensorID(), temp, 0, flagAcOn, hour, minute, second, isPM);
 8004f32:	238e      	movs	r3, #142	; 0x8e
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7fe ffed 	bl	8003f18 <_ZN4RFID11getSensorIDEv>
 8004f3e:	4684      	mov	ip, r0
 8004f40:	4b8d      	ldr	r3, [pc, #564]	; (8005178 <main+0xe98>)
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	781e      	ldrb	r6, [r3, #0]
 8004f46:	4b8d      	ldr	r3, [pc, #564]	; (800517c <main+0xe9c>)
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	229c      	movs	r2, #156	; 0x9c
 8004f4e:	18ba      	adds	r2, r7, r2
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	2198      	movs	r1, #152	; 0x98
 8004f54:	1879      	adds	r1, r7, r1
 8004f56:	6809      	ldr	r1, [r1, #0]
 8004f58:	2094      	movs	r0, #148	; 0x94
 8004f5a:	1838      	adds	r0, r7, r0
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	2490      	movs	r4, #144	; 0x90
 8004f60:	193c      	adds	r4, r7, r4
 8004f62:	6824      	ldr	r4, [r4, #0]
 8004f64:	25d0      	movs	r5, #208	; 0xd0
 8004f66:	197d      	adds	r5, r7, r5
 8004f68:	9404      	str	r4, [sp, #16]
 8004f6a:	9003      	str	r0, [sp, #12]
 8004f6c:	9102      	str	r1, [sp, #8]
 8004f6e:	9201      	str	r2, [sp, #4]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	0032      	movs	r2, r6
 8004f76:	4661      	mov	r1, ip
 8004f78:	0028      	movs	r0, r5
 8004f7a:	f7fd fd7e 	bl	8002a7a <_ZN4List15insertAfterLastEiiiiiiii>
				break;
 8004f7e:	46c0      	nop			; (mov r8, r8)
			}
			cases = StandBy;
 8004f80:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <main+0xea0>)
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
			break;
 8004f88:	e0e9      	b.n	800515e <main+0xe7e>

		case CommAndroid:
			if(flagAcOn) cases = CmdAC;
 8004f8a:	4b7c      	ldr	r3, [pc, #496]	; (800517c <main+0xe9c>)
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <main+0xcbe>
 8004f94:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <main+0xea0>)
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2202      	movs	r2, #2
 8004f9a:	701a      	strb	r2, [r3, #0]
			else if (flagPlusTemp){
				temp++;
				cases = CmdAC;
			}

			break;
 8004f9c:	e0de      	b.n	800515c <main+0xe7c>
			else if (flagDoorOpen) cases = CmdPorta;
 8004f9e:	4b79      	ldr	r3, [pc, #484]	; (8005184 <main+0xea4>)
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <main+0xcd2>
 8004fa8:	4b75      	ldr	r3, [pc, #468]	; (8005180 <main+0xea0>)
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
			break;
 8004fb0:	e0d4      	b.n	800515c <main+0xe7c>
			else if(flagMinusTemp){
 8004fb2:	23b1      	movs	r3, #177	; 0xb1
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <main+0xcf4>
				temp--;
 8004fbe:	496e      	ldr	r1, [pc, #440]	; (8005178 <main+0xe98>)
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	781a      	ldrb	r2, [r3, #0]
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
				cases = CmdAC;
 8004fca:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <main+0xea0>)
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
			break;
 8004fd2:	e0c3      	b.n	800515c <main+0xe7c>
			else if (flagPlusTemp){
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	; (8005188 <main+0xea8>)
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d100      	bne.n	8004fe0 <main+0xd00>
 8004fde:	e0bd      	b.n	800515c <main+0xe7c>
				temp++;
 8004fe0:	4965      	ldr	r1, [pc, #404]	; (8005178 <main+0xe98>)
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	3201      	adds	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
				cases = CmdAC;
 8004fec:	4b64      	ldr	r3, [pc, #400]	; (8005180 <main+0xea0>)
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	701a      	strb	r2, [r3, #0]
			break;
 8004ff4:	e0b2      	b.n	800515c <main+0xe7c>
		case CmdLog:
			int bmpTemp = temperature*1000;
 8004ff6:	4965      	ldr	r1, [pc, #404]	; (800518c <main+0xeac>)
 8004ff8:	23b0      	movs	r3, #176	; 0xb0
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	f7fb f91e 	bl	8000240 <__aeabi_fmul>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	1c18      	adds	r0, r3, #0
 8005008:	f7fb fa68 	bl	80004dc <__aeabi_f2iz>
 800500c:	0003      	movs	r3, r0
 800500e:	22a5      	movs	r2, #165	; 0xa5
 8005010:	0092      	lsls	r2, r2, #2
 8005012:	18b9      	adds	r1, r7, r2
 8005014:	600b      	str	r3, [r1, #0]
			char sendTemp[10];
			sprintf(sendTemp, "%d", bmpTemp);
 8005016:	18bb      	adds	r3, r7, r2
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	495d      	ldr	r1, [pc, #372]	; (8005190 <main+0xeb0>)
 800501c:	2584      	movs	r5, #132	; 0x84
 800501e:	197b      	adds	r3, r7, r5
 8005020:	0018      	movs	r0, r3
 8005022:	f004 f9b7 	bl	8009394 <siprintf>
			mqtt.Publish(topic_out, sendTemp);
 8005026:	249c      	movs	r4, #156	; 0x9c
 8005028:	00a4      	lsls	r4, r4, #2
 800502a:	193b      	adds	r3, r7, r4
 800502c:	0018      	movs	r0, r3
 800502e:	f003 ff9f 	bl	8008f70 <_ZNSaIcEC1Ev>
 8005032:	193a      	adds	r2, r7, r4
 8005034:	1979      	adds	r1, r7, r5
 8005036:	2596      	movs	r5, #150	; 0x96
 8005038:	00ad      	lsls	r5, r5, #2
 800503a:	197b      	adds	r3, r7, r5
 800503c:	0018      	movs	r0, r3
 800503e:	f004 f8b3 	bl	80091a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005042:	197a      	adds	r2, r7, r5
 8005044:	23a7      	movs	r3, #167	; 0xa7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	23a0      	movs	r3, #160	; 0xa0
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	0018      	movs	r0, r3
 8005052:	f7fd ff08 	bl	8002e66 <_ZN4MQTT7PublishEPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005056:	197b      	adds	r3, r7, r5
 8005058:	0018      	movs	r0, r3
 800505a:	f004 f817 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800505e:	193b      	adds	r3, r7, r4
 8005060:	0018      	movs	r0, r3
 8005062:	f003 ff86 	bl	8008f72 <_ZNSaIcED1Ev>

			int	T[8] = {0}; //buffer transmissao log
 8005066:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <main+0xeb4>)
 8005068:	22b4      	movs	r2, #180	; 0xb4
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	189b      	adds	r3, r3, r2
 800506e:	19db      	adds	r3, r3, r7
 8005070:	0018      	movs	r0, r3
 8005072:	2320      	movs	r3, #32
 8005074:	001a      	movs	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	f004 f9cd 	bl	8009416 <memset>
			char sendLog[100];
			for (uint8_t numNodes = 0; numNodes < log.listAll(); numNodes++) {
 800507c:	4b46      	ldr	r3, [pc, #280]	; (8005198 <main+0xeb8>)
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e058      	b.n	8005138 <main+0xe58>
				log.removeFirst(T[0], T[1], T[2], T[3], T[4], T[5], T[6], T[7]);
 8005086:	003b      	movs	r3, r7
 8005088:	3308      	adds	r3, #8
 800508a:	001c      	movs	r4, r3
 800508c:	003b      	movs	r3, r7
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	0039      	movs	r1, r7
 8005092:	23d0      	movs	r3, #208	; 0xd0
 8005094:	18f8      	adds	r0, r7, r3
 8005096:	003b      	movs	r3, r7
 8005098:	331c      	adds	r3, #28
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	003b      	movs	r3, r7
 800509e:	3318      	adds	r3, #24
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	003b      	movs	r3, r7
 80050a4:	3314      	adds	r3, #20
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	003b      	movs	r3, r7
 80050aa:	3310      	adds	r3, #16
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	003b      	movs	r3, r7
 80050b0:	330c      	adds	r3, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	0023      	movs	r3, r4
 80050b6:	f7fd fd39 	bl	8002b2c <_ZN4List11removeFirstERiS0_S0_S0_S0_S0_S0_S0_>
				sprintf(sendLog, "%d", T[numNodes]);
 80050ba:	4c37      	ldr	r4, [pc, #220]	; (8005198 <main+0xeb8>)
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	4b34      	ldr	r3, [pc, #208]	; (8005194 <main+0xeb4>)
 80050c2:	21b4      	movs	r1, #180	; 0xb4
 80050c4:	0089      	lsls	r1, r1, #2
 80050c6:	185b      	adds	r3, r3, r1
 80050c8:	19db      	adds	r3, r3, r7
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	58d2      	ldr	r2, [r2, r3]
 80050ce:	4930      	ldr	r1, [pc, #192]	; (8005190 <main+0xeb0>)
 80050d0:	2620      	movs	r6, #32
 80050d2:	19bb      	adds	r3, r7, r6
 80050d4:	0018      	movs	r0, r3
 80050d6:	f004 f95d 	bl	8009394 <siprintf>
				mqtt.Publish(topic_out, sendLog);
 80050da:	25a3      	movs	r5, #163	; 0xa3
 80050dc:	00ad      	lsls	r5, r5, #2
 80050de:	197b      	adds	r3, r7, r5
 80050e0:	0018      	movs	r0, r3
 80050e2:	f003 ff45 	bl	8008f70 <_ZNSaIcEC1Ev>
 80050e6:	197a      	adds	r2, r7, r5
 80050e8:	19b9      	adds	r1, r7, r6
 80050ea:	269d      	movs	r6, #157	; 0x9d
 80050ec:	00b6      	lsls	r6, r6, #2
 80050ee:	19bb      	adds	r3, r7, r6
 80050f0:	0018      	movs	r0, r3
 80050f2:	f004 f859 	bl	80091a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80050f6:	19ba      	adds	r2, r7, r6
 80050f8:	23a7      	movs	r3, #167	; 0xa7
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	23a0      	movs	r3, #160	; 0xa0
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	0018      	movs	r0, r3
 8005106:	f7fd feae 	bl	8002e66 <_ZN4MQTT7PublishEPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800510a:	19bb      	adds	r3, r7, r6
 800510c:	0018      	movs	r0, r3
 800510e:	f003 ffbd 	bl	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005112:	197b      	adds	r3, r7, r5
 8005114:	0018      	movs	r0, r3
 8005116:	f003 ff2c 	bl	8008f72 <_ZNSaIcED1Ev>
				T[numNodes] = 0; //limpa o buffer;
 800511a:	193b      	adds	r3, r7, r4
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <main+0xeb4>)
 8005120:	21b4      	movs	r1, #180	; 0xb4
 8005122:	0089      	lsls	r1, r1, #2
 8005124:	185b      	adds	r3, r3, r1
 8005126:	19db      	adds	r3, r3, r7
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	2100      	movs	r1, #0
 800512c:	50d1      	str	r1, [r2, r3]
			for (uint8_t numNodes = 0; numNodes < log.listAll(); numNodes++) {
 800512e:	193b      	adds	r3, r7, r4
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	193b      	adds	r3, r7, r4
 8005134:	3201      	adds	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <main+0xeb8>)
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	781c      	ldrb	r4, [r3, #0]
 800513e:	23d0      	movs	r3, #208	; 0xd0
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	0018      	movs	r0, r3
 8005144:	f7fd fd53 	bl	8002bee <_ZN4List7listAllEv>
 8005148:	0003      	movs	r3, r0
 800514a:	2201      	movs	r2, #1
 800514c:	429c      	cmp	r4, r3
 800514e:	db01      	blt.n	8005154 <main+0xe74>
 8005150:	2300      	movs	r3, #0
 8005152:	1c1a      	adds	r2, r3, #0
 8005154:	b2d3      	uxtb	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d195      	bne.n	8005086 <main+0xda6>
			}
			break;
 800515a:	e000      	b.n	800515e <main+0xe7e>
			break;
 800515c:	46c0      	nop			; (mov r8, r8)

//		default:
//			break;
		}

		clkCalendar.advance();
 800515e:	239e      	movs	r3, #158	; 0x9e
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	0018      	movs	r0, r3
 8005166:	f7fd fc5c 	bl	8002a22 <_ZN13ClockCalendar7advanceEv>
		HAL_Delay(1000);
 800516a:	23fa      	movs	r3, #250	; 0xfa
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	0018      	movs	r0, r3
 8005170:	f000 fbfa 	bl	8005968 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 8005174:	f7ff f97b 	bl	800446e <main+0x18e>
 8005178:	000002bf 	.word	0x000002bf
 800517c:	000002c7 	.word	0x000002c7
 8005180:	000002cf 	.word	0x000002cf
 8005184:	000002c6 	.word	0x000002c6
 8005188:	000002c5 	.word	0x000002c5
 800518c:	447a0000 	.word	0x447a0000
 8005190:	08009d48 	.word	0x08009d48
 8005194:	fffffd30 	.word	0xfffffd30
 8005198:	000002bd 	.word	0x000002bd

0800519c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b099      	sub	sp, #100	; 0x64
 80051a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051a2:	242c      	movs	r4, #44	; 0x2c
 80051a4:	193b      	adds	r3, r7, r4
 80051a6:	0018      	movs	r0, r3
 80051a8:	2334      	movs	r3, #52	; 0x34
 80051aa:	001a      	movs	r2, r3
 80051ac:	2100      	movs	r1, #0
 80051ae:	f004 f932 	bl	8009416 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051b2:	231c      	movs	r3, #28
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	0018      	movs	r0, r3
 80051b8:	2310      	movs	r3, #16
 80051ba:	001a      	movs	r2, r3
 80051bc:	2100      	movs	r1, #0
 80051be:	f004 f92a 	bl	8009416 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051c2:	003b      	movs	r3, r7
 80051c4:	0018      	movs	r0, r3
 80051c6:	231c      	movs	r3, #28
 80051c8:	001a      	movs	r2, r3
 80051ca:	2100      	movs	r1, #0
 80051cc:	f004 f923 	bl	8009416 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80051d0:	0021      	movs	r1, r4
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	2222      	movs	r2, #34	; 0x22
 80051d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2201      	movs	r2, #1
 80051dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2201      	movs	r2, #1
 80051e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	2210      	movs	r2, #16
 80051e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	2200      	movs	r2, #0
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051f0:	187b      	adds	r3, r7, r1
 80051f2:	0018      	movs	r0, r3
 80051f4:	f001 fc1a 	bl	8006a2c <HAL_RCC_OscConfig>
 80051f8:	0003      	movs	r3, r0
 80051fa:	1e5a      	subs	r2, r3, #1
 80051fc:	4193      	sbcs	r3, r2
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8005204:	f000 f833 	bl	800526e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005208:	211c      	movs	r1, #28
 800520a:	187b      	adds	r3, r7, r1
 800520c:	2207      	movs	r2, #7
 800520e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8005210:	187b      	adds	r3, r7, r1
 8005212:	2203      	movs	r2, #3
 8005214:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005216:	187b      	adds	r3, r7, r1
 8005218:	2200      	movs	r2, #0
 800521a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800521c:	187b      	adds	r3, r7, r1
 800521e:	2200      	movs	r2, #0
 8005220:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005222:	187b      	adds	r3, r7, r1
 8005224:	2101      	movs	r1, #1
 8005226:	0018      	movs	r0, r3
 8005228:	f001 ff86 	bl	8007138 <HAL_RCC_ClockConfig>
 800522c:	0003      	movs	r3, r0
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	4193      	sbcs	r3, r2
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8005238:	f000 f819 	bl	800526e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800523c:	003b      	movs	r3, r7
 800523e:	2221      	movs	r2, #33	; 0x21
 8005240:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005242:	003b      	movs	r3, r7
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005248:	003b      	movs	r3, r7
 800524a:	2200      	movs	r2, #0
 800524c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800524e:	003b      	movs	r3, r7
 8005250:	0018      	movs	r0, r3
 8005252:	f002 f8dd 	bl	8007410 <HAL_RCCEx_PeriphCLKConfig>
 8005256:	0003      	movs	r3, r0
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	4193      	sbcs	r3, r2
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8005262:	f000 f804 	bl	800526e <Error_Handler>
  }
}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b019      	add	sp, #100	; 0x64
 800526c:	bd90      	pop	{r4, r7, pc}

0800526e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005272:	b672      	cpsid	i
}
 8005274:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005276:	e7fe      	b.n	8005276 <Error_Handler+0x8>

08005278 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f003 ff55 	bl	8009138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800528e:	0003      	movs	r3, r0
 8005290:	425a      	negs	r2, r3
 8005292:	4153      	adcs	r3, r2
 8005294:	b2db      	uxtb	r3, r3
 8005296:	0018      	movs	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <MX_SPI1_Init+0x74>)
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <MX_SPI1_Init+0x78>)
 80052a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052aa:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <MX_SPI1_Init+0x74>)
 80052ac:	2282      	movs	r2, #130	; 0x82
 80052ae:	0052      	lsls	r2, r2, #1
 80052b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052b2:	4b18      	ldr	r3, [pc, #96]	; (8005314 <MX_SPI1_Init+0x74>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80052b8:	4b16      	ldr	r3, [pc, #88]	; (8005314 <MX_SPI1_Init+0x74>)
 80052ba:	22c0      	movs	r2, #192	; 0xc0
 80052bc:	0092      	lsls	r2, r2, #2
 80052be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052c0:	4b14      	ldr	r3, [pc, #80]	; (8005314 <MX_SPI1_Init+0x74>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <MX_SPI1_Init+0x74>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <MX_SPI1_Init+0x74>)
 80052ce:	2280      	movs	r2, #128	; 0x80
 80052d0:	0092      	lsls	r2, r2, #2
 80052d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <MX_SPI1_Init+0x74>)
 80052d6:	2210      	movs	r2, #16
 80052d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <MX_SPI1_Init+0x74>)
 80052dc:	2200      	movs	r2, #0
 80052de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <MX_SPI1_Init+0x74>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <MX_SPI1_Init+0x74>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <MX_SPI1_Init+0x74>)
 80052ee:	2207      	movs	r2, #7
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <MX_SPI1_Init+0x74>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <MX_SPI1_Init+0x74>)
 80052fa:	2208      	movs	r2, #8
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <MX_SPI1_Init+0x74>)
 8005300:	0018      	movs	r0, r3
 8005302:	f002 f985 	bl	8007610 <HAL_SPI_Init>
 8005306:	1e03      	subs	r3, r0, #0
 8005308:	d001      	beq.n	800530e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800530a:	f7ff ffb0 	bl	800526e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200000cc 	.word	0x200000cc
 8005318:	40013000 	.word	0x40013000

0800531c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b08b      	sub	sp, #44	; 0x2c
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005324:	2414      	movs	r4, #20
 8005326:	193b      	adds	r3, r7, r4
 8005328:	0018      	movs	r0, r3
 800532a:	2314      	movs	r3, #20
 800532c:	001a      	movs	r2, r3
 800532e:	2100      	movs	r1, #0
 8005330:	f004 f871 	bl	8009416 <memset>
  if(spiHandle->Instance==SPI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2e      	ldr	r2, [pc, #184]	; (80053f4 <HAL_SPI_MspInit+0xd8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d155      	bne.n	80053ea <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	0149      	lsls	r1, r1, #5
 8005348:	430a      	orrs	r2, r1
 800534a:	619a      	str	r2, [r3, #24]
 800534c:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	015b      	lsls	r3, r3, #5
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	0289      	lsls	r1, r1, #10
 8005364:	430a      	orrs	r2, r1
 8005366:	615a      	str	r2, [r3, #20]
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 800537c:	2180      	movs	r1, #128	; 0x80
 800537e:	02c9      	lsls	r1, r1, #11
 8005380:	430a      	orrs	r2, r1
 8005382:	615a      	str	r2, [r3, #20]
 8005384:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <HAL_SPI_MspInit+0xdc>)
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	02db      	lsls	r3, r3, #11
 800538c:	4013      	ands	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005392:	193b      	adds	r3, r7, r4
 8005394:	22c0      	movs	r2, #192	; 0xc0
 8005396:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	193b      	adds	r3, r7, r4
 800539a:	2202      	movs	r2, #2
 800539c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	2203      	movs	r2, #3
 80053a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	193a      	adds	r2, r7, r4
 80053b2:	2390      	movs	r3, #144	; 0x90
 80053b4:	05db      	lsls	r3, r3, #23
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fbad 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053be:	0021      	movs	r1, r4
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	2208      	movs	r2, #8
 80053c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	187b      	adds	r3, r7, r1
 80053c8:	2202      	movs	r2, #2
 80053ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	2200      	movs	r2, #0
 80053d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	2203      	movs	r2, #3
 80053d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	4a06      	ldr	r2, [pc, #24]	; (80053fc <HAL_SPI_MspInit+0xe0>)
 80053e2:	0019      	movs	r1, r3
 80053e4:	0010      	movs	r0, r2
 80053e6:	f000 fb97 	bl	8005b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b00b      	add	sp, #44	; 0x2c
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	40013000 	.word	0x40013000
 80053f8:	40021000 	.word	0x40021000
 80053fc:	48000400 	.word	0x48000400

08005400 <SPI_Transfer>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t SPI_Transfer(uint8_t data){
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b087      	sub	sp, #28
 8005404:	af02      	add	r7, sp, #8
 8005406:	0002      	movs	r2, r0
 8005408:	1dfb      	adds	r3, r7, #7
 800540a:	701a      	strb	r2, [r3, #0]
	uint8_t buffer;
	HAL_SPI_TransmitReceive(&hspi1, data, buffer, sizeof(data), 1000);
 800540c:	1dfb      	adds	r3, r7, #7
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	0019      	movs	r1, r3
 8005412:	240f      	movs	r4, #15
 8005414:	193b      	adds	r3, r7, r4
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	001a      	movs	r2, r3
 800541a:	4806      	ldr	r0, [pc, #24]	; (8005434 <SPI_Transfer+0x34>)
 800541c:	23fa      	movs	r3, #250	; 0xfa
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2301      	movs	r3, #1
 8005424:	f002 f9ac 	bl	8007780 <HAL_SPI_TransmitReceive>
	return buffer;
 8005428:	193b      	adds	r3, r7, r4
 800542a:	781b      	ldrb	r3, [r3, #0]
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b005      	add	sp, #20
 8005432:	bd90      	pop	{r4, r7, pc}
 8005434:	200000cc 	.word	0x200000cc

08005438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <HAL_MspInit+0x44>)
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_MspInit+0x44>)
 8005444:	2101      	movs	r1, #1
 8005446:	430a      	orrs	r2, r1
 8005448:	619a      	str	r2, [r3, #24]
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <HAL_MspInit+0x44>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_MspInit+0x44>)
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_MspInit+0x44>)
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	0549      	lsls	r1, r1, #21
 8005460:	430a      	orrs	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_MspInit+0x44>)
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	055b      	lsls	r3, r3, #21
 800546c:	4013      	ands	r3, r2
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b002      	add	sp, #8
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40021000 	.word	0x40021000

08005480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005484:	e7fe      	b.n	8005484 <NMI_Handler+0x4>

08005486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800548a:	e7fe      	b.n	800548a <HardFault_Handler+0x4>

0800548c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005490:	46c0      	nop			; (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054a4:	f000 fa44 	bl	8005930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	af00      	add	r7, sp, #0
  return 1;
 80054b2:	2301      	movs	r3, #1
}
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <_kill>:

int _kill(int pid, int sig)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80054c4:	f004 f80c 	bl	80094e0 <__errno>
 80054c8:	0003      	movs	r3, r0
 80054ca:	2216      	movs	r2, #22
 80054cc:	601a      	str	r2, [r3, #0]
  return -1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	425b      	negs	r3, r3
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b002      	add	sp, #8
 80054d8:	bd80      	pop	{r7, pc}

080054da <_exit>:

void _exit (int status)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054e2:	2301      	movs	r3, #1
 80054e4:	425a      	negs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7ff ffe5 	bl	80054ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80054f0:	e7fe      	b.n	80054f0 <_exit+0x16>
	...

080054f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <_sbrk+0x5c>)
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <_sbrk+0x60>)
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <_sbrk+0x64>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <_sbrk+0x64>)
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <_sbrk+0x68>)
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <_sbrk+0x64>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	18d3      	adds	r3, r2, r3
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d207      	bcs.n	8005534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005524:	f003 ffdc 	bl	80094e0 <__errno>
 8005528:	0003      	movs	r3, r0
 800552a:	220c      	movs	r2, #12
 800552c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800552e:	2301      	movs	r3, #1
 8005530:	425b      	negs	r3, r3
 8005532:	e009      	b.n	8005548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <_sbrk+0x64>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <_sbrk+0x64>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	18d2      	adds	r2, r2, r3
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <_sbrk+0x64>)
 8005544:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b006      	add	sp, #24
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20008000 	.word	0x20008000
 8005554:	00000400 	.word	0x00000400
 8005558:	20000130 	.word	0x20000130
 800555c:	20000358 	.word	0x20000358

08005560 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005572:	2308      	movs	r3, #8
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	0018      	movs	r0, r3
 8005578:	2310      	movs	r3, #16
 800557a:	001a      	movs	r2, r3
 800557c:	2100      	movs	r1, #0
 800557e:	f003 ff4a 	bl	8009416 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005582:	003b      	movs	r3, r7
 8005584:	0018      	movs	r0, r3
 8005586:	2308      	movs	r3, #8
 8005588:	001a      	movs	r2, r3
 800558a:	2100      	movs	r1, #0
 800558c:	f003 ff43 	bl	8009416 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005590:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <MX_TIM1_Init+0xa4>)
 8005592:	4a20      	ldr	r2, [pc, #128]	; (8005614 <MX_TIM1_Init+0xa8>)
 8005594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005596:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <MX_TIM1_Init+0xa4>)
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <MX_TIM1_Init+0xa4>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055a4:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <MX_TIM1_Init+0xac>)
 80055a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055bc:	0018      	movs	r0, r3
 80055be:	f002 fc37 	bl	8007e30 <HAL_TIM_Base_Init>
 80055c2:	1e03      	subs	r3, r0, #0
 80055c4:	d001      	beq.n	80055ca <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80055c6:	f7ff fe52 	bl	800526e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055ca:	2108      	movs	r1, #8
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	0152      	lsls	r2, r2, #5
 80055d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80055d4:	187a      	adds	r2, r7, r1
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055d8:	0011      	movs	r1, r2
 80055da:	0018      	movs	r0, r3
 80055dc:	f002 fc78 	bl	8007ed0 <HAL_TIM_ConfigClockSource>
 80055e0:	1e03      	subs	r3, r0, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80055e4:	f7ff fe43 	bl	800526e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055e8:	003b      	movs	r3, r7
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055ee:	003b      	movs	r3, r7
 80055f0:	2200      	movs	r2, #0
 80055f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80055f4:	003a      	movs	r2, r7
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <MX_TIM1_Init+0xa4>)
 80055f8:	0011      	movs	r1, r2
 80055fa:	0018      	movs	r0, r3
 80055fc:	f002 fe56 	bl	80082ac <HAL_TIMEx_MasterConfigSynchronization>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8005604:	f7ff fe33 	bl	800526e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b006      	add	sp, #24
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000134 	.word	0x20000134
 8005614:	40012c00 	.word	0x40012c00
 8005618:	0000ffff 	.word	0x0000ffff

0800561c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <HAL_TIM_Base_MspInit+0x38>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10d      	bne.n	800564a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <HAL_TIM_Base_MspInit+0x3c>)
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_TIM_Base_MspInit+0x3c>)
 8005634:	2180      	movs	r1, #128	; 0x80
 8005636:	0109      	lsls	r1, r1, #4
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <HAL_TIM_Base_MspInit+0x3c>)
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40021000 	.word	0x40021000

0800565c <delay_us>:
  /* USER CODE END TIM1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void delay_us(uint16_t us){
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	0002      	movs	r2, r0
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  				// set the counter value a 0
 8005668:	4b08      	ldr	r3, [pc, #32]	; (800568c <delay_us+0x30>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  	// wait for the counter to reach the us input in the parameter
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <delay_us+0x30>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005678:	1dbb      	adds	r3, r7, #6
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d3f8      	bcc.n	8005672 <delay_us+0x16>
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b002      	add	sp, #8
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	20000134 	.word	0x20000134

08005690 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <MX_USART1_UART_Init+0x5c>)
 8005698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 800569c:	22e1      	movs	r2, #225	; 0xe1
 800569e:	0252      	lsls	r2, r2, #9
 80056a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056b6:	220c      	movs	r2, #12
 80056b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <MX_USART1_UART_Init+0x58>)
 80056d4:	0018      	movs	r0, r3
 80056d6:	f002 fe47 	bl	8008368 <HAL_UART_Init>
 80056da:	1e03      	subs	r3, r0, #0
 80056dc:	d001      	beq.n	80056e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80056de:	f7ff fdc6 	bl	800526e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	2000017c 	.word	0x2000017c
 80056ec:	40013800 	.word	0x40013800

080056f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b08b      	sub	sp, #44	; 0x2c
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	2414      	movs	r4, #20
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	0018      	movs	r0, r3
 80056fe:	2314      	movs	r3, #20
 8005700:	001a      	movs	r2, r3
 8005702:	2100      	movs	r1, #0
 8005704:	f003 fe87 	bl	8009416 <memset>
  if(uartHandle->Instance==USART1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_UART_MspInit+0x90>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d131      	bne.n	8005776 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <HAL_UART_MspInit+0x94>)
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_UART_MspInit+0x94>)
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	01c9      	lsls	r1, r1, #7
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
 8005720:	4b18      	ldr	r3, [pc, #96]	; (8005784 <HAL_UART_MspInit+0x94>)
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	01db      	lsls	r3, r3, #7
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <HAL_UART_MspInit+0x94>)
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <HAL_UART_MspInit+0x94>)
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	02c9      	lsls	r1, r1, #11
 8005738:	430a      	orrs	r2, r1
 800573a:	615a      	str	r2, [r3, #20]
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <HAL_UART_MspInit+0x94>)
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	02db      	lsls	r3, r3, #11
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800574a:	0021      	movs	r1, r4
 800574c:	187b      	adds	r3, r7, r1
 800574e:	22c0      	movs	r2, #192	; 0xc0
 8005750:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005752:	187b      	adds	r3, r7, r1
 8005754:	2202      	movs	r2, #2
 8005756:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005758:	187b      	adds	r3, r7, r1
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800575e:	187b      	adds	r3, r7, r1
 8005760:	2203      	movs	r2, #3
 8005762:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005764:	187b      	adds	r3, r7, r1
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800576a:	187b      	adds	r3, r7, r1
 800576c:	4a06      	ldr	r2, [pc, #24]	; (8005788 <HAL_UART_MspInit+0x98>)
 800576e:	0019      	movs	r1, r3
 8005770:	0010      	movs	r0, r2
 8005772:	f000 f9d1 	bl	8005b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b00b      	add	sp, #44	; 0x2c
 800577c:	bd90      	pop	{r4, r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	40013800 	.word	0x40013800
 8005784:	40021000 	.word	0x40021000
 8005788:	48000400 	.word	0x48000400

0800578c <sendATcommand>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendATcommand(const char *command, const char *data, uint8_t size){
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	1dfb      	adds	r3, r7, #7
 8005798:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, &command, sizeof(command), 1000);
 800579a:	23fa      	movs	r3, #250	; 0xfa
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	220c      	movs	r2, #12
 80057a0:	18b9      	adds	r1, r7, r2
 80057a2:	480a      	ldr	r0, [pc, #40]	; (80057cc <sendATcommand+0x40>)
 80057a4:	2204      	movs	r2, #4
 80057a6:	f002 fe33 	bl	8008410 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &data, size, 1000);
 80057aa:	1dfb      	adds	r3, r7, #7
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	23fa      	movs	r3, #250	; 0xfa
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	2108      	movs	r1, #8
 80057b6:	1879      	adds	r1, r7, r1
 80057b8:	4804      	ldr	r0, [pc, #16]	; (80057cc <sendATcommand+0x40>)
 80057ba:	f002 fe29 	bl	8008410 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, "\r", 1, 1000);
	HAL_Delay(1);
 80057be:	2001      	movs	r0, #1
 80057c0:	f000 f8d2 	bl	8005968 <HAL_Delay>
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b004      	add	sp, #16
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000017c 	.word	0x2000017c

080057d0 <sendCommand>:

void sendCommand(const char* command, uint8_t size){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	000a      	movs	r2, r1
 80057da:	1cfb      	adds	r3, r7, #3
 80057dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, ",", 1, 1000);
 80057de:	23fa      	movs	r3, #250	; 0xfa
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	490d      	ldr	r1, [pc, #52]	; (8005818 <sendCommand+0x48>)
 80057e4:	480d      	ldr	r0, [pc, #52]	; (800581c <sendCommand+0x4c>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	f002 fe12 	bl	8008410 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &command, sizeof(command), 1000);
 80057ec:	23fa      	movs	r3, #250	; 0xfa
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	1d39      	adds	r1, r7, #4
 80057f2:	480a      	ldr	r0, [pc, #40]	; (800581c <sendCommand+0x4c>)
 80057f4:	2204      	movs	r2, #4
 80057f6:	f002 fe0b 	bl	8008410 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\r", 1, 1000);
 80057fa:	23fa      	movs	r3, #250	; 0xfa
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4908      	ldr	r1, [pc, #32]	; (8005820 <sendCommand+0x50>)
 8005800:	4806      	ldr	r0, [pc, #24]	; (800581c <sendCommand+0x4c>)
 8005802:	2201      	movs	r2, #1
 8005804:	f002 fe04 	bl	8008410 <HAL_UART_Transmit>
	HAL_Delay(1);
 8005808:	2001      	movs	r0, #1
 800580a:	f000 f8ad 	bl	8005968 <HAL_Delay>
}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	08009d4c 	.word	0x08009d4c
 800581c:	2000017c 	.word	0x2000017c
 8005820:	08009d50 	.word	0x08009d50

08005824 <receiveCommand>:

uint8_t receiveCommand(){
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
	uint8_t payload;
	HAL_UART_Receive(&huart1, payload, 1, 1000);
 800582a:	1dfb      	adds	r3, r7, #7
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	0019      	movs	r1, r3
 8005830:	23fa      	movs	r3, #250	; 0xfa
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4804      	ldr	r0, [pc, #16]	; (8005848 <receiveCommand+0x24>)
 8005836:	2201      	movs	r2, #1
 8005838:	f002 fe8a 	bl	8008550 <HAL_UART_Receive>
	return payload;
 800583c:	1dfb      	adds	r3, r7, #7
 800583e:	781b      	ldrb	r3, [r3, #0]
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b002      	add	sp, #8
 8005846:	bd80      	pop	{r7, pc}
 8005848:	2000017c 	.word	0x2000017c

0800584c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800584c:	480d      	ldr	r0, [pc, #52]	; (8005884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800584e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005850:	f7ff fe86 	bl	8005560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005854:	480c      	ldr	r0, [pc, #48]	; (8005888 <LoopForever+0x6>)
  ldr r1, =_edata
 8005856:	490d      	ldr	r1, [pc, #52]	; (800588c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005858:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <LoopForever+0xe>)
  movs r3, #0
 800585a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800585c:	e002      	b.n	8005864 <LoopCopyDataInit>

0800585e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800585e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005862:	3304      	adds	r3, #4

08005864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005868:	d3f9      	bcc.n	800585e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800586c:	4c0a      	ldr	r4, [pc, #40]	; (8005898 <LoopForever+0x16>)
  movs r3, #0
 800586e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005870:	e001      	b.n	8005876 <LoopFillZerobss>

08005872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005874:	3204      	adds	r2, #4

08005876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005878:	d3fb      	bcc.n	8005872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800587a:	f003 fe37 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800587e:	f7fe fd2f 	bl	80042e0 <main>

08005882 <LoopForever>:

LoopForever:
    b LoopForever
 8005882:	e7fe      	b.n	8005882 <LoopForever>
  ldr   r0, =_estack
 8005884:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800588c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8005890:	08009ed4 	.word	0x08009ed4
  ldr r2, =_sbss
 8005894:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8005898:	20000354 	.word	0x20000354

0800589c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800589c:	e7fe      	b.n	800589c <ADC1_COMP_IRQHandler>
	...

080058a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_Init+0x24>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_Init+0x24>)
 80058aa:	2110      	movs	r1, #16
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80058b0:	2000      	movs	r0, #0
 80058b2:	f000 f809 	bl	80058c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058b6:	f7ff fdbf 	bl	8005438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	0018      	movs	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	40022000 	.word	0x40022000

080058c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058d0:	4b14      	ldr	r3, [pc, #80]	; (8005924 <HAL_InitTick+0x5c>)
 80058d2:	681c      	ldr	r4, [r3, #0]
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <HAL_InitTick+0x60>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	0019      	movs	r1, r3
 80058da:	23fa      	movs	r3, #250	; 0xfa
 80058dc:	0098      	lsls	r0, r3, #2
 80058de:	f7fa fc23 	bl	8000128 <__udivsi3>
 80058e2:	0003      	movs	r3, r0
 80058e4:	0019      	movs	r1, r3
 80058e6:	0020      	movs	r0, r4
 80058e8:	f7fa fc1e 	bl	8000128 <__udivsi3>
 80058ec:	0003      	movs	r3, r0
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f905 	bl	8005afe <HAL_SYSTICK_Config>
 80058f4:	1e03      	subs	r3, r0, #0
 80058f6:	d001      	beq.n	80058fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e00f      	b.n	800591c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d80b      	bhi.n	800591a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	2301      	movs	r3, #1
 8005906:	425b      	negs	r3, r3
 8005908:	2200      	movs	r2, #0
 800590a:	0018      	movs	r0, r3
 800590c:	f000 f8e2 	bl	8005ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_InitTick+0x64>)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b003      	add	sp, #12
 8005922:	bd90      	pop	{r4, r7, pc}
 8005924:	20000000 	.word	0x20000000
 8005928:	20000008 	.word	0x20000008
 800592c:	20000004 	.word	0x20000004

08005930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_IncTick+0x1c>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	001a      	movs	r2, r3
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_IncTick+0x20>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	18d2      	adds	r2, r2, r3
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_IncTick+0x20>)
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	20000008 	.word	0x20000008
 8005950:	20000204 	.word	0x20000204

08005954 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  return uwTick;
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <HAL_GetTick+0x10>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	20000204 	.word	0x20000204

08005968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005970:	f7ff fff0 	bl	8005954 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	d005      	beq.n	800598e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_Delay+0x44>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	001a      	movs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	189b      	adds	r3, r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	f7ff ffe0 	bl	8005954 <HAL_GetTick>
 8005994:	0002      	movs	r2, r0
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d8f7      	bhi.n	8005990 <HAL_Delay+0x28>
  {
  }
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	20000008 	.word	0x20000008

080059b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	0002      	movs	r2, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	1dfb      	adds	r3, r7, #7
 80059bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b7f      	cmp	r3, #127	; 0x7f
 80059c4:	d828      	bhi.n	8005a18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059c6:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <__NVIC_SetPriority+0xd4>)
 80059c8:	1dfb      	adds	r3, r7, #7
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	33c0      	adds	r3, #192	; 0xc0
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	589b      	ldr	r3, [r3, r2]
 80059d6:	1dfa      	adds	r2, r7, #7
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	0011      	movs	r1, r2
 80059dc:	2203      	movs	r2, #3
 80059de:	400a      	ands	r2, r1
 80059e0:	00d2      	lsls	r2, r2, #3
 80059e2:	21ff      	movs	r1, #255	; 0xff
 80059e4:	4091      	lsls	r1, r2
 80059e6:	000a      	movs	r2, r1
 80059e8:	43d2      	mvns	r2, r2
 80059ea:	401a      	ands	r2, r3
 80059ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	019b      	lsls	r3, r3, #6
 80059f2:	22ff      	movs	r2, #255	; 0xff
 80059f4:	401a      	ands	r2, r3
 80059f6:	1dfb      	adds	r3, r7, #7
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	0018      	movs	r0, r3
 80059fc:	2303      	movs	r3, #3
 80059fe:	4003      	ands	r3, r0
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a04:	481f      	ldr	r0, [pc, #124]	; (8005a84 <__NVIC_SetPriority+0xd4>)
 8005a06:	1dfb      	adds	r3, r7, #7
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b25b      	sxtb	r3, r3
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	33c0      	adds	r3, #192	; 0xc0
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005a16:	e031      	b.n	8005a7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <__NVIC_SetPriority+0xd8>)
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	0019      	movs	r1, r3
 8005a20:	230f      	movs	r3, #15
 8005a22:	400b      	ands	r3, r1
 8005a24:	3b08      	subs	r3, #8
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	3306      	adds	r3, #6
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	18d3      	adds	r3, r2, r3
 8005a2e:	3304      	adds	r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1dfa      	adds	r2, r7, #7
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	0011      	movs	r1, r2
 8005a38:	2203      	movs	r2, #3
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	00d2      	lsls	r2, r2, #3
 8005a3e:	21ff      	movs	r1, #255	; 0xff
 8005a40:	4091      	lsls	r1, r2
 8005a42:	000a      	movs	r2, r1
 8005a44:	43d2      	mvns	r2, r2
 8005a46:	401a      	ands	r2, r3
 8005a48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	22ff      	movs	r2, #255	; 0xff
 8005a50:	401a      	ands	r2, r3
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	0018      	movs	r0, r3
 8005a58:	2303      	movs	r3, #3
 8005a5a:	4003      	ands	r3, r0
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a60:	4809      	ldr	r0, [pc, #36]	; (8005a88 <__NVIC_SetPriority+0xd8>)
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	001c      	movs	r4, r3
 8005a68:	230f      	movs	r3, #15
 8005a6a:	4023      	ands	r3, r4
 8005a6c:	3b08      	subs	r3, #8
 8005a6e:	089b      	lsrs	r3, r3, #2
 8005a70:	430a      	orrs	r2, r1
 8005a72:	3306      	adds	r3, #6
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	18c3      	adds	r3, r0, r3
 8005a78:	3304      	adds	r3, #4
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b003      	add	sp, #12
 8005a82:	bd90      	pop	{r4, r7, pc}
 8005a84:	e000e100 	.word	0xe000e100
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	045b      	lsls	r3, r3, #17
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d301      	bcc.n	8005aa4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e010      	b.n	8005ac6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <SysTick_Config+0x44>)
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aac:	2301      	movs	r3, #1
 8005aae:	425b      	negs	r3, r3
 8005ab0:	2103      	movs	r1, #3
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7ff ff7c 	bl	80059b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <SysTick_Config+0x44>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <SysTick_Config+0x44>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b002      	add	sp, #8
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	e000e010 	.word	0xe000e010

08005ad4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	210f      	movs	r1, #15
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	1c02      	adds	r2, r0, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	0011      	movs	r1, r2
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff ff5d 	bl	80059b0 <__NVIC_SetPriority>
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7ff ffbf 	bl	8005a8c <SysTick_Config>
 8005b0e:	0003      	movs	r3, r0
}
 8005b10:	0018      	movs	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b26:	e155      	b.n	8005dd4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4091      	lsls	r1, r2
 8005b32:	000a      	movs	r2, r1
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d100      	bne.n	8005b40 <HAL_GPIO_Init+0x28>
 8005b3e:	e146      	b.n	8005dce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2203      	movs	r2, #3
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d005      	beq.n	8005b58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2203      	movs	r2, #3
 8005b52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d130      	bne.n	8005bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	2203      	movs	r2, #3
 8005b64:	409a      	lsls	r2, r3
 8005b66:	0013      	movs	r3, r2
 8005b68:	43da      	mvns	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	0013      	movs	r3, r2
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b8e:	2201      	movs	r2, #1
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	409a      	lsls	r2, r3
 8005b94:	0013      	movs	r3, r2
 8005b96:	43da      	mvns	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	409a      	lsls	r2, r3
 8005bac:	0013      	movs	r3, r2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d017      	beq.n	8005bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	0013      	movs	r3, r2
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	409a      	lsls	r2, r3
 8005be8:	0013      	movs	r3, r2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d123      	bne.n	8005c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	08da      	lsrs	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3208      	adds	r2, #8
 8005c0a:	0092      	lsls	r2, r2, #2
 8005c0c:	58d3      	ldr	r3, [r2, r3]
 8005c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2207      	movs	r2, #7
 8005c14:	4013      	ands	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	220f      	movs	r2, #15
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2107      	movs	r1, #7
 8005c2e:	400b      	ands	r3, r1
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	409a      	lsls	r2, r3
 8005c34:	0013      	movs	r3, r2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	08da      	lsrs	r2, r3, #3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3208      	adds	r2, #8
 8005c44:	0092      	lsls	r2, r2, #2
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	2203      	movs	r2, #3
 8005c56:	409a      	lsls	r2, r3
 8005c58:	0013      	movs	r3, r2
 8005c5a:	43da      	mvns	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2203      	movs	r2, #3
 8005c68:	401a      	ands	r2, r3
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	0013      	movs	r3, r2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	23c0      	movs	r3, #192	; 0xc0
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	4013      	ands	r3, r2
 8005c88:	d100      	bne.n	8005c8c <HAL_GPIO_Init+0x174>
 8005c8a:	e0a0      	b.n	8005dce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c8c:	4b57      	ldr	r3, [pc, #348]	; (8005dec <HAL_GPIO_Init+0x2d4>)
 8005c8e:	699a      	ldr	r2, [r3, #24]
 8005c90:	4b56      	ldr	r3, [pc, #344]	; (8005dec <HAL_GPIO_Init+0x2d4>)
 8005c92:	2101      	movs	r1, #1
 8005c94:	430a      	orrs	r2, r1
 8005c96:	619a      	str	r2, [r3, #24]
 8005c98:	4b54      	ldr	r3, [pc, #336]	; (8005dec <HAL_GPIO_Init+0x2d4>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ca4:	4a52      	ldr	r2, [pc, #328]	; (8005df0 <HAL_GPIO_Init+0x2d8>)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	3302      	adds	r3, #2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	589b      	ldr	r3, [r3, r2]
 8005cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	220f      	movs	r2, #15
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	0013      	movs	r3, r2
 8005cc0:	43da      	mvns	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	2390      	movs	r3, #144	; 0x90
 8005ccc:	05db      	lsls	r3, r3, #23
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d019      	beq.n	8005d06 <HAL_GPIO_Init+0x1ee>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a47      	ldr	r2, [pc, #284]	; (8005df4 <HAL_GPIO_Init+0x2dc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <HAL_GPIO_Init+0x1ea>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a46      	ldr	r2, [pc, #280]	; (8005df8 <HAL_GPIO_Init+0x2e0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00d      	beq.n	8005cfe <HAL_GPIO_Init+0x1e6>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a45      	ldr	r2, [pc, #276]	; (8005dfc <HAL_GPIO_Init+0x2e4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <HAL_GPIO_Init+0x1e2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a44      	ldr	r2, [pc, #272]	; (8005e00 <HAL_GPIO_Init+0x2e8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d101      	bne.n	8005cf6 <HAL_GPIO_Init+0x1de>
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	e008      	b.n	8005d08 <HAL_GPIO_Init+0x1f0>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e006      	b.n	8005d08 <HAL_GPIO_Init+0x1f0>
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e004      	b.n	8005d08 <HAL_GPIO_Init+0x1f0>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e002      	b.n	8005d08 <HAL_GPIO_Init+0x1f0>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <HAL_GPIO_Init+0x1f0>
 8005d06:	2300      	movs	r3, #0
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	4093      	lsls	r3, r2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d18:	4935      	ldr	r1, [pc, #212]	; (8005df0 <HAL_GPIO_Init+0x2d8>)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	3302      	adds	r3, #2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	43da      	mvns	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	035b      	lsls	r3, r3, #13
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d4a:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005d50:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	43da      	mvns	r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	039b      	lsls	r3, r3, #14
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d74:	4b23      	ldr	r3, [pc, #140]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005d7a:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	43da      	mvns	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4013      	ands	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	4013      	ands	r3, r2
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d9e:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	43da      	mvns	r2, r3
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	025b      	lsls	r3, r3, #9
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_GPIO_Init+0x2ec>)
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	40da      	lsrs	r2, r3
 8005ddc:	1e13      	subs	r3, r2, #0
 8005dde:	d000      	beq.n	8005de2 <HAL_GPIO_Init+0x2ca>
 8005de0:	e6a2      	b.n	8005b28 <HAL_GPIO_Init+0x10>
  } 
}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b006      	add	sp, #24
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40010000 	.word	0x40010000
 8005df4:	48000400 	.word	0x48000400
 8005df8:	48000800 	.word	0x48000800
 8005dfc:	48000c00 	.word	0x48000c00
 8005e00:	48001000 	.word	0x48001000
 8005e04:	40010400 	.word	0x40010400

08005e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	0008      	movs	r0, r1
 8005e12:	0011      	movs	r1, r2
 8005e14:	1cbb      	adds	r3, r7, #2
 8005e16:	1c02      	adds	r2, r0, #0
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	1c7b      	adds	r3, r7, #1
 8005e1c:	1c0a      	adds	r2, r1, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e20:	1c7b      	adds	r3, r7, #1
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e28:	1cbb      	adds	r3, r7, #2
 8005e2a:	881a      	ldrh	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e30:	e003      	b.n	8005e3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e32:	1cbb      	adds	r3, r7, #2
 8005e34:	881a      	ldrh	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e082      	b.n	8005f5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2241      	movs	r2, #65	; 0x41
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2240      	movs	r2, #64	; 0x40
 8005e66:	2100      	movs	r1, #0
 8005e68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7fe f98f 	bl	8004190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2241      	movs	r2, #65	; 0x41
 8005e76:	2124      	movs	r1, #36	; 0x24
 8005e78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2101      	movs	r1, #1
 8005e86:	438a      	bics	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4934      	ldr	r1, [pc, #208]	; (8005f64 <HAL_I2C_Init+0x120>)
 8005e94:	400a      	ands	r2, r1
 8005e96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4931      	ldr	r1, [pc, #196]	; (8005f68 <HAL_I2C_Init+0x124>)
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d108      	bne.n	8005ec2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	0209      	lsls	r1, r1, #8
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	e007      	b.n	8005ed2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2184      	movs	r1, #132	; 0x84
 8005ecc:	0209      	lsls	r1, r1, #8
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d104      	bne.n	8005ee4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	0112      	lsls	r2, r2, #4
 8005ee2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	491f      	ldr	r1, [pc, #124]	; (8005f6c <HAL_I2C_Init+0x128>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	491a      	ldr	r1, [pc, #104]	; (8005f68 <HAL_I2C_Init+0x124>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69d9      	ldr	r1, [r3, #28]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2241      	movs	r2, #65	; 0x41
 8005f48:	2120      	movs	r1, #32
 8005f4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2242      	movs	r2, #66	; 0x42
 8005f56:	2100      	movs	r1, #0
 8005f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	f0ffffff 	.word	0xf0ffffff
 8005f68:	ffff7fff 	.word	0xffff7fff
 8005f6c:	02008000 	.word	0x02008000

08005f70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	0008      	movs	r0, r1
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	230a      	movs	r3, #10
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	1c02      	adds	r2, r0, #0
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	2308      	movs	r3, #8
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	1c0a      	adds	r2, r1, #0
 8005f8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2241      	movs	r2, #65	; 0x41
 8005f92:	5c9b      	ldrb	r3, [r3, r2]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d000      	beq.n	8005f9c <HAL_I2C_Master_Transmit+0x2c>
 8005f9a:	e0e7      	b.n	800616c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	5c9b      	ldrb	r3, [r3, r2]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_I2C_Master_Transmit+0x3a>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e0e1      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2240      	movs	r2, #64	; 0x40
 8005fae:	2101      	movs	r1, #1
 8005fb0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fb2:	f7ff fccf 	bl	8005954 <HAL_GetTick>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fba:	2380      	movs	r3, #128	; 0x80
 8005fbc:	0219      	lsls	r1, r3, #8
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2319      	movs	r3, #25
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f000 fa04 	bl	80063d4 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	1e03      	subs	r3, r0, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0cc      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2241      	movs	r2, #65	; 0x41
 8005fd8:	2121      	movs	r1, #33	; 0x21
 8005fda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2242      	movs	r2, #66	; 0x42
 8005fe0:	2110      	movs	r1, #16
 8005fe2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	18ba      	adds	r2, r7, r2
 8005ff6:	8812      	ldrh	r2, [r2, #0]
 8005ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d911      	bls.n	800602e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	b2da      	uxtb	r2, r3
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	045c      	lsls	r4, r3, #17
 800601a:	230a      	movs	r3, #10
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	8819      	ldrh	r1, [r3, #0]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	4b55      	ldr	r3, [pc, #340]	; (8006178 <HAL_I2C_Master_Transmit+0x208>)
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	0023      	movs	r3, r4
 8006028:	f000 fc2e 	bl	8006888 <I2C_TransferConfig>
 800602c:	e075      	b.n	800611a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	b2da      	uxtb	r2, r3
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	049c      	lsls	r4, r3, #18
 8006042:	230a      	movs	r3, #10
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	8819      	ldrh	r1, [r3, #0]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	4b4b      	ldr	r3, [pc, #300]	; (8006178 <HAL_I2C_Master_Transmit+0x208>)
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	0023      	movs	r3, r4
 8006050:	f000 fc1a 	bl	8006888 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006054:	e061      	b.n	800611a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 fa07 	bl	8006470 <I2C_WaitOnTXISFlagUntilTimeout>
 8006062:	1e03      	subs	r3, r0, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e081      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d03a      	beq.n	800611a <HAL_I2C_Master_Transmit+0x1aa>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d136      	bne.n	800611a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	0013      	movs	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	f000 f98b 	bl	80063d4 <I2C_WaitOnFlagUntilTimeout>
 80060be:	1e03      	subs	r3, r0, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e053      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2bff      	cmp	r3, #255	; 0xff
 80060ce:	d911      	bls.n	80060f4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	045c      	lsls	r4, r3, #17
 80060e0:	230a      	movs	r3, #10
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	8819      	ldrh	r1, [r3, #0]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	2300      	movs	r3, #0
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	0023      	movs	r3, r4
 80060ee:	f000 fbcb 	bl	8006888 <I2C_TransferConfig>
 80060f2:	e012      	b.n	800611a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	b2da      	uxtb	r2, r3
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	049c      	lsls	r4, r3, #18
 8006108:	230a      	movs	r3, #10
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	8819      	ldrh	r1, [r3, #0]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	0023      	movs	r3, r4
 8006116:	f000 fbb7 	bl	8006888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d198      	bne.n	8006056 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	0018      	movs	r0, r3
 800612c:	f000 f9e6 	bl	80064fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006130:	1e03      	subs	r3, r0, #0
 8006132:	d001      	beq.n	8006138 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e01a      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2220      	movs	r2, #32
 800613e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	490c      	ldr	r1, [pc, #48]	; (800617c <HAL_I2C_Master_Transmit+0x20c>)
 800614c:	400a      	ands	r2, r1
 800614e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2241      	movs	r2, #65	; 0x41
 8006154:	2120      	movs	r1, #32
 8006156:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2242      	movs	r2, #66	; 0x42
 800615c:	2100      	movs	r1, #0
 800615e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2240      	movs	r2, #64	; 0x40
 8006164:	2100      	movs	r1, #0
 8006166:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
  }
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b007      	add	sp, #28
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	80002000 	.word	0x80002000
 800617c:	fe00e800 	.word	0xfe00e800

08006180 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	0008      	movs	r0, r1
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	0019      	movs	r1, r3
 800618e:	230a      	movs	r3, #10
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	1c02      	adds	r2, r0, #0
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	2308      	movs	r3, #8
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	1c0a      	adds	r2, r1, #0
 800619c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2241      	movs	r2, #65	; 0x41
 80061a2:	5c9b      	ldrb	r3, [r3, r2]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d000      	beq.n	80061ac <HAL_I2C_Master_Receive+0x2c>
 80061aa:	e0e8      	b.n	800637e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Master_Receive+0x3a>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0e2      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2240      	movs	r2, #64	; 0x40
 80061be:	2101      	movs	r1, #1
 80061c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061c2:	f7ff fbc7 	bl	8005954 <HAL_GetTick>
 80061c6:	0003      	movs	r3, r0
 80061c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	0219      	lsls	r1, r3, #8
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	2319      	movs	r3, #25
 80061d6:	2201      	movs	r2, #1
 80061d8:	f000 f8fc 	bl	80063d4 <I2C_WaitOnFlagUntilTimeout>
 80061dc:	1e03      	subs	r3, r0, #0
 80061de:	d001      	beq.n	80061e4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0cd      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2241      	movs	r2, #65	; 0x41
 80061e8:	2122      	movs	r1, #34	; 0x22
 80061ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2242      	movs	r2, #66	; 0x42
 80061f0:	2110      	movs	r1, #16
 80061f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2208      	movs	r2, #8
 8006204:	18ba      	adds	r2, r7, r2
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	2bff      	cmp	r3, #255	; 0xff
 8006218:	d911      	bls.n	800623e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	b2da      	uxtb	r2, r3
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	045c      	lsls	r4, r3, #17
 800622a:	230a      	movs	r3, #10
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	8819      	ldrh	r1, [r3, #0]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	4b55      	ldr	r3, [pc, #340]	; (8006388 <HAL_I2C_Master_Receive+0x208>)
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	0023      	movs	r3, r4
 8006238:	f000 fb26 	bl	8006888 <I2C_TransferConfig>
 800623c:	e076      	b.n	800632c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624c:	b2da      	uxtb	r2, r3
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	049c      	lsls	r4, r3, #18
 8006252:	230a      	movs	r3, #10
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	8819      	ldrh	r1, [r3, #0]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	4b4b      	ldr	r3, [pc, #300]	; (8006388 <HAL_I2C_Master_Receive+0x208>)
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	0023      	movs	r3, r4
 8006260:	f000 fb12 	bl	8006888 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006264:	e062      	b.n	800632c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 f989 	bl	8006584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d001      	beq.n	800627a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e082      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d03a      	beq.n	800632c <HAL_I2C_Master_Receive+0x1ac>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d136      	bne.n	800632c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	0013      	movs	r3, r2
 80062c8:	2200      	movs	r2, #0
 80062ca:	2180      	movs	r1, #128	; 0x80
 80062cc:	f000 f882 	bl	80063d4 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	1e03      	subs	r3, r0, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e053      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2bff      	cmp	r3, #255	; 0xff
 80062e0:	d911      	bls.n	8006306 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	2380      	movs	r3, #128	; 0x80
 80062f0:	045c      	lsls	r4, r3, #17
 80062f2:	230a      	movs	r3, #10
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	8819      	ldrh	r1, [r3, #0]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	0023      	movs	r3, r4
 8006300:	f000 fac2 	bl	8006888 <I2C_TransferConfig>
 8006304:	e012      	b.n	800632c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	b2da      	uxtb	r2, r3
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	049c      	lsls	r4, r3, #18
 800631a:	230a      	movs	r3, #10
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	8819      	ldrh	r1, [r3, #0]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	2300      	movs	r3, #0
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	0023      	movs	r3, r4
 8006328:	f000 faae 	bl	8006888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d197      	bne.n	8006266 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0018      	movs	r0, r3
 800633e:	f000 f8dd 	bl	80064fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e01a      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2220      	movs	r2, #32
 8006350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	490b      	ldr	r1, [pc, #44]	; (800638c <HAL_I2C_Master_Receive+0x20c>)
 800635e:	400a      	ands	r2, r1
 8006360:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2241      	movs	r2, #65	; 0x41
 8006366:	2120      	movs	r1, #32
 8006368:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2242      	movs	r2, #66	; 0x42
 800636e:	2100      	movs	r1, #0
 8006370:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2240      	movs	r2, #64	; 0x40
 8006376:	2100      	movs	r1, #0
 8006378:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	0018      	movs	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	b007      	add	sp, #28
 8006386:	bd90      	pop	{r4, r7, pc}
 8006388:	80002400 	.word	0x80002400
 800638c:	fe00e800 	.word	0xfe00e800

08006390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2202      	movs	r2, #2
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d103      	bne.n	80063ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2201      	movs	r2, #1
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d007      	beq.n	80063cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2101      	movs	r1, #1
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
  }
}
 80063cc:	46c0      	nop			; (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b002      	add	sp, #8
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	1dfb      	adds	r3, r7, #7
 80063e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063e4:	e030      	b.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	d02d      	beq.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ec:	f7ff fab2 	bl	8005954 <HAL_GetTick>
 80063f0:	0002      	movs	r2, r0
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d122      	bne.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	425a      	negs	r2, r3
 8006412:	4153      	adcs	r3, r2
 8006414:	b2db      	uxtb	r3, r3
 8006416:	001a      	movs	r2, r3
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d113      	bne.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	2220      	movs	r2, #32
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2241      	movs	r2, #65	; 0x41
 8006430:	2120      	movs	r1, #32
 8006432:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2242      	movs	r2, #66	; 0x42
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	2100      	movs	r1, #0
 8006442:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e00f      	b.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	425a      	negs	r2, r3
 8006458:	4153      	adcs	r3, r2
 800645a:	b2db      	uxtb	r3, r3
 800645c:	001a      	movs	r2, r3
 800645e:	1dfb      	adds	r3, r7, #7
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d0bf      	beq.n	80063e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b004      	add	sp, #16
 800646e:	bd80      	pop	{r7, pc}

08006470 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800647c:	e032      	b.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f8ff 	bl	8006688 <I2C_IsErrorOccurred>
 800648a:	1e03      	subs	r3, r0, #0
 800648c:	d001      	beq.n	8006492 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e030      	b.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3301      	adds	r3, #1
 8006496:	d025      	beq.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006498:	f7ff fa5c 	bl	8005954 <HAL_GetTick>
 800649c:	0002      	movs	r2, r0
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d302      	bcc.n	80064ae <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d11a      	bne.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2202      	movs	r2, #2
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d013      	beq.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	2220      	movs	r2, #32
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2241      	movs	r2, #65	; 0x41
 80064cc:	2120      	movs	r1, #32
 80064ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2242      	movs	r2, #66	; 0x42
 80064d4:	2100      	movs	r1, #0
 80064d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2240      	movs	r2, #64	; 0x40
 80064dc:	2100      	movs	r1, #0
 80064de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e007      	b.n	80064f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2202      	movs	r2, #2
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d1c5      	bne.n	800647e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b004      	add	sp, #16
 80064fa:	bd80      	pop	{r7, pc}

080064fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006508:	e02f      	b.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	0018      	movs	r0, r3
 8006512:	f000 f8b9 	bl	8006688 <I2C_IsErrorOccurred>
 8006516:	1e03      	subs	r3, r0, #0
 8006518:	d001      	beq.n	800651e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e02d      	b.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7ff fa19 	bl	8005954 <HAL_GetTick>
 8006522:	0002      	movs	r2, r0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11a      	bne.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2220      	movs	r2, #32
 800653c:	4013      	ands	r3, r2
 800653e:	2b20      	cmp	r3, #32
 8006540:	d013      	beq.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	2220      	movs	r2, #32
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2241      	movs	r2, #65	; 0x41
 8006552:	2120      	movs	r1, #32
 8006554:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2242      	movs	r2, #66	; 0x42
 800655a:	2100      	movs	r1, #0
 800655c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2240      	movs	r2, #64	; 0x40
 8006562:	2100      	movs	r1, #0
 8006564:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e007      	b.n	800657a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2220      	movs	r2, #32
 8006572:	4013      	ands	r3, r2
 8006574:	2b20      	cmp	r3, #32
 8006576:	d1c8      	bne.n	800650a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006590:	e06b      	b.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	0018      	movs	r0, r3
 800659a:	f000 f875 	bl	8006688 <I2C_IsErrorOccurred>
 800659e:	1e03      	subs	r3, r0, #0
 80065a0:	d001      	beq.n	80065a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e069      	b.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2220      	movs	r2, #32
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d138      	bne.n	8006626 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2204      	movs	r2, #4
 80065bc:	4013      	ands	r3, r2
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d105      	bne.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e055      	b.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2210      	movs	r2, #16
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d107      	bne.n	80065ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2210      	movs	r2, #16
 80065e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2204      	movs	r2, #4
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
 80065ea:	e002      	b.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2220      	movs	r2, #32
 80065f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	491f      	ldr	r1, [pc, #124]	; (8006684 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006606:	400a      	ands	r2, r1
 8006608:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2241      	movs	r2, #65	; 0x41
 800660e:	2120      	movs	r1, #32
 8006610:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2242      	movs	r2, #66	; 0x42
 8006616:	2100      	movs	r1, #0
 8006618:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2240      	movs	r2, #64	; 0x40
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e029      	b.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7ff f995 	bl	8005954 <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2204      	movs	r2, #4
 8006644:	4013      	ands	r3, r2
 8006646:	2b04      	cmp	r3, #4
 8006648:	d00f      	beq.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	2220      	movs	r2, #32
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2241      	movs	r2, #65	; 0x41
 800665a:	2120      	movs	r1, #32
 800665c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2240      	movs	r2, #64	; 0x40
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e007      	b.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2204      	movs	r2, #4
 8006672:	4013      	ands	r3, r2
 8006674:	2b04      	cmp	r3, #4
 8006676:	d18c      	bne.n	8006592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	fe00e800 	.word	0xfe00e800

08006688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b08b      	sub	sp, #44	; 0x2c
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	2327      	movs	r3, #39	; 0x27
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2210      	movs	r2, #16
 80066b0:	4013      	ands	r3, r2
 80066b2:	d100      	bne.n	80066b6 <I2C_IsErrorOccurred+0x2e>
 80066b4:	e082      	b.n	80067bc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2210      	movs	r2, #16
 80066bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066be:	e060      	b.n	8006782 <I2C_IsErrorOccurred+0xfa>
 80066c0:	2427      	movs	r4, #39	; 0x27
 80066c2:	193b      	adds	r3, r7, r4
 80066c4:	193a      	adds	r2, r7, r4
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	3301      	adds	r3, #1
 80066ce:	d058      	beq.n	8006782 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066d0:	f7ff f940 	bl	8005954 <HAL_GetTick>
 80066d4:	0002      	movs	r2, r0
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d306      	bcc.n	80066ee <I2C_IsErrorOccurred+0x66>
 80066e0:	193b      	adds	r3, r7, r4
 80066e2:	193a      	adds	r2, r7, r4
 80066e4:	7812      	ldrb	r2, [r2, #0]
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d149      	bne.n	8006782 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	4013      	ands	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066fc:	2013      	movs	r0, #19
 80066fe:	183b      	adds	r3, r7, r0
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	2142      	movs	r1, #66	; 0x42
 8006704:	5c52      	ldrb	r2, [r2, r1]
 8006706:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	401a      	ands	r2, r3
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	429a      	cmp	r2, r3
 800671a:	d126      	bne.n	800676a <I2C_IsErrorOccurred+0xe2>
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	01db      	lsls	r3, r3, #7
 8006722:	429a      	cmp	r2, r3
 8006724:	d021      	beq.n	800676a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006726:	183b      	adds	r3, r7, r0
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b20      	cmp	r3, #32
 800672c:	d01d      	beq.n	800676a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	01c9      	lsls	r1, r1, #7
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006740:	f7ff f908 	bl	8005954 <HAL_GetTick>
 8006744:	0003      	movs	r3, r0
 8006746:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006748:	e00f      	b.n	800676a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800674a:	f7ff f903 	bl	8005954 <HAL_GetTick>
 800674e:	0002      	movs	r2, r0
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b19      	cmp	r3, #25
 8006756:	d908      	bls.n	800676a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2220      	movs	r2, #32
 800675c:	4313      	orrs	r3, r2
 800675e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006760:	2327      	movs	r3, #39	; 0x27
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]

              break;
 8006768:	e00b      	b.n	8006782 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	2220      	movs	r2, #32
 8006772:	4013      	ands	r3, r2
 8006774:	2127      	movs	r1, #39	; 0x27
 8006776:	187a      	adds	r2, r7, r1
 8006778:	1879      	adds	r1, r7, r1
 800677a:	7809      	ldrb	r1, [r1, #0]
 800677c:	7011      	strb	r1, [r2, #0]
 800677e:	2b20      	cmp	r3, #32
 8006780:	d1e3      	bne.n	800674a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2220      	movs	r2, #32
 800678a:	4013      	ands	r3, r2
 800678c:	2b20      	cmp	r3, #32
 800678e:	d004      	beq.n	800679a <I2C_IsErrorOccurred+0x112>
 8006790:	2327      	movs	r3, #39	; 0x27
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d092      	beq.n	80066c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800679a:	2327      	movs	r3, #39	; 0x27
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d103      	bne.n	80067ac <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2220      	movs	r2, #32
 80067aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2204      	movs	r2, #4
 80067b0:	4313      	orrs	r3, r2
 80067b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067b4:	2327      	movs	r3, #39	; 0x27
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4013      	ands	r3, r2
 80067cc:	d00c      	beq.n	80067e8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	2201      	movs	r2, #1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2280      	movs	r2, #128	; 0x80
 80067dc:	0052      	lsls	r2, r2, #1
 80067de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e0:	2327      	movs	r3, #39	; 0x27
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4013      	ands	r3, r2
 80067f0:	d00c      	beq.n	800680c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2208      	movs	r2, #8
 80067f6:	4313      	orrs	r3, r2
 80067f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	00d2      	lsls	r2, r2, #3
 8006802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006804:	2327      	movs	r3, #39	; 0x27
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	2201      	movs	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4013      	ands	r3, r2
 8006814:	d00c      	beq.n	8006830 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2202      	movs	r2, #2
 800681a:	4313      	orrs	r3, r2
 800681c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2280      	movs	r2, #128	; 0x80
 8006824:	0092      	lsls	r2, r2, #2
 8006826:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006828:	2327      	movs	r3, #39	; 0x27
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006830:	2327      	movs	r3, #39	; 0x27
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01d      	beq.n	8006876 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	0018      	movs	r0, r3
 800683e:	f7ff fda7 	bl	8006390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	490d      	ldr	r1, [pc, #52]	; (8006884 <I2C_IsErrorOccurred+0x1fc>)
 800684e:	400a      	ands	r2, r1
 8006850:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	431a      	orrs	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2241      	movs	r2, #65	; 0x41
 8006862:	2120      	movs	r1, #32
 8006864:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2242      	movs	r2, #66	; 0x42
 800686a:	2100      	movs	r1, #0
 800686c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	2100      	movs	r1, #0
 8006874:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006876:	2327      	movs	r3, #39	; 0x27
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	781b      	ldrb	r3, [r3, #0]
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b00b      	add	sp, #44	; 0x2c
 8006882:	bd90      	pop	{r4, r7, pc}
 8006884:	fe00e800 	.word	0xfe00e800

08006888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	0008      	movs	r0, r1
 8006892:	0011      	movs	r1, r2
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	240a      	movs	r4, #10
 8006898:	193b      	adds	r3, r7, r4
 800689a:	1c02      	adds	r2, r0, #0
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	2009      	movs	r0, #9
 80068a0:	183b      	adds	r3, r7, r0
 80068a2:	1c0a      	adds	r2, r1, #0
 80068a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068a6:	193b      	adds	r3, r7, r4
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	059b      	lsls	r3, r3, #22
 80068ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068ae:	183b      	adds	r3, r7, r0
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	0419      	lsls	r1, r3, #16
 80068b4:	23ff      	movs	r3, #255	; 0xff
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	4313      	orrs	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d2:	0d51      	lsrs	r1, r2, #21
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	00d2      	lsls	r2, r2, #3
 80068d8:	400a      	ands	r2, r1
 80068da:	4907      	ldr	r1, [pc, #28]	; (80068f8 <I2C_TransferConfig+0x70>)
 80068dc:	430a      	orrs	r2, r1
 80068de:	43d2      	mvns	r2, r2
 80068e0:	401a      	ands	r2, r3
 80068e2:	0011      	movs	r1, r2
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	46bd      	mov	sp, r7
 80068f2:	b007      	add	sp, #28
 80068f4:	bd90      	pop	{r4, r7, pc}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	03ff63ff 	.word	0x03ff63ff

080068fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2241      	movs	r2, #65	; 0x41
 800690a:	5c9b      	ldrb	r3, [r3, r2]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	d138      	bne.n	8006984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2240      	movs	r2, #64	; 0x40
 8006916:	5c9b      	ldrb	r3, [r3, r2]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800691c:	2302      	movs	r3, #2
 800691e:	e032      	b.n	8006986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2240      	movs	r2, #64	; 0x40
 8006924:	2101      	movs	r1, #1
 8006926:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2241      	movs	r2, #65	; 0x41
 800692c:	2124      	movs	r1, #36	; 0x24
 800692e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2101      	movs	r1, #1
 800693c:	438a      	bics	r2, r1
 800693e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4911      	ldr	r1, [pc, #68]	; (8006990 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800694c:	400a      	ands	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2101      	movs	r1, #1
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2241      	movs	r2, #65	; 0x41
 8006974:	2120      	movs	r1, #32
 8006976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	2100      	movs	r1, #0
 800697e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	0018      	movs	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	b002      	add	sp, #8
 800698c:	bd80      	pop	{r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	ffffefff 	.word	0xffffefff

08006994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2241      	movs	r2, #65	; 0x41
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d139      	bne.n	8006a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2240      	movs	r2, #64	; 0x40
 80069ae:	5c9b      	ldrb	r3, [r3, r2]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e033      	b.n	8006a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	2101      	movs	r1, #1
 80069be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2241      	movs	r2, #65	; 0x41
 80069c4:	2124      	movs	r1, #36	; 0x24
 80069c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2101      	movs	r1, #1
 80069d4:	438a      	bics	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a11      	ldr	r2, [pc, #68]	; (8006a28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2101      	movs	r1, #1
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2241      	movs	r2, #65	; 0x41
 8006a0e:	2120      	movs	r1, #32
 8006a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2240      	movs	r2, #64	; 0x40
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
  }
}
 8006a20:	0018      	movs	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b004      	add	sp, #16
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	fffff0ff 	.word	0xfffff0ff

08006a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f000 fb76 	bl	800712c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	4013      	ands	r3, r2
 8006a48:	d100      	bne.n	8006a4c <HAL_RCC_OscConfig+0x20>
 8006a4a:	e08e      	b.n	8006b6a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a4c:	4bc5      	ldr	r3, [pc, #788]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	220c      	movs	r2, #12
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d00e      	beq.n	8006a76 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a58:	4bc2      	ldr	r3, [pc, #776]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	220c      	movs	r2, #12
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d117      	bne.n	8006a94 <HAL_RCC_OscConfig+0x68>
 8006a64:	4bbf      	ldr	r3, [pc, #764]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	23c0      	movs	r3, #192	; 0xc0
 8006a6a:	025b      	lsls	r3, r3, #9
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10e      	bne.n	8006a94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a76:	4bbb      	ldr	r3, [pc, #748]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	2380      	movs	r3, #128	; 0x80
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d100      	bne.n	8006a84 <HAL_RCC_OscConfig+0x58>
 8006a82:	e071      	b.n	8006b68 <HAL_RCC_OscConfig+0x13c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d000      	beq.n	8006a8e <HAL_RCC_OscConfig+0x62>
 8006a8c:	e06c      	b.n	8006b68 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f000 fb4c 	bl	800712c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_OscConfig+0x80>
 8006a9c:	4bb1      	ldr	r3, [pc, #708]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4bb0      	ldr	r3, [pc, #704]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	0249      	lsls	r1, r1, #9
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e02f      	b.n	8006b0c <HAL_RCC_OscConfig+0xe0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10c      	bne.n	8006ace <HAL_RCC_OscConfig+0xa2>
 8006ab4:	4bab      	ldr	r3, [pc, #684]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4baa      	ldr	r3, [pc, #680]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006aba:	49ab      	ldr	r1, [pc, #684]	; (8006d68 <HAL_RCC_OscConfig+0x33c>)
 8006abc:	400a      	ands	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	4ba8      	ldr	r3, [pc, #672]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4ba7      	ldr	r3, [pc, #668]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ac6:	49a9      	ldr	r1, [pc, #676]	; (8006d6c <HAL_RCC_OscConfig+0x340>)
 8006ac8:	400a      	ands	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e01e      	b.n	8006b0c <HAL_RCC_OscConfig+0xe0>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d10e      	bne.n	8006af4 <HAL_RCC_OscConfig+0xc8>
 8006ad6:	4ba3      	ldr	r3, [pc, #652]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4ba2      	ldr	r3, [pc, #648]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	02c9      	lsls	r1, r1, #11
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	4b9f      	ldr	r3, [pc, #636]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4b9e      	ldr	r3, [pc, #632]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006aea:	2180      	movs	r1, #128	; 0x80
 8006aec:	0249      	lsls	r1, r1, #9
 8006aee:	430a      	orrs	r2, r1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e00b      	b.n	8006b0c <HAL_RCC_OscConfig+0xe0>
 8006af4:	4b9b      	ldr	r3, [pc, #620]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4b9a      	ldr	r3, [pc, #616]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006afa:	499b      	ldr	r1, [pc, #620]	; (8006d68 <HAL_RCC_OscConfig+0x33c>)
 8006afc:	400a      	ands	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	4b98      	ldr	r3, [pc, #608]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4b97      	ldr	r3, [pc, #604]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b06:	4999      	ldr	r1, [pc, #612]	; (8006d6c <HAL_RCC_OscConfig+0x340>)
 8006b08:	400a      	ands	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d014      	beq.n	8006b3e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fe ff1e 	bl	8005954 <HAL_GetTick>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b1e:	f7fe ff19 	bl	8005954 <HAL_GetTick>
 8006b22:	0002      	movs	r2, r0
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b64      	cmp	r3, #100	; 0x64
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e2fd      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b30:	4b8c      	ldr	r3, [pc, #560]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0xf2>
 8006b3c:	e015      	b.n	8006b6a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3e:	f7fe ff09 	bl	8005954 <HAL_GetTick>
 8006b42:	0003      	movs	r3, r0
 8006b44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b48:	f7fe ff04 	bl	8005954 <HAL_GetTick>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b64      	cmp	r3, #100	; 0x64
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e2e8      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5a:	4b82      	ldr	r3, [pc, #520]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	029b      	lsls	r3, r3, #10
 8006b62:	4013      	ands	r3, r2
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x11c>
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	4013      	ands	r3, r2
 8006b72:	d100      	bne.n	8006b76 <HAL_RCC_OscConfig+0x14a>
 8006b74:	e06c      	b.n	8006c50 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006b76:	4b7b      	ldr	r3, [pc, #492]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	220c      	movs	r2, #12
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006b80:	4b78      	ldr	r3, [pc, #480]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	220c      	movs	r2, #12
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d11f      	bne.n	8006bcc <HAL_RCC_OscConfig+0x1a0>
 8006b8c:	4b75      	ldr	r3, [pc, #468]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	23c0      	movs	r3, #192	; 0xc0
 8006b92:	025b      	lsls	r3, r3, #9
 8006b94:	401a      	ands	r2, r3
 8006b96:	2380      	movs	r3, #128	; 0x80
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d116      	bne.n	8006bcc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b9e:	4b71      	ldr	r3, [pc, #452]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x188>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e2bb      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb4:	4b6b      	ldr	r3, [pc, #428]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	22f8      	movs	r2, #248	; 0xf8
 8006bba:	4393      	bics	r3, r2
 8006bbc:	0019      	movs	r1, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	00da      	lsls	r2, r3, #3
 8006bc4:	4b67      	ldr	r3, [pc, #412]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bca:	e041      	b.n	8006c50 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d024      	beq.n	8006c1e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd4:	4b63      	ldr	r3, [pc, #396]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006bda:	2101      	movs	r1, #1
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fe feb8 	bl	8005954 <HAL_GetTick>
 8006be4:	0003      	movs	r3, r0
 8006be6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bea:	f7fe feb3 	bl	8005954 <HAL_GetTick>
 8006bee:	0002      	movs	r2, r0
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e297      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfc:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2202      	movs	r2, #2
 8006c02:	4013      	ands	r3, r2
 8006c04:	d0f1      	beq.n	8006bea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c06:	4b57      	ldr	r3, [pc, #348]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	22f8      	movs	r2, #248	; 0xf8
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	0019      	movs	r1, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	00da      	lsls	r2, r3, #3
 8006c16:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e018      	b.n	8006c50 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c1e:	4b51      	ldr	r3, [pc, #324]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c24:	2101      	movs	r1, #1
 8006c26:	438a      	bics	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fe fe93 	bl	8005954 <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c34:	f7fe fe8e 	bl	8005954 <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e272      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d1f1      	bne.n	8006c34 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2208      	movs	r2, #8
 8006c56:	4013      	ands	r3, r2
 8006c58:	d036      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d019      	beq.n	8006c96 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c62:	4b40      	ldr	r3, [pc, #256]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c66:	4b3f      	ldr	r3, [pc, #252]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c68:	2101      	movs	r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c6e:	f7fe fe71 	bl	8005954 <HAL_GetTick>
 8006c72:	0003      	movs	r3, r0
 8006c74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c78:	f7fe fe6c 	bl	8005954 <HAL_GetTick>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e250      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8a:	4b36      	ldr	r3, [pc, #216]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2202      	movs	r2, #2
 8006c90:	4013      	ands	r3, r2
 8006c92:	d0f1      	beq.n	8006c78 <HAL_RCC_OscConfig+0x24c>
 8006c94:	e018      	b.n	8006cc8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c96:	4b33      	ldr	r3, [pc, #204]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c9a:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	438a      	bics	r2, r1
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca2:	f7fe fe57 	bl	8005954 <HAL_GetTick>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cac:	f7fe fe52 	bl	8005954 <HAL_GetTick>
 8006cb0:	0002      	movs	r2, r0
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e236      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cbe:	4b29      	ldr	r3, [pc, #164]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d1f1      	bne.n	8006cac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2204      	movs	r2, #4
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d100      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x2a8>
 8006cd2:	e0b5      	b.n	8006e40 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd4:	201f      	movs	r0, #31
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	055b      	lsls	r3, r3, #21
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d110      	bne.n	8006d0a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	0549      	lsls	r1, r1, #21
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
 8006cf6:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	055b      	lsls	r3, r3, #21
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d04:	183b      	adds	r3, r7, r0
 8006d06:	2201      	movs	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <HAL_RCC_OscConfig+0x344>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d11a      	bne.n	8006d4c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <HAL_RCC_OscConfig+0x344>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <HAL_RCC_OscConfig+0x344>)
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	0049      	lsls	r1, r1, #1
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d24:	f7fe fe16 	bl	8005954 <HAL_GetTick>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2e:	f7fe fe11 	bl	8005954 <HAL_GetTick>
 8006d32:	0002      	movs	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b64      	cmp	r3, #100	; 0x64
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e1f5      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_RCC_OscConfig+0x344>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10f      	bne.n	8006d74 <HAL_RCC_OscConfig+0x348>
 8006d54:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006d56:	6a1a      	ldr	r2, [r3, #32]
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <HAL_RCC_OscConfig+0x338>)
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	621a      	str	r2, [r3, #32]
 8006d60:	e036      	b.n	8006dd0 <HAL_RCC_OscConfig+0x3a4>
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	40021000 	.word	0x40021000
 8006d68:	fffeffff 	.word	0xfffeffff
 8006d6c:	fffbffff 	.word	0xfffbffff
 8006d70:	40007000 	.word	0x40007000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <HAL_RCC_OscConfig+0x36a>
 8006d7c:	4bca      	ldr	r3, [pc, #808]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	4bc9      	ldr	r3, [pc, #804]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006d82:	2101      	movs	r1, #1
 8006d84:	438a      	bics	r2, r1
 8006d86:	621a      	str	r2, [r3, #32]
 8006d88:	4bc7      	ldr	r3, [pc, #796]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	4bc6      	ldr	r3, [pc, #792]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006d8e:	2104      	movs	r1, #4
 8006d90:	438a      	bics	r2, r1
 8006d92:	621a      	str	r2, [r3, #32]
 8006d94:	e01c      	b.n	8006dd0 <HAL_RCC_OscConfig+0x3a4>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCC_OscConfig+0x38c>
 8006d9e:	4bc2      	ldr	r3, [pc, #776]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	4bc1      	ldr	r3, [pc, #772]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006da4:	2104      	movs	r1, #4
 8006da6:	430a      	orrs	r2, r1
 8006da8:	621a      	str	r2, [r3, #32]
 8006daa:	4bbf      	ldr	r3, [pc, #764]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	4bbe      	ldr	r3, [pc, #760]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006db0:	2101      	movs	r1, #1
 8006db2:	430a      	orrs	r2, r1
 8006db4:	621a      	str	r2, [r3, #32]
 8006db6:	e00b      	b.n	8006dd0 <HAL_RCC_OscConfig+0x3a4>
 8006db8:	4bbb      	ldr	r3, [pc, #748]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006dba:	6a1a      	ldr	r2, [r3, #32]
 8006dbc:	4bba      	ldr	r3, [pc, #744]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	438a      	bics	r2, r1
 8006dc2:	621a      	str	r2, [r3, #32]
 8006dc4:	4bb8      	ldr	r3, [pc, #736]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	4bb7      	ldr	r3, [pc, #732]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006dca:	2104      	movs	r1, #4
 8006dcc:	438a      	bics	r2, r1
 8006dce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d014      	beq.n	8006e02 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd8:	f7fe fdbc 	bl	8005954 <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de0:	e009      	b.n	8006df6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de2:	f7fe fdb7 	bl	8005954 <HAL_GetTick>
 8006de6:	0002      	movs	r2, r0
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	4aaf      	ldr	r2, [pc, #700]	; (80070ac <HAL_RCC_OscConfig+0x680>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e19a      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df6:	4bac      	ldr	r3, [pc, #688]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x3b6>
 8006e00:	e013      	b.n	8006e2a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e02:	f7fe fda7 	bl	8005954 <HAL_GetTick>
 8006e06:	0003      	movs	r3, r0
 8006e08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0a:	e009      	b.n	8006e20 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e0c:	f7fe fda2 	bl	8005954 <HAL_GetTick>
 8006e10:	0002      	movs	r2, r0
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	4aa5      	ldr	r2, [pc, #660]	; (80070ac <HAL_RCC_OscConfig+0x680>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e185      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e20:	4ba1      	ldr	r3, [pc, #644]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	2202      	movs	r2, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	d1f0      	bne.n	8006e0c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e2a:	231f      	movs	r3, #31
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e34:	4b9c      	ldr	r3, [pc, #624]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	4b9b      	ldr	r3, [pc, #620]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e3a:	499d      	ldr	r1, [pc, #628]	; (80070b0 <HAL_RCC_OscConfig+0x684>)
 8006e3c:	400a      	ands	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2210      	movs	r2, #16
 8006e46:	4013      	ands	r3, r2
 8006e48:	d063      	beq.n	8006f12 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d12a      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006e52:	4b95      	ldr	r3, [pc, #596]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e56:	4b94      	ldr	r3, [pc, #592]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e58:	2104      	movs	r1, #4
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006e5e:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e62:	4b91      	ldr	r3, [pc, #580]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e64:	2101      	movs	r1, #1
 8006e66:	430a      	orrs	r2, r1
 8006e68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e6a:	f7fe fd73 	bl	8005954 <HAL_GetTick>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006e74:	f7fe fd6e 	bl	8005954 <HAL_GetTick>
 8006e78:	0002      	movs	r2, r0
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e152      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006e86:	4b88      	ldr	r3, [pc, #544]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d0f1      	beq.n	8006e74 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006e90:	4b85      	ldr	r3, [pc, #532]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	22f8      	movs	r2, #248	; 0xf8
 8006e96:	4393      	bics	r3, r2
 8006e98:	0019      	movs	r1, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	00da      	lsls	r2, r3, #3
 8006ea0:	4b81      	ldr	r3, [pc, #516]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8006ea6:	e034      	b.n	8006f12 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	3305      	adds	r3, #5
 8006eae:	d111      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006eb0:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb4:	4b7c      	ldr	r3, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006eb6:	2104      	movs	r1, #4
 8006eb8:	438a      	bics	r2, r1
 8006eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006ebc:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	22f8      	movs	r2, #248	; 0xf8
 8006ec2:	4393      	bics	r3, r2
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	00da      	lsls	r2, r3, #3
 8006ecc:	4b76      	ldr	r3, [pc, #472]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ed2:	e01e      	b.n	8006f12 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006ed4:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed8:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006eda:	2104      	movs	r1, #4
 8006edc:	430a      	orrs	r2, r1
 8006ede:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006ee0:	4b71      	ldr	r3, [pc, #452]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	4b70      	ldr	r3, [pc, #448]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	438a      	bics	r2, r1
 8006eea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eec:	f7fe fd32 	bl	8005954 <HAL_GetTick>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006ef6:	f7fe fd2d 	bl	8005954 <HAL_GetTick>
 8006efa:	0002      	movs	r2, r0
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e111      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006f08:	4b67      	ldr	r3, [pc, #412]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d1f1      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2220      	movs	r2, #32
 8006f18:	4013      	ands	r3, r2
 8006f1a:	d05c      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006f1c:	4b62      	ldr	r3, [pc, #392]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	220c      	movs	r2, #12
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d00e      	beq.n	8006f46 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006f28:	4b5f      	ldr	r3, [pc, #380]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	220c      	movs	r2, #12
 8006f2e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d114      	bne.n	8006f5e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006f34:	4b5c      	ldr	r3, [pc, #368]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	23c0      	movs	r3, #192	; 0xc0
 8006f3a:	025b      	lsls	r3, r3, #9
 8006f3c:	401a      	ands	r2, r3
 8006f3e:	23c0      	movs	r3, #192	; 0xc0
 8006f40:	025b      	lsls	r3, r3, #9
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006f46:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4a:	2380      	movs	r3, #128	; 0x80
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d040      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x5a8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d03c      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e0e6      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d01b      	beq.n	8006f9e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006f66:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6a:	4b4f      	ldr	r3, [pc, #316]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	0249      	lsls	r1, r1, #9
 8006f70:	430a      	orrs	r2, r1
 8006f72:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f74:	f7fe fcee 	bl	8005954 <HAL_GetTick>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f7e:	f7fe fce9 	bl	8005954 <HAL_GetTick>
 8006f82:	0002      	movs	r2, r0
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e0cd      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006f90:	4b45      	ldr	r3, [pc, #276]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0x552>
 8006f9c:	e01b      	b.n	8006fd6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006f9e:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006fa4:	4943      	ldr	r1, [pc, #268]	; (80070b4 <HAL_RCC_OscConfig+0x688>)
 8006fa6:	400a      	ands	r2, r1
 8006fa8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006faa:	f7fe fcd3 	bl	8005954 <HAL_GetTick>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb4:	f7fe fcce 	bl	8005954 <HAL_GetTick>
 8006fb8:	0002      	movs	r2, r0
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e0b2      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006fc6:	4b38      	ldr	r3, [pc, #224]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	029b      	lsls	r3, r3, #10
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x588>
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006fd4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d100      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x5b4>
 8006fde:	e0a4      	b.n	800712a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fe0:	4b31      	ldr	r3, [pc, #196]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	220c      	movs	r2, #12
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d100      	bne.n	8006fee <HAL_RCC_OscConfig+0x5c2>
 8006fec:	e078      	b.n	80070e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d14c      	bne.n	8007090 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff6:	4b2c      	ldr	r3, [pc, #176]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8006ffc:	492e      	ldr	r1, [pc, #184]	; (80070b8 <HAL_RCC_OscConfig+0x68c>)
 8006ffe:	400a      	ands	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007002:	f7fe fca7 	bl	8005954 <HAL_GetTick>
 8007006:	0003      	movs	r3, r0
 8007008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800700c:	f7fe fca2 	bl	8005954 <HAL_GetTick>
 8007010:	0002      	movs	r2, r0
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e086      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800701e:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	049b      	lsls	r3, r3, #18
 8007026:	4013      	ands	r3, r2
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800702a:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	220f      	movs	r2, #15
 8007030:	4393      	bics	r3, r2
 8007032:	0019      	movs	r1, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007038:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 800703a:	430a      	orrs	r2, r1
 800703c:	62da      	str	r2, [r3, #44]	; 0x2c
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_RCC_OscConfig+0x690>)
 8007044:	4013      	ands	r3, r2
 8007046:	0019      	movs	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	431a      	orrs	r2, r3
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 800705e:	2180      	movs	r1, #128	; 0x80
 8007060:	0449      	lsls	r1, r1, #17
 8007062:	430a      	orrs	r2, r1
 8007064:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007066:	f7fe fc75 	bl	8005954 <HAL_GetTick>
 800706a:	0003      	movs	r3, r0
 800706c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007070:	f7fe fc70 	bl	8005954 <HAL_GetTick>
 8007074:	0002      	movs	r2, r0
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e054      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	049b      	lsls	r3, r3, #18
 800708a:	4013      	ands	r3, r2
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0x644>
 800708e:	e04c      	b.n	800712a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <HAL_RCC_OscConfig+0x67c>)
 8007096:	4908      	ldr	r1, [pc, #32]	; (80070b8 <HAL_RCC_OscConfig+0x68c>)
 8007098:	400a      	ands	r2, r1
 800709a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709c:	f7fe fc5a 	bl	8005954 <HAL_GetTick>
 80070a0:	0003      	movs	r3, r0
 80070a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070a4:	e015      	b.n	80070d2 <HAL_RCC_OscConfig+0x6a6>
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	40021000 	.word	0x40021000
 80070ac:	00001388 	.word	0x00001388
 80070b0:	efffffff 	.word	0xefffffff
 80070b4:	fffeffff 	.word	0xfffeffff
 80070b8:	feffffff 	.word	0xfeffffff
 80070bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c0:	f7fe fc48 	bl	8005954 <HAL_GetTick>
 80070c4:	0002      	movs	r2, r0
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e02c      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070d2:	4b18      	ldr	r3, [pc, #96]	; (8007134 <HAL_RCC_OscConfig+0x708>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	049b      	lsls	r3, r3, #18
 80070da:	4013      	ands	r3, r2
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x694>
 80070de:	e024      	b.n	800712a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e01f      	b.n	800712c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80070ec:	4b11      	ldr	r3, [pc, #68]	; (8007134 <HAL_RCC_OscConfig+0x708>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_RCC_OscConfig+0x708>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	23c0      	movs	r3, #192	; 0xc0
 80070fc:	025b      	lsls	r3, r3, #9
 80070fe:	401a      	ands	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	429a      	cmp	r2, r3
 8007106:	d10e      	bne.n	8007126 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	220f      	movs	r2, #15
 800710c:	401a      	ands	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d107      	bne.n	8007126 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	23f0      	movs	r3, #240	; 0xf0
 800711a:	039b      	lsls	r3, r3, #14
 800711c:	401a      	ands	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007122:	429a      	cmp	r2, r3
 8007124:	d001      	beq.n	800712a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b008      	add	sp, #32
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40021000 	.word	0x40021000

08007138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0bf      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800714c:	4b61      	ldr	r3, [pc, #388]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	4013      	ands	r3, r2
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d911      	bls.n	800717e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715a:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2201      	movs	r2, #1
 8007160:	4393      	bics	r3, r2
 8007162:	0019      	movs	r1, r3
 8007164:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800716c:	4b59      	ldr	r3, [pc, #356]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	4013      	ands	r3, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d001      	beq.n	800717e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e0a6      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2202      	movs	r2, #2
 8007184:	4013      	ands	r3, r2
 8007186:	d015      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2204      	movs	r2, #4
 800718e:	4013      	ands	r3, r2
 8007190:	d006      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007192:	4b51      	ldr	r3, [pc, #324]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4b50      	ldr	r3, [pc, #320]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007198:	21e0      	movs	r1, #224	; 0xe0
 800719a:	00c9      	lsls	r1, r1, #3
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b4d      	ldr	r3, [pc, #308]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	22f0      	movs	r2, #240	; 0xf0
 80071a6:	4393      	bics	r3, r2
 80071a8:	0019      	movs	r1, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	4b4a      	ldr	r3, [pc, #296]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	4013      	ands	r3, r2
 80071bc:	d04c      	beq.n	8007258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	4b44      	ldr	r3, [pc, #272]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	4013      	ands	r3, r2
 80071d0:	d120      	bne.n	8007214 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e07a      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d107      	bne.n	80071ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071de:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	049b      	lsls	r3, r3, #18
 80071e6:	4013      	ands	r3, r2
 80071e8:	d114      	bne.n	8007214 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e06e      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d107      	bne.n	8007206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80071f6:	4b38      	ldr	r3, [pc, #224]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80071f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071fa:	2380      	movs	r3, #128	; 0x80
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	4013      	ands	r3, r2
 8007200:	d108      	bne.n	8007214 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e062      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007206:	4b34      	ldr	r3, [pc, #208]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2202      	movs	r2, #2
 800720c:	4013      	ands	r3, r2
 800720e:	d101      	bne.n	8007214 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e05b      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007214:	4b30      	ldr	r3, [pc, #192]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	4393      	bics	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007228:	f7fe fb94 	bl	8005954 <HAL_GetTick>
 800722c:	0003      	movs	r3, r0
 800722e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007230:	e009      	b.n	8007246 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007232:	f7fe fb8f 	bl	8005954 <HAL_GetTick>
 8007236:	0002      	movs	r2, r0
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	4a27      	ldr	r2, [pc, #156]	; (80072dc <HAL_RCC_ClockConfig+0x1a4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e042      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	220c      	movs	r2, #12
 800724c:	401a      	ands	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	429a      	cmp	r2, r3
 8007256:	d1ec      	bne.n	8007232 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007258:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	4013      	ands	r3, r2
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d211      	bcs.n	800728a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007266:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	4393      	bics	r3, r2
 800726e:	0019      	movs	r1, r3
 8007270:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007278:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <HAL_RCC_ClockConfig+0x19c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2201      	movs	r2, #1
 800727e:	4013      	ands	r3, r2
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d001      	beq.n	800728a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e020      	b.n	80072cc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2204      	movs	r2, #4
 8007290:	4013      	ands	r3, r2
 8007292:	d009      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007294:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <HAL_RCC_ClockConfig+0x1a8>)
 800729a:	4013      	ands	r3, r2
 800729c:	0019      	movs	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80072a8:	f000 f820 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 80072ac:	0001      	movs	r1, r0
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_RCC_ClockConfig+0x1a0>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	091b      	lsrs	r3, r3, #4
 80072b4:	220f      	movs	r2, #15
 80072b6:	4013      	ands	r3, r2
 80072b8:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <HAL_RCC_ClockConfig+0x1ac>)
 80072ba:	5cd3      	ldrb	r3, [r2, r3]
 80072bc:	000a      	movs	r2, r1
 80072be:	40da      	lsrs	r2, r3
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <HAL_RCC_ClockConfig+0x1b0>)
 80072c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7fe faff 	bl	80058c8 <HAL_InitTick>
  
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b004      	add	sp, #16
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40022000 	.word	0x40022000
 80072d8:	40021000 	.word	0x40021000
 80072dc:	00001388 	.word	0x00001388
 80072e0:	fffff8ff 	.word	0xfffff8ff
 80072e4:	08009e1c 	.word	0x08009e1c
 80072e8:	20000000 	.word	0x20000000

080072ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007306:	4b2d      	ldr	r3, [pc, #180]	; (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	220c      	movs	r2, #12
 8007310:	4013      	ands	r3, r2
 8007312:	2b0c      	cmp	r3, #12
 8007314:	d046      	beq.n	80073a4 <HAL_RCC_GetSysClockFreq+0xb8>
 8007316:	d848      	bhi.n	80073aa <HAL_RCC_GetSysClockFreq+0xbe>
 8007318:	2b04      	cmp	r3, #4
 800731a:	d002      	beq.n	8007322 <HAL_RCC_GetSysClockFreq+0x36>
 800731c:	2b08      	cmp	r3, #8
 800731e:	d003      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x3c>
 8007320:	e043      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007322:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007324:	613b      	str	r3, [r7, #16]
      break;
 8007326:	e043      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0c9b      	lsrs	r3, r3, #18
 800732c:	220f      	movs	r2, #15
 800732e:	4013      	ands	r3, r2
 8007330:	4a24      	ldr	r2, [pc, #144]	; (80073c4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007336:	4b21      	ldr	r3, [pc, #132]	; (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	220f      	movs	r2, #15
 800733c:	4013      	ands	r3, r2
 800733e:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8007340:	5cd3      	ldrb	r3, [r2, r3]
 8007342:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	23c0      	movs	r3, #192	; 0xc0
 8007348:	025b      	lsls	r3, r3, #9
 800734a:	401a      	ands	r2, r3
 800734c:	2380      	movs	r3, #128	; 0x80
 800734e:	025b      	lsls	r3, r3, #9
 8007350:	429a      	cmp	r2, r3
 8007352:	d109      	bne.n	8007368 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	481a      	ldr	r0, [pc, #104]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007358:	f7f8 fee6 	bl	8000128 <__udivsi3>
 800735c:	0003      	movs	r3, r0
 800735e:	001a      	movs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4353      	muls	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e01a      	b.n	800739e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	23c0      	movs	r3, #192	; 0xc0
 800736c:	025b      	lsls	r3, r3, #9
 800736e:	401a      	ands	r2, r3
 8007370:	23c0      	movs	r3, #192	; 0xc0
 8007372:	025b      	lsls	r3, r3, #9
 8007374:	429a      	cmp	r2, r3
 8007376:	d109      	bne.n	800738c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	4814      	ldr	r0, [pc, #80]	; (80073cc <HAL_RCC_GetSysClockFreq+0xe0>)
 800737c:	f7f8 fed4 	bl	8000128 <__udivsi3>
 8007380:	0003      	movs	r3, r0
 8007382:	001a      	movs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4353      	muls	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e008      	b.n	800739e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	480c      	ldr	r0, [pc, #48]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007390:	f7f8 feca 	bl	8000128 <__udivsi3>
 8007394:	0003      	movs	r3, r0
 8007396:	001a      	movs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4353      	muls	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	613b      	str	r3, [r7, #16]
      break;
 80073a2:	e005      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80073a4:	4b09      	ldr	r3, [pc, #36]	; (80073cc <HAL_RCC_GetSysClockFreq+0xe0>)
 80073a6:	613b      	str	r3, [r7, #16]
      break;
 80073a8:	e002      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073ac:	613b      	str	r3, [r7, #16]
      break;
 80073ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80073b0:	693b      	ldr	r3, [r7, #16]
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b006      	add	sp, #24
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	40021000 	.word	0x40021000
 80073c0:	007a1200 	.word	0x007a1200
 80073c4:	08009e34 	.word	0x08009e34
 80073c8:	08009e44 	.word	0x08009e44
 80073cc:	02dc6c00 	.word	0x02dc6c00

080073d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80073d6:	681b      	ldr	r3, [r3, #0]
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	20000000 	.word	0x20000000

080073e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80073e8:	f7ff fff2 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 80073ec:	0001      	movs	r1, r0
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	2207      	movs	r2, #7
 80073f6:	4013      	ands	r3, r2
 80073f8:	4a04      	ldr	r2, [pc, #16]	; (800740c <HAL_RCC_GetPCLK1Freq+0x28>)
 80073fa:	5cd3      	ldrb	r3, [r2, r3]
 80073fc:	40d9      	lsrs	r1, r3
 80073fe:	000b      	movs	r3, r1
}    
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	40021000 	.word	0x40021000
 800740c:	08009e2c 	.word	0x08009e2c

08007410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	025b      	lsls	r3, r3, #9
 8007428:	4013      	ands	r3, r2
 800742a:	d100      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800742c:	e08e      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800742e:	2017      	movs	r0, #23
 8007430:	183b      	adds	r3, r7, r0
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007436:	4b6e      	ldr	r3, [pc, #440]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	055b      	lsls	r3, r3, #21
 800743e:	4013      	ands	r3, r2
 8007440:	d110      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	4b6b      	ldr	r3, [pc, #428]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	4b6a      	ldr	r3, [pc, #424]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	0549      	lsls	r1, r1, #21
 800744c:	430a      	orrs	r2, r1
 800744e:	61da      	str	r2, [r3, #28]
 8007450:	4b67      	ldr	r3, [pc, #412]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	2380      	movs	r3, #128	; 0x80
 8007456:	055b      	lsls	r3, r3, #21
 8007458:	4013      	ands	r3, r2
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800745e:	183b      	adds	r3, r7, r0
 8007460:	2201      	movs	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007464:	4b63      	ldr	r3, [pc, #396]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	4013      	ands	r3, r2
 800746e:	d11a      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007470:	4b60      	ldr	r3, [pc, #384]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b5f      	ldr	r3, [pc, #380]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	0049      	lsls	r1, r1, #1
 800747a:	430a      	orrs	r2, r1
 800747c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800747e:	f7fe fa69 	bl	8005954 <HAL_GetTick>
 8007482:	0003      	movs	r3, r0
 8007484:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007486:	e008      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007488:	f7fe fa64 	bl	8005954 <HAL_GetTick>
 800748c:	0002      	movs	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b64      	cmp	r3, #100	; 0x64
 8007494:	d901      	bls.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e0a6      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749a:	4b56      	ldr	r3, [pc, #344]	; (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4013      	ands	r3, r2
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074a6:	4b52      	ldr	r3, [pc, #328]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	23c0      	movs	r3, #192	; 0xc0
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4013      	ands	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d034      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	23c0      	movs	r3, #192	; 0xc0
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4013      	ands	r3, r2
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d02c      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074c8:	4b49      	ldr	r3, [pc, #292]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	4a4a      	ldr	r2, [pc, #296]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074d2:	4b47      	ldr	r3, [pc, #284]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074d4:	6a1a      	ldr	r2, [r3, #32]
 80074d6:	4b46      	ldr	r3, [pc, #280]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	0249      	lsls	r1, r1, #9
 80074dc:	430a      	orrs	r2, r1
 80074de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074e0:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	4b42      	ldr	r3, [pc, #264]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074e6:	4945      	ldr	r1, [pc, #276]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80074e8:	400a      	ands	r2, r1
 80074ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074ec:	4b40      	ldr	r3, [pc, #256]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	4013      	ands	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074fa:	f7fe fa2b 	bl	8005954 <HAL_GetTick>
 80074fe:	0003      	movs	r3, r0
 8007500:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007502:	e009      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007504:	f7fe fa26 	bl	8005954 <HAL_GetTick>
 8007508:	0002      	movs	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e067      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007518:	4b35      	ldr	r3, [pc, #212]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	2202      	movs	r2, #2
 800751e:	4013      	ands	r3, r2
 8007520:	d0f0      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007522:	4b33      	ldr	r3, [pc, #204]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4a34      	ldr	r2, [pc, #208]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007528:	4013      	ands	r3, r2
 800752a:	0019      	movs	r1, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007532:	430a      	orrs	r2, r1
 8007534:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007536:	2317      	movs	r3, #23
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d105      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007540:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007546:	492f      	ldr	r1, [pc, #188]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007548:	400a      	ands	r2, r1
 800754a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2201      	movs	r2, #1
 8007552:	4013      	ands	r3, r2
 8007554:	d009      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007556:	4b26      	ldr	r3, [pc, #152]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	2203      	movs	r2, #3
 800755c:	4393      	bics	r3, r2
 800755e:	0019      	movs	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007566:	430a      	orrs	r2, r1
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2202      	movs	r2, #2
 8007570:	4013      	ands	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007574:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800757a:	4013      	ands	r3, r2
 800757c:	0019      	movs	r1, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	4b1b      	ldr	r3, [pc, #108]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007584:	430a      	orrs	r2, r1
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	02db      	lsls	r3, r3, #11
 8007590:	4013      	ands	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007594:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	4a1c      	ldr	r2, [pc, #112]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800759a:	4013      	ands	r3, r2
 800759c:	0019      	movs	r1, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075a4:	430a      	orrs	r2, r1
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2220      	movs	r2, #32
 80075ae:	4013      	ands	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075b2:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	2210      	movs	r2, #16
 80075b8:	4393      	bics	r3, r2
 80075ba:	0019      	movs	r1, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075c2:	430a      	orrs	r2, r1
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	2380      	movs	r3, #128	; 0x80
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4013      	ands	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075d2:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	4393      	bics	r3, r2
 80075da:	0019      	movs	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80075e2:	430a      	orrs	r2, r1
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b006      	add	sp, #24
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	40007000 	.word	0x40007000
 80075f8:	fffffcff 	.word	0xfffffcff
 80075fc:	fffeffff 	.word	0xfffeffff
 8007600:	00001388 	.word	0x00001388
 8007604:	efffffff 	.word	0xefffffff
 8007608:	fffcffff 	.word	0xfffcffff
 800760c:	fff3ffff 	.word	0xfff3ffff

08007610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0a8      	b.n	8007774 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	2382      	movs	r3, #130	; 0x82
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	429a      	cmp	r2, r3
 8007634:	d009      	beq.n	800764a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	61da      	str	r2, [r3, #28]
 800763c:	e005      	b.n	800764a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	225d      	movs	r2, #93	; 0x5d
 8007654:	5c9b      	ldrb	r3, [r3, r2]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	225c      	movs	r2, #92	; 0x5c
 8007660:	2100      	movs	r1, #0
 8007662:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	0018      	movs	r0, r3
 8007668:	f7fd fe58 	bl	800531c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	225d      	movs	r2, #93	; 0x5d
 8007670:	2102      	movs	r1, #2
 8007672:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2140      	movs	r1, #64	; 0x40
 8007680:	438a      	bics	r2, r1
 8007682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	23e0      	movs	r3, #224	; 0xe0
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	429a      	cmp	r2, r3
 800768e:	d902      	bls.n	8007696 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e002      	b.n	800769c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	015b      	lsls	r3, r3, #5
 800769a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	23f0      	movs	r3, #240	; 0xf0
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d008      	beq.n	80076ba <HAL_SPI_Init+0xaa>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	23e0      	movs	r3, #224	; 0xe0
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d002      	beq.n	80076ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	2382      	movs	r3, #130	; 0x82
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	401a      	ands	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	2384      	movs	r3, #132	; 0x84
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	400b      	ands	r3, r1
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2102      	movs	r1, #2
 80076d6:	400b      	ands	r3, r1
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	2101      	movs	r1, #1
 80076e0:	400b      	ands	r3, r1
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6999      	ldr	r1, [r3, #24]
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	400b      	ands	r3, r1
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	2138      	movs	r1, #56	; 0x38
 80076f6:	400b      	ands	r3, r1
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	400b      	ands	r3, r1
 8007702:	431a      	orrs	r2, r3
 8007704:	0011      	movs	r1, r2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800770a:	2380      	movs	r3, #128	; 0x80
 800770c:	019b      	lsls	r3, r3, #6
 800770e:	401a      	ands	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	2204      	movs	r2, #4
 8007720:	401a      	ands	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2110      	movs	r1, #16
 8007728:	400b      	ands	r3, r1
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007730:	2108      	movs	r1, #8
 8007732:	400b      	ands	r3, r1
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68d9      	ldr	r1, [r3, #12]
 800773a:	23f0      	movs	r3, #240	; 0xf0
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	400b      	ands	r3, r1
 8007740:	431a      	orrs	r2, r3
 8007742:	0011      	movs	r1, r2
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	2380      	movs	r3, #128	; 0x80
 8007748:	015b      	lsls	r3, r3, #5
 800774a:	401a      	ands	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69da      	ldr	r2, [r3, #28]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4907      	ldr	r1, [pc, #28]	; (800777c <HAL_SPI_Init+0x16c>)
 8007760:	400a      	ands	r2, r1
 8007762:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	225d      	movs	r2, #93	; 0x5d
 800776e:	2101      	movs	r1, #1
 8007770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	0018      	movs	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	b004      	add	sp, #16
 800777a:	bd80      	pop	{r7, pc}
 800777c:	fffff7ff 	.word	0xfffff7ff

08007780 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	001a      	movs	r2, r3
 800778e:	1cbb      	adds	r3, r7, #2
 8007790:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007792:	2301      	movs	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007796:	2323      	movs	r3, #35	; 0x23
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	225c      	movs	r2, #92	; 0x5c
 80077a2:	5c9b      	ldrb	r3, [r3, r2]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x2c>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e1c4      	b.n	8007b36 <HAL_SPI_TransmitReceive+0x3b6>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	225c      	movs	r2, #92	; 0x5c
 80077b0:	2101      	movs	r1, #1
 80077b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b4:	f7fe f8ce 	bl	8005954 <HAL_GetTick>
 80077b8:	0003      	movs	r3, r0
 80077ba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077bc:	201b      	movs	r0, #27
 80077be:	183b      	adds	r3, r7, r0
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	215d      	movs	r1, #93	; 0x5d
 80077c4:	5c52      	ldrb	r2, [r2, r1]
 80077c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80077ce:	2312      	movs	r3, #18
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	1cba      	adds	r2, r7, #2
 80077d4:	8812      	ldrh	r2, [r2, #0]
 80077d6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077d8:	183b      	adds	r3, r7, r0
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d011      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x84>
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	2382      	movs	r3, #130	; 0x82
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d107      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x7a>
 80077f2:	183b      	adds	r3, r7, r0
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d004      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80077fa:	2323      	movs	r3, #35	; 0x23
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
    goto error;
 8007802:	e191      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x98>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x98>
 8007810:	1cbb      	adds	r3, r7, #2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007818:	2323      	movs	r3, #35	; 0x23
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007820:	e182      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	225d      	movs	r2, #93	; 0x5d
 8007826:	5c9b      	ldrb	r3, [r3, r2]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b04      	cmp	r3, #4
 800782c:	d003      	beq.n	8007836 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	225d      	movs	r2, #93	; 0x5d
 8007832:	2105      	movs	r1, #5
 8007834:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1cba      	adds	r2, r7, #2
 8007846:	2146      	movs	r1, #70	; 0x46
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1cba      	adds	r2, r7, #2
 8007850:	2144      	movs	r1, #68	; 0x44
 8007852:	8812      	ldrh	r2, [r2, #0]
 8007854:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	1cba      	adds	r2, r7, #2
 8007860:	8812      	ldrh	r2, [r2, #0]
 8007862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1cba      	adds	r2, r7, #2
 8007868:	8812      	ldrh	r2, [r2, #0]
 800786a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	23e0      	movs	r3, #224	; 0xe0
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	429a      	cmp	r2, r3
 8007882:	d908      	bls.n	8007896 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	49ac      	ldr	r1, [pc, #688]	; (8007b40 <HAL_SPI_TransmitReceive+0x3c0>)
 8007890:	400a      	ands	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	e008      	b.n	80078a8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2180      	movs	r1, #128	; 0x80
 80078a2:	0149      	lsls	r1, r1, #5
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2240      	movs	r2, #64	; 0x40
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d007      	beq.n	80078c6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2140      	movs	r1, #64	; 0x40
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	23e0      	movs	r3, #224	; 0xe0
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d800      	bhi.n	80078d4 <HAL_SPI_TransmitReceive+0x154>
 80078d2:	e083      	b.n	80079dc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x168>
 80078dc:	2312      	movs	r3, #18
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d000      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x168>
 80078e6:	e06d      	b.n	80079c4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790c:	e05a      	b.n	80079c4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2202      	movs	r2, #2
 8007916:	4013      	ands	r3, r2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d11b      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	2b01      	cmp	r3, #1
 800792a:	d113      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	881a      	ldrh	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2201      	movs	r2, #1
 800795c:	4013      	ands	r3, r2
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11c      	bne.n	800799c <HAL_SPI_TransmitReceive+0x21c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2246      	movs	r2, #70	; 0x46
 8007966:	5a9b      	ldrh	r3, [r3, r2]
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	b292      	uxth	r2, r2
 800797a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	1c9a      	adds	r2, r3, #2
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2246      	movs	r2, #70	; 0x46
 800798a:	5a9b      	ldrh	r3, [r3, r2]
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b299      	uxth	r1, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2246      	movs	r2, #70	; 0x46
 8007996:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800799c:	f7fd ffda 	bl	8005954 <HAL_GetTick>
 80079a0:	0002      	movs	r2, r0
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d80b      	bhi.n	80079c4 <HAL_SPI_TransmitReceive+0x244>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	3301      	adds	r3, #1
 80079b0:	d008      	beq.n	80079c4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80079b2:	2323      	movs	r3, #35	; 0x23
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2203      	movs	r2, #3
 80079b8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	225d      	movs	r2, #93	; 0x5d
 80079be:	2101      	movs	r1, #1
 80079c0:	5499      	strb	r1, [r3, r2]
        goto error;
 80079c2:	e0b1      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d19f      	bne.n	800790e <HAL_SPI_TransmitReceive+0x18e>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2246      	movs	r2, #70	; 0x46
 80079d2:	5a9b      	ldrh	r3, [r3, r2]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d199      	bne.n	800790e <HAL_SPI_TransmitReceive+0x18e>
 80079da:	e089      	b.n	8007af0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x270>
 80079e4:	2312      	movs	r3, #18
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d000      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x270>
 80079ee:	e074      	b.n	8007ada <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a16:	e060      	b.n	8007ada <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d11c      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x2e0>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d017      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x2e0>
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d114      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2201      	movs	r2, #1
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d11e      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x32c>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2246      	movs	r2, #70	; 0x46
 8007a72:	5a9b      	ldrh	r3, [r3, r2]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d018      	beq.n	8007aac <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	001a      	movs	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2246      	movs	r2, #70	; 0x46
 8007a9a:	5a9b      	ldrh	r3, [r3, r2]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2246      	movs	r2, #70	; 0x46
 8007aa6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aac:	f7fd ff52 	bl	8005954 <HAL_GetTick>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d802      	bhi.n	8007ac2 <HAL_SPI_TransmitReceive+0x342>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	3301      	adds	r3, #1
 8007ac0:	d102      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x348>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d108      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007ac8:	2323      	movs	r3, #35	; 0x23
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	2203      	movs	r2, #3
 8007ace:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	225d      	movs	r2, #93	; 0x5d
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	5499      	strb	r1, [r3, r2]
        goto error;
 8007ad8:	e026      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d199      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x298>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2246      	movs	r2, #70	; 0x46
 8007ae8:	5a9b      	ldrh	r3, [r3, r2]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d193      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 f954 	bl	8007da4 <SPI_EndRxTxTransaction>
 8007afc:	1e03      	subs	r3, r0, #0
 8007afe:	d006      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007b00:	2323      	movs	r3, #35	; 0x23
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007b16:	2323      	movs	r3, #35	; 0x23
 8007b18:	18fb      	adds	r3, r7, r3
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e003      	b.n	8007b28 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	225d      	movs	r2, #93	; 0x5d
 8007b24:	2101      	movs	r1, #1
 8007b26:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	225c      	movs	r2, #92	; 0x5c
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b30:	2323      	movs	r3, #35	; 0x23
 8007b32:	18fb      	adds	r3, r7, r3
 8007b34:	781b      	ldrb	r3, [r3, #0]
}
 8007b36:	0018      	movs	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b00a      	add	sp, #40	; 0x28
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	ffffefff 	.word	0xffffefff

08007b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	1dfb      	adds	r3, r7, #7
 8007b52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b54:	f7fd fefe 	bl	8005954 <HAL_GetTick>
 8007b58:	0002      	movs	r2, r0
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b64:	f7fd fef6 	bl	8005954 <HAL_GetTick>
 8007b68:	0003      	movs	r3, r0
 8007b6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b6c:	4b3a      	ldr	r3, [pc, #232]	; (8007c58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	015b      	lsls	r3, r3, #5
 8007b72:	0d1b      	lsrs	r3, r3, #20
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	4353      	muls	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7a:	e058      	b.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	d055      	beq.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b82:	f7fd fee7 	bl	8005954 <HAL_GetTick>
 8007b86:	0002      	movs	r2, r0
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d902      	bls.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d142      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	21e0      	movs	r1, #224	; 0xe0
 8007ba4:	438a      	bics	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	2382      	movs	r3, #130	; 0x82
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d113      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0x98>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d005      	beq.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	2380      	movs	r3, #128	; 0x80
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d107      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2140      	movs	r1, #64	; 0x40
 8007bd8:	438a      	bics	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	019b      	lsls	r3, r3, #6
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d110      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	491a      	ldr	r1, [pc, #104]	; (8007c5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007bf4:	400a      	ands	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2180      	movs	r1, #128	; 0x80
 8007c04:	0189      	lsls	r1, r1, #6
 8007c06:	430a      	orrs	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	225d      	movs	r2, #93	; 0x5d
 8007c0e:	2101      	movs	r1, #1
 8007c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	225c      	movs	r2, #92	; 0x5c
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e017      	b.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	425a      	negs	r2, r3
 8007c3e:	4153      	adcs	r3, r2
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	001a      	movs	r2, r3
 8007c44:	1dfb      	adds	r3, r7, #7
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d197      	bne.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b008      	add	sp, #32
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	ffffdfff 	.word	0xffffdfff

08007c60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c6e:	2317      	movs	r3, #23
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c76:	f7fd fe6d 	bl	8005954 <HAL_GetTick>
 8007c7a:	0002      	movs	r2, r0
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	18d3      	adds	r3, r2, r3
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007c86:	f7fd fe65 	bl	8005954 <HAL_GetTick>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c96:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	0013      	movs	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	00da      	lsls	r2, r3, #3
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	0d1b      	lsrs	r3, r3, #20
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca8:	4353      	muls	r3, r2
 8007caa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cac:	e068      	b.n	8007d80 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	23c0      	movs	r3, #192	; 0xc0
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d10a      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d107      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	2117      	movs	r1, #23
 8007cc6:	187b      	adds	r3, r7, r1
 8007cc8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cca:	187b      	adds	r3, r7, r1
 8007ccc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	d055      	beq.n	8007d80 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd4:	f7fd fe3e 	bl	8005954 <HAL_GetTick>
 8007cd8:	0002      	movs	r2, r0
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d902      	bls.n	8007cea <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d142      	bne.n	8007d70 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	21e0      	movs	r1, #224	; 0xe0
 8007cf6:	438a      	bics	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	2382      	movs	r3, #130	; 0x82
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d113      	bne.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0xce>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	2380      	movs	r3, #128	; 0x80
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d005      	beq.n	8007d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	2380      	movs	r3, #128	; 0x80
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d107      	bne.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2140      	movs	r1, #64	; 0x40
 8007d2a:	438a      	bics	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d110      	bne.n	8007d5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4916      	ldr	r1, [pc, #88]	; (8007da0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007d46:	400a      	ands	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	0189      	lsls	r1, r1, #6
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	225d      	movs	r2, #93	; 0x5d
 8007d60:	2101      	movs	r1, #1
 8007d62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	225c      	movs	r2, #92	; 0x5c
 8007d68:	2100      	movs	r1, #0
 8007d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e010      	b.n	8007d92 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d18e      	bne.n	8007cae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	0018      	movs	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	b00a      	add	sp, #40	; 0x28
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	20000000 	.word	0x20000000
 8007da0:	ffffdfff 	.word	0xffffdfff

08007da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	23c0      	movs	r3, #192	; 0xc0
 8007db4:	0159      	lsls	r1, r3, #5
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	0013      	movs	r3, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f7ff ff4e 	bl	8007c60 <SPI_WaitFifoStateUntilTimeout>
 8007dc4:	1e03      	subs	r3, r0, #0
 8007dc6:	d007      	beq.n	8007dd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dcc:	2220      	movs	r2, #32
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e027      	b.n	8007e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	0013      	movs	r3, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	2180      	movs	r1, #128	; 0x80
 8007de6:	f7ff fead 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007dea:	1e03      	subs	r3, r0, #0
 8007dec:	d007      	beq.n	8007dfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	2220      	movs	r2, #32
 8007df4:	431a      	orrs	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e014      	b.n	8007e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	23c0      	movs	r3, #192	; 0xc0
 8007e02:	00d9      	lsls	r1, r3, #3
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	0013      	movs	r3, r2
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f7ff ff27 	bl	8007c60 <SPI_WaitFifoStateUntilTimeout>
 8007e12:	1e03      	subs	r3, r0, #0
 8007e14:	d007      	beq.n	8007e26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e000      	b.n	8007e28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b004      	add	sp, #16
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e042      	b.n	8007ec8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	223d      	movs	r2, #61	; 0x3d
 8007e46:	5c9b      	ldrb	r3, [r3, r2]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	223c      	movs	r2, #60	; 0x3c
 8007e52:	2100      	movs	r1, #0
 8007e54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fd fbdf 	bl	800561c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	223d      	movs	r2, #61	; 0x3d
 8007e62:	2102      	movs	r1, #2
 8007e64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	0019      	movs	r1, r3
 8007e70:	0010      	movs	r0, r2
 8007e72:	f000 f901 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2246      	movs	r2, #70	; 0x46
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	223e      	movs	r2, #62	; 0x3e
 8007e82:	2101      	movs	r1, #1
 8007e84:	5499      	strb	r1, [r3, r2]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	223f      	movs	r2, #63	; 0x3f
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	5499      	strb	r1, [r3, r2]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	2101      	movs	r1, #1
 8007e94:	5499      	strb	r1, [r3, r2]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2241      	movs	r2, #65	; 0x41
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2242      	movs	r2, #66	; 0x42
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	5499      	strb	r1, [r3, r2]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2243      	movs	r2, #67	; 0x43
 8007eaa:	2101      	movs	r1, #1
 8007eac:	5499      	strb	r1, [r3, r2]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2244      	movs	r2, #68	; 0x44
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	5499      	strb	r1, [r3, r2]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2245      	movs	r2, #69	; 0x45
 8007eba:	2101      	movs	r1, #1
 8007ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	223d      	movs	r2, #61	; 0x3d
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	0018      	movs	r0, r3
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eda:	230f      	movs	r3, #15
 8007edc:	18fb      	adds	r3, r7, r3
 8007ede:	2200      	movs	r2, #0
 8007ee0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	223c      	movs	r2, #60	; 0x3c
 8007ee6:	5c9b      	ldrb	r3, [r3, r2]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIM_ConfigClockSource+0x20>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e0bc      	b.n	800806a <HAL_TIM_ConfigClockSource+0x19a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	223c      	movs	r2, #60	; 0x3c
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	223d      	movs	r2, #61	; 0x3d
 8007efc:	2102      	movs	r1, #2
 8007efe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2277      	movs	r2, #119	; 0x77
 8007f0c:	4393      	bics	r3, r2
 8007f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4a58      	ldr	r2, [pc, #352]	; (8008074 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2280      	movs	r2, #128	; 0x80
 8007f26:	0192      	lsls	r2, r2, #6
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d040      	beq.n	8007fae <HAL_TIM_ConfigClockSource+0xde>
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	0192      	lsls	r2, r2, #6
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d900      	bls.n	8007f36 <HAL_TIM_ConfigClockSource+0x66>
 8007f34:	e088      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f36:	2280      	movs	r2, #128	; 0x80
 8007f38:	0152      	lsls	r2, r2, #5
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d100      	bne.n	8007f40 <HAL_TIM_ConfigClockSource+0x70>
 8007f3e:	e088      	b.n	8008052 <HAL_TIM_ConfigClockSource+0x182>
 8007f40:	2280      	movs	r2, #128	; 0x80
 8007f42:	0152      	lsls	r2, r2, #5
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d900      	bls.n	8007f4a <HAL_TIM_ConfigClockSource+0x7a>
 8007f48:	e07e      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f4a:	2b70      	cmp	r3, #112	; 0x70
 8007f4c:	d018      	beq.n	8007f80 <HAL_TIM_ConfigClockSource+0xb0>
 8007f4e:	d900      	bls.n	8007f52 <HAL_TIM_ConfigClockSource+0x82>
 8007f50:	e07a      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f52:	2b60      	cmp	r3, #96	; 0x60
 8007f54:	d04f      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x126>
 8007f56:	d900      	bls.n	8007f5a <HAL_TIM_ConfigClockSource+0x8a>
 8007f58:	e076      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f5a:	2b50      	cmp	r3, #80	; 0x50
 8007f5c:	d03b      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0x106>
 8007f5e:	d900      	bls.n	8007f62 <HAL_TIM_ConfigClockSource+0x92>
 8007f60:	e072      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d057      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x146>
 8007f66:	d900      	bls.n	8007f6a <HAL_TIM_ConfigClockSource+0x9a>
 8007f68:	e06e      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	d063      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x166>
 8007f6e:	d86b      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d060      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x166>
 8007f74:	d868      	bhi.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d05d      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x166>
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d05b      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x166>
 8007f7e:	e063      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	f000 f96c 	bl	800826c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2277      	movs	r2, #119	; 0x77
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	609a      	str	r2, [r3, #8]
      break;
 8007fac:	e052      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fbe:	f000 f955 	bl	800826c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	01c9      	lsls	r1, r1, #7
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	609a      	str	r2, [r3, #8]
      break;
 8007fd4:	e03e      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	f000 f8c8 	bl	8008178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2150      	movs	r1, #80	; 0x50
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f000 f922 	bl	8008238 <TIM_ITRx_SetConfig>
      break;
 8007ff4:	e02e      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008002:	001a      	movs	r2, r3
 8008004:	f000 f8e6 	bl	80081d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2160      	movs	r1, #96	; 0x60
 800800e:	0018      	movs	r0, r3
 8008010:	f000 f912 	bl	8008238 <TIM_ITRx_SetConfig>
      break;
 8008014:	e01e      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	001a      	movs	r2, r3
 8008024:	f000 f8a8 	bl	8008178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2140      	movs	r1, #64	; 0x40
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f902 	bl	8008238 <TIM_ITRx_SetConfig>
      break;
 8008034:	e00e      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	0019      	movs	r1, r3
 8008040:	0010      	movs	r0, r2
 8008042:	f000 f8f9 	bl	8008238 <TIM_ITRx_SetConfig>
      break;
 8008046:	e005      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008048:	230f      	movs	r3, #15
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
      break;
 8008050:	e000      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008052:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	223d      	movs	r2, #61	; 0x3d
 8008058:	2101      	movs	r1, #1
 800805a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	223c      	movs	r2, #60	; 0x3c
 8008060:	2100      	movs	r1, #0
 8008062:	5499      	strb	r1, [r3, r2]

  return status;
 8008064:	230f      	movs	r3, #15
 8008066:	18fb      	adds	r3, r7, r3
 8008068:	781b      	ldrb	r3, [r3, #0]
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b004      	add	sp, #16
 8008070:	bd80      	pop	{r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	ffff00ff 	.word	0xffff00ff

08008078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a34      	ldr	r2, [pc, #208]	; (800815c <TIM_Base_SetConfig+0xe4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d008      	beq.n	80080a2 <TIM_Base_SetConfig+0x2a>
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	2380      	movs	r3, #128	; 0x80
 8008094:	05db      	lsls	r3, r3, #23
 8008096:	429a      	cmp	r2, r3
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x2a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a30      	ldr	r2, [pc, #192]	; (8008160 <TIM_Base_SetConfig+0xe8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2270      	movs	r2, #112	; 0x70
 80080a6:	4393      	bics	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a29      	ldr	r2, [pc, #164]	; (800815c <TIM_Base_SetConfig+0xe4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d018      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	05db      	lsls	r3, r3, #23
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d013      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a25      	ldr	r2, [pc, #148]	; (8008160 <TIM_Base_SetConfig+0xe8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00f      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a24      	ldr	r2, [pc, #144]	; (8008164 <TIM_Base_SetConfig+0xec>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00b      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <TIM_Base_SetConfig+0xf0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d007      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a22      	ldr	r2, [pc, #136]	; (800816c <TIM_Base_SetConfig+0xf4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_Base_SetConfig+0x76>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a21      	ldr	r2, [pc, #132]	; (8008170 <TIM_Base_SetConfig+0xf8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d108      	bne.n	8008100 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a20      	ldr	r2, [pc, #128]	; (8008174 <TIM_Base_SetConfig+0xfc>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2280      	movs	r2, #128	; 0x80
 8008104:	4393      	bics	r3, r2
 8008106:	001a      	movs	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a0c      	ldr	r2, [pc, #48]	; (800815c <TIM_Base_SetConfig+0xe4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <TIM_Base_SetConfig+0xce>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <TIM_Base_SetConfig+0xf0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_Base_SetConfig+0xce>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a0c      	ldr	r2, [pc, #48]	; (800816c <TIM_Base_SetConfig+0xf4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_Base_SetConfig+0xce>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a0b      	ldr	r2, [pc, #44]	; (8008170 <TIM_Base_SetConfig+0xf8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d103      	bne.n	800814e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	615a      	str	r2, [r3, #20]
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b004      	add	sp, #16
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40000400 	.word	0x40000400
 8008164:	40002000 	.word	0x40002000
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800
 8008174:	fffffcff 	.word	0xfffffcff

08008178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	2201      	movs	r2, #1
 8008190:	4393      	bics	r3, r2
 8008192:	001a      	movs	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	22f0      	movs	r2, #240	; 0xf0
 80081a2:	4393      	bics	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	220a      	movs	r2, #10
 80081b4:	4393      	bics	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b006      	add	sp, #24
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	2210      	movs	r2, #16
 80081e6:	4393      	bics	r3, r2
 80081e8:	001a      	movs	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <TIM_TI2_ConfigInputStage+0x60>)
 80081fe:	4013      	ands	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	031b      	lsls	r3, r3, #12
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	22a0      	movs	r2, #160	; 0xa0
 8008210:	4393      	bics	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	46bd      	mov	sp, r7
 800822e:	b006      	add	sp, #24
 8008230:	bd80      	pop	{r7, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	ffff0fff 	.word	0xffff0fff

08008238 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2270      	movs	r2, #112	; 0x70
 800824c:	4393      	bics	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	2207      	movs	r2, #7
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	609a      	str	r2, [r3, #8]
}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	46bd      	mov	sp, r7
 8008266:	b004      	add	sp, #16
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <TIM_ETR_SetConfig+0x3c>)
 8008284:	4013      	ands	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	021a      	lsls	r2, r3, #8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	431a      	orrs	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4313      	orrs	r3, r2
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	609a      	str	r2, [r3, #8]
}
 80082a0:	46c0      	nop			; (mov r8, r8)
 80082a2:	46bd      	mov	sp, r7
 80082a4:	b006      	add	sp, #24
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	ffff00ff 	.word	0xffff00ff

080082ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	223c      	movs	r2, #60	; 0x3c
 80082ba:	5c9b      	ldrb	r3, [r3, r2]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e047      	b.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	223c      	movs	r2, #60	; 0x3c
 80082c8:	2101      	movs	r1, #1
 80082ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	223d      	movs	r2, #61	; 0x3d
 80082d0:	2102      	movs	r1, #2
 80082d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2270      	movs	r2, #112	; 0x70
 80082e8:	4393      	bics	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00f      	beq.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	2380      	movs	r3, #128	; 0x80
 800830e:	05db      	lsls	r3, r3, #23
 8008310:	429a      	cmp	r2, r3
 8008312:	d009      	beq.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a11      	ldr	r2, [pc, #68]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a10      	ldr	r2, [pc, #64]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d10c      	bne.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	4393      	bics	r3, r2
 800832e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	4313      	orrs	r3, r2
 8008338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	223d      	movs	r2, #61	; 0x3d
 8008346:	2101      	movs	r1, #1
 8008348:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	223c      	movs	r2, #60	; 0x3c
 800834e:	2100      	movs	r1, #0
 8008350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b004      	add	sp, #16
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40000400 	.word	0x40000400
 8008364:	40014000 	.word	0x40014000

08008368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e044      	b.n	8008404 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d107      	bne.n	8008392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2278      	movs	r2, #120	; 0x78
 8008386:	2100      	movs	r1, #0
 8008388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	0018      	movs	r0, r3
 800838e:	f7fd f9af 	bl	80056f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2224      	movs	r2, #36	; 0x24
 8008396:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2101      	movs	r1, #1
 80083a4:	438a      	bics	r2, r1
 80083a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	0018      	movs	r0, r3
 80083ac:	f000 f9b8 	bl	8008720 <UART_SetConfig>
 80083b0:	0003      	movs	r3, r0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e024      	b.n	8008404 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	0018      	movs	r0, r3
 80083c6:	f000 fb93 	bl	8008af0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	490d      	ldr	r1, [pc, #52]	; (800840c <HAL_UART_Init+0xa4>)
 80083d6:	400a      	ands	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	212a      	movs	r1, #42	; 0x2a
 80083e6:	438a      	bics	r2, r1
 80083e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2101      	movs	r1, #1
 80083f6:	430a      	orrs	r2, r1
 80083f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	0018      	movs	r0, r3
 80083fe:	f000 fc2b 	bl	8008c58 <UART_CheckIdleState>
 8008402:	0003      	movs	r3, r0
}
 8008404:	0018      	movs	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	b002      	add	sp, #8
 800840a:	bd80      	pop	{r7, pc}
 800840c:	ffffb7ff 	.word	0xffffb7ff

08008410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	1dbb      	adds	r3, r7, #6
 800841e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008424:	2b20      	cmp	r3, #32
 8008426:	d000      	beq.n	800842a <HAL_UART_Transmit+0x1a>
 8008428:	e08d      	b.n	8008546 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_UART_Transmit+0x28>
 8008430:	1dbb      	adds	r3, r7, #6
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e085      	b.n	8008548 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	015b      	lsls	r3, r3, #5
 8008444:	429a      	cmp	r2, r3
 8008446:	d109      	bne.n	800845c <HAL_UART_Transmit+0x4c>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2201      	movs	r2, #1
 8008454:	4013      	ands	r3, r2
 8008456:	d001      	beq.n	800845c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e075      	b.n	8008548 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2284      	movs	r2, #132	; 0x84
 8008460:	2100      	movs	r1, #0
 8008462:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2221      	movs	r2, #33	; 0x21
 8008468:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800846a:	f7fd fa73 	bl	8005954 <HAL_GetTick>
 800846e:	0003      	movs	r3, r0
 8008470:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1dba      	adds	r2, r7, #6
 8008476:	2150      	movs	r1, #80	; 0x50
 8008478:	8812      	ldrh	r2, [r2, #0]
 800847a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1dba      	adds	r2, r7, #6
 8008480:	2152      	movs	r1, #82	; 0x52
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	2380      	movs	r3, #128	; 0x80
 800848c:	015b      	lsls	r3, r3, #5
 800848e:	429a      	cmp	r2, r3
 8008490:	d108      	bne.n	80084a4 <HAL_UART_Transmit+0x94>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d104      	bne.n	80084a4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	61bb      	str	r3, [r7, #24]
 80084a2:	e003      	b.n	80084ac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084ac:	e030      	b.n	8008510 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	0013      	movs	r3, r2
 80084b8:	2200      	movs	r2, #0
 80084ba:	2180      	movs	r1, #128	; 0x80
 80084bc:	f000 fc74 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 80084c0:	1e03      	subs	r3, r0, #0
 80084c2:	d004      	beq.n	80084ce <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e03c      	b.n	8008548 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	881a      	ldrh	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	05d2      	lsls	r2, r2, #23
 80084de:	0dd2      	lsrs	r2, r2, #23
 80084e0:	b292      	uxth	r2, r2
 80084e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	3302      	adds	r3, #2
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e008      	b.n	80084fe <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	b292      	uxth	r2, r2
 80084f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2252      	movs	r2, #82	; 0x52
 8008502:	5a9b      	ldrh	r3, [r3, r2]
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	b299      	uxth	r1, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2252      	movs	r2, #82	; 0x52
 800850e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2252      	movs	r2, #82	; 0x52
 8008514:	5a9b      	ldrh	r3, [r3, r2]
 8008516:	b29b      	uxth	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1c8      	bne.n	80084ae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	0013      	movs	r3, r2
 8008526:	2200      	movs	r2, #0
 8008528:	2140      	movs	r1, #64	; 0x40
 800852a:	f000 fc3d 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 800852e:	1e03      	subs	r3, r0, #0
 8008530:	d004      	beq.n	800853c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2220      	movs	r2, #32
 8008536:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e005      	b.n	8008548 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2220      	movs	r2, #32
 8008540:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e000      	b.n	8008548 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8008546:	2302      	movs	r3, #2
  }
}
 8008548:	0018      	movs	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	b008      	add	sp, #32
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	; 0x28
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	1dbb      	adds	r3, r7, #6
 800855e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	589b      	ldr	r3, [r3, r2]
 8008566:	2b20      	cmp	r3, #32
 8008568:	d000      	beq.n	800856c <HAL_UART_Receive+0x1c>
 800856a:	e0d1      	b.n	8008710 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_UART_Receive+0x2a>
 8008572:	1dbb      	adds	r3, r7, #6
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e0c9      	b.n	8008712 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	2380      	movs	r3, #128	; 0x80
 8008584:	015b      	lsls	r3, r3, #5
 8008586:	429a      	cmp	r2, r3
 8008588:	d109      	bne.n	800859e <HAL_UART_Receive+0x4e>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2201      	movs	r2, #1
 8008596:	4013      	ands	r3, r2
 8008598:	d001      	beq.n	800859e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0b9      	b.n	8008712 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2284      	movs	r2, #132	; 0x84
 80085a2:	2100      	movs	r1, #0
 80085a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2280      	movs	r2, #128	; 0x80
 80085aa:	2122      	movs	r1, #34	; 0x22
 80085ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085b4:	f7fd f9ce 	bl	8005954 <HAL_GetTick>
 80085b8:	0003      	movs	r3, r0
 80085ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	1dba      	adds	r2, r7, #6
 80085c0:	2158      	movs	r1, #88	; 0x58
 80085c2:	8812      	ldrh	r2, [r2, #0]
 80085c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	1dba      	adds	r2, r7, #6
 80085ca:	215a      	movs	r1, #90	; 0x5a
 80085cc:	8812      	ldrh	r2, [r2, #0]
 80085ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	2380      	movs	r3, #128	; 0x80
 80085d6:	015b      	lsls	r3, r3, #5
 80085d8:	429a      	cmp	r2, r3
 80085da:	d10d      	bne.n	80085f8 <HAL_UART_Receive+0xa8>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d104      	bne.n	80085ee <HAL_UART_Receive+0x9e>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	225c      	movs	r2, #92	; 0x5c
 80085e8:	494c      	ldr	r1, [pc, #304]	; (800871c <HAL_UART_Receive+0x1cc>)
 80085ea:	5299      	strh	r1, [r3, r2]
 80085ec:	e02e      	b.n	800864c <HAL_UART_Receive+0xfc>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	225c      	movs	r2, #92	; 0x5c
 80085f2:	21ff      	movs	r1, #255	; 0xff
 80085f4:	5299      	strh	r1, [r3, r2]
 80085f6:	e029      	b.n	800864c <HAL_UART_Receive+0xfc>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <HAL_UART_Receive+0xcc>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <HAL_UART_Receive+0xc2>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	225c      	movs	r2, #92	; 0x5c
 800860c:	21ff      	movs	r1, #255	; 0xff
 800860e:	5299      	strh	r1, [r3, r2]
 8008610:	e01c      	b.n	800864c <HAL_UART_Receive+0xfc>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	225c      	movs	r2, #92	; 0x5c
 8008616:	217f      	movs	r1, #127	; 0x7f
 8008618:	5299      	strh	r1, [r3, r2]
 800861a:	e017      	b.n	800864c <HAL_UART_Receive+0xfc>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	055b      	lsls	r3, r3, #21
 8008624:	429a      	cmp	r2, r3
 8008626:	d10d      	bne.n	8008644 <HAL_UART_Receive+0xf4>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d104      	bne.n	800863a <HAL_UART_Receive+0xea>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	225c      	movs	r2, #92	; 0x5c
 8008634:	217f      	movs	r1, #127	; 0x7f
 8008636:	5299      	strh	r1, [r3, r2]
 8008638:	e008      	b.n	800864c <HAL_UART_Receive+0xfc>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	225c      	movs	r2, #92	; 0x5c
 800863e:	213f      	movs	r1, #63	; 0x3f
 8008640:	5299      	strh	r1, [r3, r2]
 8008642:	e003      	b.n	800864c <HAL_UART_Receive+0xfc>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	225c      	movs	r2, #92	; 0x5c
 8008648:	2100      	movs	r1, #0
 800864a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800864c:	2312      	movs	r3, #18
 800864e:	18fb      	adds	r3, r7, r3
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	215c      	movs	r1, #92	; 0x5c
 8008654:	5a52      	ldrh	r2, [r2, r1]
 8008656:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	015b      	lsls	r3, r3, #5
 8008660:	429a      	cmp	r2, r3
 8008662:	d108      	bne.n	8008676 <HAL_UART_Receive+0x126>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e003      	b.n	800867e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800867e:	e03b      	b.n	80086f8 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	0013      	movs	r3, r2
 800868a:	2200      	movs	r2, #0
 800868c:	2120      	movs	r1, #32
 800868e:	f000 fb8b 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008692:	1e03      	subs	r3, r0, #0
 8008694:	d005      	beq.n	80086a2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2280      	movs	r2, #128	; 0x80
 800869a:	2120      	movs	r1, #32
 800869c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e037      	b.n	8008712 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10e      	bne.n	80086c6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2212      	movs	r2, #18
 80086b2:	18ba      	adds	r2, r7, r2
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	4013      	ands	r3, r2
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	3302      	adds	r3, #2
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	e00f      	b.n	80086e6 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2212      	movs	r2, #18
 80086d2:	18ba      	adds	r2, r7, r2
 80086d4:	8812      	ldrh	r2, [r2, #0]
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	4013      	ands	r3, r2
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	3301      	adds	r3, #1
 80086e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	225a      	movs	r2, #90	; 0x5a
 80086ea:	5a9b      	ldrh	r3, [r3, r2]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b299      	uxth	r1, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	225a      	movs	r2, #90	; 0x5a
 80086f6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	225a      	movs	r2, #90	; 0x5a
 80086fc:	5a9b      	ldrh	r3, [r3, r2]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1bd      	bne.n	8008680 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2280      	movs	r2, #128	; 0x80
 8008708:	2120      	movs	r1, #32
 800870a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	e000      	b.n	8008712 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
  }
}
 8008712:	0018      	movs	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	b008      	add	sp, #32
 8008718:	bd80      	pop	{r7, pc}
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	000001ff 	.word	0x000001ff

08008720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008728:	231e      	movs	r3, #30
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4abe      	ldr	r2, [pc, #760]	; (8008a48 <UART_SetConfig+0x328>)
 8008750:	4013      	ands	r3, r2
 8008752:	0019      	movs	r1, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	430a      	orrs	r2, r1
 800875c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4ab9      	ldr	r2, [pc, #740]	; (8008a4c <UART_SetConfig+0x32c>)
 8008766:	4013      	ands	r3, r2
 8008768:	0019      	movs	r1, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	4ab0      	ldr	r2, [pc, #704]	; (8008a50 <UART_SetConfig+0x330>)
 800878e:	4013      	ands	r3, r2
 8008790:	0019      	movs	r1, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	430a      	orrs	r2, r1
 800879a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4aac      	ldr	r2, [pc, #688]	; (8008a54 <UART_SetConfig+0x334>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d127      	bne.n	80087f6 <UART_SetConfig+0xd6>
 80087a6:	4bac      	ldr	r3, [pc, #688]	; (8008a58 <UART_SetConfig+0x338>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	2203      	movs	r2, #3
 80087ac:	4013      	ands	r3, r2
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d00d      	beq.n	80087ce <UART_SetConfig+0xae>
 80087b2:	d81b      	bhi.n	80087ec <UART_SetConfig+0xcc>
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d014      	beq.n	80087e2 <UART_SetConfig+0xc2>
 80087b8:	d818      	bhi.n	80087ec <UART_SetConfig+0xcc>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <UART_SetConfig+0xa4>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d00a      	beq.n	80087d8 <UART_SetConfig+0xb8>
 80087c2:	e013      	b.n	80087ec <UART_SetConfig+0xcc>
 80087c4:	231f      	movs	r3, #31
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	e0bd      	b.n	800894a <UART_SetConfig+0x22a>
 80087ce:	231f      	movs	r3, #31
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e0b8      	b.n	800894a <UART_SetConfig+0x22a>
 80087d8:	231f      	movs	r3, #31
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	2204      	movs	r2, #4
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e0b3      	b.n	800894a <UART_SetConfig+0x22a>
 80087e2:	231f      	movs	r3, #31
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	2208      	movs	r2, #8
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e0ae      	b.n	800894a <UART_SetConfig+0x22a>
 80087ec:	231f      	movs	r3, #31
 80087ee:	18fb      	adds	r3, r7, r3
 80087f0:	2210      	movs	r2, #16
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e0a9      	b.n	800894a <UART_SetConfig+0x22a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a98      	ldr	r2, [pc, #608]	; (8008a5c <UART_SetConfig+0x33c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d134      	bne.n	800886a <UART_SetConfig+0x14a>
 8008800:	4b95      	ldr	r3, [pc, #596]	; (8008a58 <UART_SetConfig+0x338>)
 8008802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008804:	23c0      	movs	r3, #192	; 0xc0
 8008806:	029b      	lsls	r3, r3, #10
 8008808:	4013      	ands	r3, r2
 800880a:	22c0      	movs	r2, #192	; 0xc0
 800880c:	0292      	lsls	r2, r2, #10
 800880e:	4293      	cmp	r3, r2
 8008810:	d017      	beq.n	8008842 <UART_SetConfig+0x122>
 8008812:	22c0      	movs	r2, #192	; 0xc0
 8008814:	0292      	lsls	r2, r2, #10
 8008816:	4293      	cmp	r3, r2
 8008818:	d822      	bhi.n	8008860 <UART_SetConfig+0x140>
 800881a:	2280      	movs	r2, #128	; 0x80
 800881c:	0292      	lsls	r2, r2, #10
 800881e:	4293      	cmp	r3, r2
 8008820:	d019      	beq.n	8008856 <UART_SetConfig+0x136>
 8008822:	2280      	movs	r2, #128	; 0x80
 8008824:	0292      	lsls	r2, r2, #10
 8008826:	4293      	cmp	r3, r2
 8008828:	d81a      	bhi.n	8008860 <UART_SetConfig+0x140>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <UART_SetConfig+0x118>
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	0252      	lsls	r2, r2, #9
 8008832:	4293      	cmp	r3, r2
 8008834:	d00a      	beq.n	800884c <UART_SetConfig+0x12c>
 8008836:	e013      	b.n	8008860 <UART_SetConfig+0x140>
 8008838:	231f      	movs	r3, #31
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e083      	b.n	800894a <UART_SetConfig+0x22a>
 8008842:	231f      	movs	r3, #31
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e07e      	b.n	800894a <UART_SetConfig+0x22a>
 800884c:	231f      	movs	r3, #31
 800884e:	18fb      	adds	r3, r7, r3
 8008850:	2204      	movs	r2, #4
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e079      	b.n	800894a <UART_SetConfig+0x22a>
 8008856:	231f      	movs	r3, #31
 8008858:	18fb      	adds	r3, r7, r3
 800885a:	2208      	movs	r2, #8
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	e074      	b.n	800894a <UART_SetConfig+0x22a>
 8008860:	231f      	movs	r3, #31
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	2210      	movs	r2, #16
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e06f      	b.n	800894a <UART_SetConfig+0x22a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a7c      	ldr	r2, [pc, #496]	; (8008a60 <UART_SetConfig+0x340>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d134      	bne.n	80088de <UART_SetConfig+0x1be>
 8008874:	4b78      	ldr	r3, [pc, #480]	; (8008a58 <UART_SetConfig+0x338>)
 8008876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008878:	23c0      	movs	r3, #192	; 0xc0
 800887a:	031b      	lsls	r3, r3, #12
 800887c:	4013      	ands	r3, r2
 800887e:	22c0      	movs	r2, #192	; 0xc0
 8008880:	0312      	lsls	r2, r2, #12
 8008882:	4293      	cmp	r3, r2
 8008884:	d017      	beq.n	80088b6 <UART_SetConfig+0x196>
 8008886:	22c0      	movs	r2, #192	; 0xc0
 8008888:	0312      	lsls	r2, r2, #12
 800888a:	4293      	cmp	r3, r2
 800888c:	d822      	bhi.n	80088d4 <UART_SetConfig+0x1b4>
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	0312      	lsls	r2, r2, #12
 8008892:	4293      	cmp	r3, r2
 8008894:	d019      	beq.n	80088ca <UART_SetConfig+0x1aa>
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	0312      	lsls	r2, r2, #12
 800889a:	4293      	cmp	r3, r2
 800889c:	d81a      	bhi.n	80088d4 <UART_SetConfig+0x1b4>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <UART_SetConfig+0x18c>
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	02d2      	lsls	r2, r2, #11
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00a      	beq.n	80088c0 <UART_SetConfig+0x1a0>
 80088aa:	e013      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088ac:	231f      	movs	r3, #31
 80088ae:	18fb      	adds	r3, r7, r3
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e049      	b.n	800894a <UART_SetConfig+0x22a>
 80088b6:	231f      	movs	r3, #31
 80088b8:	18fb      	adds	r3, r7, r3
 80088ba:	2202      	movs	r2, #2
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	e044      	b.n	800894a <UART_SetConfig+0x22a>
 80088c0:	231f      	movs	r3, #31
 80088c2:	18fb      	adds	r3, r7, r3
 80088c4:	2204      	movs	r2, #4
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e03f      	b.n	800894a <UART_SetConfig+0x22a>
 80088ca:	231f      	movs	r3, #31
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	2208      	movs	r2, #8
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e03a      	b.n	800894a <UART_SetConfig+0x22a>
 80088d4:	231f      	movs	r3, #31
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	2210      	movs	r2, #16
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	e035      	b.n	800894a <UART_SetConfig+0x22a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a60      	ldr	r2, [pc, #384]	; (8008a64 <UART_SetConfig+0x344>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d104      	bne.n	80088f2 <UART_SetConfig+0x1d2>
 80088e8:	231f      	movs	r3, #31
 80088ea:	18fb      	adds	r3, r7, r3
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e02b      	b.n	800894a <UART_SetConfig+0x22a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a5c      	ldr	r2, [pc, #368]	; (8008a68 <UART_SetConfig+0x348>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d104      	bne.n	8008906 <UART_SetConfig+0x1e6>
 80088fc:	231f      	movs	r3, #31
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e021      	b.n	800894a <UART_SetConfig+0x22a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a58      	ldr	r2, [pc, #352]	; (8008a6c <UART_SetConfig+0x34c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d104      	bne.n	800891a <UART_SetConfig+0x1fa>
 8008910:	231f      	movs	r3, #31
 8008912:	18fb      	adds	r3, r7, r3
 8008914:	2200      	movs	r2, #0
 8008916:	701a      	strb	r2, [r3, #0]
 8008918:	e017      	b.n	800894a <UART_SetConfig+0x22a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a54      	ldr	r2, [pc, #336]	; (8008a70 <UART_SetConfig+0x350>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d104      	bne.n	800892e <UART_SetConfig+0x20e>
 8008924:	231f      	movs	r3, #31
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e00d      	b.n	800894a <UART_SetConfig+0x22a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a50      	ldr	r2, [pc, #320]	; (8008a74 <UART_SetConfig+0x354>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d104      	bne.n	8008942 <UART_SetConfig+0x222>
 8008938:	231f      	movs	r3, #31
 800893a:	18fb      	adds	r3, r7, r3
 800893c:	2200      	movs	r2, #0
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	e003      	b.n	800894a <UART_SetConfig+0x22a>
 8008942:	231f      	movs	r3, #31
 8008944:	18fb      	adds	r3, r7, r3
 8008946:	2210      	movs	r2, #16
 8008948:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	2380      	movs	r3, #128	; 0x80
 8008950:	021b      	lsls	r3, r3, #8
 8008952:	429a      	cmp	r2, r3
 8008954:	d15c      	bne.n	8008a10 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8008956:	231f      	movs	r3, #31
 8008958:	18fb      	adds	r3, r7, r3
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b08      	cmp	r3, #8
 800895e:	d015      	beq.n	800898c <UART_SetConfig+0x26c>
 8008960:	dc18      	bgt.n	8008994 <UART_SetConfig+0x274>
 8008962:	2b04      	cmp	r3, #4
 8008964:	d00d      	beq.n	8008982 <UART_SetConfig+0x262>
 8008966:	dc15      	bgt.n	8008994 <UART_SetConfig+0x274>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <UART_SetConfig+0x252>
 800896c:	2b02      	cmp	r3, #2
 800896e:	d005      	beq.n	800897c <UART_SetConfig+0x25c>
 8008970:	e010      	b.n	8008994 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008972:	f7fe fd37 	bl	80073e4 <HAL_RCC_GetPCLK1Freq>
 8008976:	0003      	movs	r3, r0
 8008978:	61bb      	str	r3, [r7, #24]
        break;
 800897a:	e012      	b.n	80089a2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b3e      	ldr	r3, [pc, #248]	; (8008a78 <UART_SetConfig+0x358>)
 800897e:	61bb      	str	r3, [r7, #24]
        break;
 8008980:	e00f      	b.n	80089a2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fe fcb3 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8008986:	0003      	movs	r3, r0
 8008988:	61bb      	str	r3, [r7, #24]
        break;
 800898a:	e00a      	b.n	80089a2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	61bb      	str	r3, [r7, #24]
        break;
 8008992:	e006      	b.n	80089a2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008998:	231e      	movs	r3, #30
 800899a:	18fb      	adds	r3, r7, r3
 800899c:	2201      	movs	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
        break;
 80089a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d100      	bne.n	80089aa <UART_SetConfig+0x28a>
 80089a8:	e095      	b.n	8008ad6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	005a      	lsls	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	085b      	lsrs	r3, r3, #1
 80089b4:	18d2      	adds	r2, r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	0019      	movs	r1, r3
 80089bc:	0010      	movs	r0, r2
 80089be:	f7f7 fbb3 	bl	8000128 <__udivsi3>
 80089c2:	0003      	movs	r3, r0
 80089c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b0f      	cmp	r3, #15
 80089ca:	d91c      	bls.n	8008a06 <UART_SetConfig+0x2e6>
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	2380      	movs	r3, #128	; 0x80
 80089d0:	025b      	lsls	r3, r3, #9
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d217      	bcs.n	8008a06 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	200e      	movs	r0, #14
 80089dc:	183b      	adds	r3, r7, r0
 80089de:	210f      	movs	r1, #15
 80089e0:	438a      	bics	r2, r1
 80089e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2207      	movs	r2, #7
 80089ec:	4013      	ands	r3, r2
 80089ee:	b299      	uxth	r1, r3
 80089f0:	183b      	adds	r3, r7, r0
 80089f2:	183a      	adds	r2, r7, r0
 80089f4:	8812      	ldrh	r2, [r2, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	183a      	adds	r2, r7, r0
 8008a00:	8812      	ldrh	r2, [r2, #0]
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	e067      	b.n	8008ad6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008a06:	231e      	movs	r3, #30
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e062      	b.n	8008ad6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a10:	231f      	movs	r3, #31
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d030      	beq.n	8008a7c <UART_SetConfig+0x35c>
 8008a1a:	dc33      	bgt.n	8008a84 <UART_SetConfig+0x364>
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d00d      	beq.n	8008a3c <UART_SetConfig+0x31c>
 8008a20:	dc30      	bgt.n	8008a84 <UART_SetConfig+0x364>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <UART_SetConfig+0x30c>
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d005      	beq.n	8008a36 <UART_SetConfig+0x316>
 8008a2a:	e02b      	b.n	8008a84 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a2c:	f7fe fcda 	bl	80073e4 <HAL_RCC_GetPCLK1Freq>
 8008a30:	0003      	movs	r3, r0
 8008a32:	61bb      	str	r3, [r7, #24]
        break;
 8008a34:	e02d      	b.n	8008a92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <UART_SetConfig+0x358>)
 8008a38:	61bb      	str	r3, [r7, #24]
        break;
 8008a3a:	e02a      	b.n	8008a92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3c:	f7fe fc56 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8008a40:	0003      	movs	r3, r0
 8008a42:	61bb      	str	r3, [r7, #24]
        break;
 8008a44:	e025      	b.n	8008a92 <UART_SetConfig+0x372>
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	efff69f3 	.word	0xefff69f3
 8008a4c:	ffffcfff 	.word	0xffffcfff
 8008a50:	fffff4ff 	.word	0xfffff4ff
 8008a54:	40013800 	.word	0x40013800
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	40004400 	.word	0x40004400
 8008a60:	40004800 	.word	0x40004800
 8008a64:	40004c00 	.word	0x40004c00
 8008a68:	40005000 	.word	0x40005000
 8008a6c:	40011400 	.word	0x40011400
 8008a70:	40011800 	.word	0x40011800
 8008a74:	40011c00 	.word	0x40011c00
 8008a78:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	61bb      	str	r3, [r7, #24]
        break;
 8008a82:	e006      	b.n	8008a92 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a88:	231e      	movs	r3, #30
 8008a8a:	18fb      	adds	r3, r7, r3
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
        break;
 8008a90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01e      	beq.n	8008ad6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	085a      	lsrs	r2, r3, #1
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	18d2      	adds	r2, r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	0019      	movs	r1, r3
 8008aa8:	0010      	movs	r0, r2
 8008aaa:	f7f7 fb3d 	bl	8000128 <__udivsi3>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b0f      	cmp	r3, #15
 8008ab6:	d90a      	bls.n	8008ace <UART_SetConfig+0x3ae>
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	2380      	movs	r3, #128	; 0x80
 8008abc:	025b      	lsls	r3, r3, #9
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d205      	bcs.n	8008ace <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60da      	str	r2, [r3, #12]
 8008acc:	e003      	b.n	8008ad6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8008ace:	231e      	movs	r3, #30
 8008ad0:	18fb      	adds	r3, r7, r3
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ae2:	231e      	movs	r3, #30
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	781b      	ldrb	r3, [r3, #0]
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b008      	add	sp, #32
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2201      	movs	r2, #1
 8008afe:	4013      	ands	r3, r2
 8008b00:	d00b      	beq.n	8008b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a4a      	ldr	r2, [pc, #296]	; (8008c34 <UART_AdvFeatureConfig+0x144>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	0019      	movs	r1, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2202      	movs	r2, #2
 8008b20:	4013      	ands	r3, r2
 8008b22:	d00b      	beq.n	8008b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	4a43      	ldr	r2, [pc, #268]	; (8008c38 <UART_AdvFeatureConfig+0x148>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	0019      	movs	r1, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2204      	movs	r2, #4
 8008b42:	4013      	ands	r3, r2
 8008b44:	d00b      	beq.n	8008b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	4a3b      	ldr	r2, [pc, #236]	; (8008c3c <UART_AdvFeatureConfig+0x14c>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	0019      	movs	r1, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2208      	movs	r2, #8
 8008b64:	4013      	ands	r3, r2
 8008b66:	d00b      	beq.n	8008b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4a34      	ldr	r2, [pc, #208]	; (8008c40 <UART_AdvFeatureConfig+0x150>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	0019      	movs	r1, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2210      	movs	r2, #16
 8008b86:	4013      	ands	r3, r2
 8008b88:	d00b      	beq.n	8008ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4a2c      	ldr	r2, [pc, #176]	; (8008c44 <UART_AdvFeatureConfig+0x154>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	0019      	movs	r1, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	4013      	ands	r3, r2
 8008baa:	d00b      	beq.n	8008bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	4a25      	ldr	r2, [pc, #148]	; (8008c48 <UART_AdvFeatureConfig+0x158>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2240      	movs	r2, #64	; 0x40
 8008bca:	4013      	ands	r3, r2
 8008bcc:	d01d      	beq.n	8008c0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <UART_AdvFeatureConfig+0x15c>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	0019      	movs	r1, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bea:	2380      	movs	r3, #128	; 0x80
 8008bec:	035b      	lsls	r3, r3, #13
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10b      	bne.n	8008c0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <UART_AdvFeatureConfig+0x160>)
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	0019      	movs	r1, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	2280      	movs	r2, #128	; 0x80
 8008c10:	4013      	ands	r3, r2
 8008c12:	d00b      	beq.n	8008c2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	4a0e      	ldr	r2, [pc, #56]	; (8008c54 <UART_AdvFeatureConfig+0x164>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	0019      	movs	r1, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	605a      	str	r2, [r3, #4]
  }
}
 8008c2c:	46c0      	nop			; (mov r8, r8)
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b002      	add	sp, #8
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	fffdffff 	.word	0xfffdffff
 8008c38:	fffeffff 	.word	0xfffeffff
 8008c3c:	fffbffff 	.word	0xfffbffff
 8008c40:	ffff7fff 	.word	0xffff7fff
 8008c44:	ffffefff 	.word	0xffffefff
 8008c48:	ffffdfff 	.word	0xffffdfff
 8008c4c:	ffefffff 	.word	0xffefffff
 8008c50:	ff9fffff 	.word	0xff9fffff
 8008c54:	fff7ffff 	.word	0xfff7ffff

08008c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b092      	sub	sp, #72	; 0x48
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2284      	movs	r2, #132	; 0x84
 8008c64:	2100      	movs	r1, #0
 8008c66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c68:	f7fc fe74 	bl	8005954 <HAL_GetTick>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2208      	movs	r2, #8
 8008c78:	4013      	ands	r3, r2
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d12c      	bne.n	8008cd8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c80:	2280      	movs	r2, #128	; 0x80
 8008c82:	0391      	lsls	r1, r2, #14
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4a46      	ldr	r2, [pc, #280]	; (8008da0 <UART_CheckIdleState+0x148>)
 8008c88:	9200      	str	r2, [sp, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f000 f88c 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008c90:	1e03      	subs	r3, r0, #0
 8008c92:	d021      	beq.n	8008cd8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c94:	f3ef 8310 	mrs	r3, PRIMASK
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	f383 8810 	msr	PRIMASK, r3
}
 8008ca8:	46c0      	nop			; (mov r8, r8)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	438a      	bics	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	f383 8810 	msr	PRIMASK, r3
}
 8008cc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2278      	movs	r2, #120	; 0x78
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e05f      	b.n	8008d98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d146      	bne.n	8008d74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	2280      	movs	r2, #128	; 0x80
 8008cea:	03d1      	lsls	r1, r2, #15
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <UART_CheckIdleState+0x148>)
 8008cf0:	9200      	str	r2, [sp, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f000 f858 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008cf8:	1e03      	subs	r3, r0, #0
 8008cfa:	d03b      	beq.n	8008d74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
 8008d06:	2301      	movs	r3, #1
 8008d08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f383 8810 	msr	PRIMASK, r3
}
 8008d10:	46c0      	nop			; (mov r8, r8)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4921      	ldr	r1, [pc, #132]	; (8008da4 <UART_CheckIdleState+0x14c>)
 8008d1e:	400a      	ands	r2, r1
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f383 8810 	msr	PRIMASK, r3
}
 8008d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d32:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d36:	633b      	str	r3, [r7, #48]	; 0x30
 8008d38:	2301      	movs	r3, #1
 8008d3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2101      	movs	r1, #1
 8008d50:	438a      	bics	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	f383 8810 	msr	PRIMASK, r3
}
 8008d5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2280      	movs	r2, #128	; 0x80
 8008d64:	2120      	movs	r1, #32
 8008d66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2278      	movs	r2, #120	; 0x78
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e011      	b.n	8008d98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2280      	movs	r2, #128	; 0x80
 8008d7e:	2120      	movs	r1, #32
 8008d80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2278      	movs	r2, #120	; 0x78
 8008d92:	2100      	movs	r1, #0
 8008d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	0018      	movs	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b010      	add	sp, #64	; 0x40
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	01ffffff 	.word	0x01ffffff
 8008da4:	fffffedf 	.word	0xfffffedf

08008da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	1dfb      	adds	r3, r7, #7
 8008db6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	e04b      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	d048      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc0:	f7fc fdc8 	bl	8005954 <HAL_GetTick>
 8008dc4:	0002      	movs	r2, r0
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e04b      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2204      	movs	r2, #4
 8008de2:	4013      	ands	r3, r2
 8008de4:	d035      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	2208      	movs	r2, #8
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d111      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 f83c 	bl	8008e7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2284      	movs	r2, #132	; 0x84
 8008e08:	2108      	movs	r1, #8
 8008e0a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2278      	movs	r2, #120	; 0x78
 8008e10:	2100      	movs	r1, #0
 8008e12:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e02c      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69da      	ldr	r2, [r3, #28]
 8008e1e:	2380      	movs	r3, #128	; 0x80
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	401a      	ands	r2, r3
 8008e24:	2380      	movs	r3, #128	; 0x80
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d112      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	0112      	lsls	r2, r2, #4
 8008e34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f000 f81f 	bl	8008e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2284      	movs	r2, #132	; 0x84
 8008e42:	2120      	movs	r1, #32
 8008e44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2278      	movs	r2, #120	; 0x78
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e00f      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	425a      	negs	r2, r3
 8008e62:	4153      	adcs	r3, r2
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	001a      	movs	r2, r3
 8008e68:	1dfb      	adds	r3, r7, #7
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d0a4      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	0018      	movs	r0, r3
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b004      	add	sp, #16
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08e      	sub	sp, #56	; 0x38
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	617b      	str	r3, [r7, #20]
  return(result);
 8008e8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e8e:	2301      	movs	r3, #1
 8008e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	46c0      	nop			; (mov r8, r8)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4926      	ldr	r1, [pc, #152]	; (8008f40 <UART_EndRxTransfer+0xc4>)
 8008ea6:	400a      	ands	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f383 8810 	msr	PRIMASK, r3
}
 8008eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eba:	623b      	str	r3, [r7, #32]
  return(result);
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	f383 8810 	msr	PRIMASK, r3
}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	438a      	bics	r2, r1
 8008eda:	609a      	str	r2, [r3, #8]
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	f383 8810 	msr	PRIMASK, r3
}
 8008ee6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d118      	bne.n	8008f22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ef6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efa:	2301      	movs	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f383 8810 	msr	PRIMASK, r3
}
 8008f04:	46c0      	nop			; (mov r8, r8)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2110      	movs	r1, #16
 8008f12:	438a      	bics	r2, r1
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2280      	movs	r2, #128	; 0x80
 8008f26:	2120      	movs	r1, #32
 8008f28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b00e      	add	sp, #56	; 0x38
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	fffffedf 	.word	0xfffffedf

08008f44 <_ZdlPvj>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	f000 f942 	bl	80091ce <_ZdlPv>
 8008f4a:	bd10      	pop	{r4, pc}

08008f4c <_Znwj>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	1e04      	subs	r4, r0, #0
 8008f50:	d100      	bne.n	8008f54 <_Znwj+0x8>
 8008f52:	3401      	adds	r4, #1
 8008f54:	0020      	movs	r0, r4
 8008f56:	f000 f955 	bl	8009204 <malloc>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d000      	beq.n	8008f60 <_Znwj+0x14>
 8008f5e:	bd10      	pop	{r4, pc}
 8008f60:	f000 f93a 	bl	80091d8 <_ZSt15get_new_handlerv>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d101      	bne.n	8008f6c <_Znwj+0x20>
 8008f68:	f000 f945 	bl	80091f6 <abort>
 8008f6c:	4780      	blx	r0
 8008f6e:	e7f1      	b.n	8008f54 <_Znwj+0x8>

08008f70 <_ZNSaIcEC1Ev>:
 8008f70:	4770      	bx	lr

08008f72 <_ZNSaIcED1Ev>:
 8008f72:	4770      	bx	lr

08008f74 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d001      	beq.n	8008f7e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0xa>
 8008f7a:	f000 fae8 	bl	800954e <memcpy>
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8008f80:	0013      	movs	r3, r2
 8008f82:	b510      	push	{r4, lr}
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	d002      	beq.n	8008f8e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0xe>
 8008f88:	f000 fa24 	bl	80093d4 <memcmp>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	0018      	movs	r0, r3
 8008f90:	bd10      	pop	{r4, pc}
	...

08008f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008f94:	2080      	movs	r0, #128	; 0x80
 8008f96:	680b      	ldr	r3, [r1, #0]
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	05c0      	lsls	r0, r0, #23
 8008f9c:	4283      	cmp	r3, r0
 8008f9e:	d302      	bcc.n	8008fa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 8008fa0:	480a      	ldr	r0, [pc, #40]	; (8008fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8008fa2:	f000 f925 	bl	80091f0 <_ZSt20__throw_length_errorPKc>
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d905      	bls.n	8008fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008faa:	0052      	lsls	r2, r2, #1
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d202      	bcs.n	8008fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008fb0:	4282      	cmp	r2, r0
 8008fb2:	d205      	bcs.n	8008fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008fb4:	600a      	str	r2, [r1, #0]
 8008fb6:	6808      	ldr	r0, [r1, #0]
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d504      	bpl.n	8008fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 8008fbc:	f000 f912 	bl	80091e4 <_ZSt17__throw_bad_allocv>
 8008fc0:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 8008fc2:	600b      	str	r3, [r1, #0]
 8008fc4:	e7f7      	b.n	8008fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8008fc6:	f7ff ffc1 	bl	8008f4c <_Znwj>
 8008fca:	bd10      	pop	{r4, pc}
 8008fcc:	08009e54 	.word	0x08009e54
 8008fd0:	3fffffff 	.word	0x3fffffff

08008fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008fd4:	0003      	movs	r3, r0
 8008fd6:	6800      	ldr	r0, [r0, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4298      	cmp	r0, r3
 8008fde:	d001      	beq.n	8008fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8008fe0:	f000 f8f5 	bl	80091ce <_ZdlPv>
 8008fe4:	bd10      	pop	{r4, pc}

08008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	2a01      	cmp	r2, #1
 8008fea:	d102      	bne.n	8008ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008fec:	780b      	ldrb	r3, [r1, #0]
 8008fee:	7003      	strb	r3, [r0, #0]
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	f7ff ffbf 	bl	8008f74 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8008ff6:	e7fb      	b.n	8008ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	1a52      	subs	r2, r2, r1
 8008ffc:	f7ff fff3 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009000:	bd10      	pop	{r4, pc}

08009002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009004:	001f      	movs	r7, r3
 8009006:	6843      	ldr	r3, [r0, #4]
 8009008:	b085      	sub	sp, #20
 800900a:	000d      	movs	r5, r1
 800900c:	1889      	adds	r1, r1, r2
 800900e:	9101      	str	r1, [sp, #4]
 8009010:	1a59      	subs	r1, r3, r1
 8009012:	9100      	str	r1, [sp, #0]
 8009014:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009016:	0004      	movs	r4, r0
 8009018:	1a8a      	subs	r2, r1, r2
 800901a:	18d2      	adds	r2, r2, r3
 800901c:	0003      	movs	r3, r0
 800901e:	6801      	ldr	r1, [r0, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	9203      	str	r2, [sp, #12]
 8009024:	220f      	movs	r2, #15
 8009026:	4299      	cmp	r1, r3
 8009028:	d000      	beq.n	800902c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
 800902a:	6882      	ldr	r2, [r0, #8]
 800902c:	0020      	movs	r0, r4
 800902e:	a903      	add	r1, sp, #12
 8009030:	f7ff ffb0 	bl	8008f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009034:	0006      	movs	r6, r0
 8009036:	2d00      	cmp	r5, #0
 8009038:	d003      	beq.n	8009042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
 800903a:	002a      	movs	r2, r5
 800903c:	6821      	ldr	r1, [r4, #0]
 800903e:	f7ff ffd2 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009042:	2f00      	cmp	r7, #0
 8009044:	d007      	beq.n	8009056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 8009046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x54>
 800904c:	001a      	movs	r2, r3
 800904e:	0039      	movs	r1, r7
 8009050:	1970      	adds	r0, r6, r5
 8009052:	f7ff ffc8 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d008      	beq.n	800906e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6c>
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	6821      	ldr	r1, [r4, #0]
 8009060:	9a00      	ldr	r2, [sp, #0]
 8009062:	18c9      	adds	r1, r1, r3
 8009064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009066:	18e8      	adds	r0, r5, r3
 8009068:	1830      	adds	r0, r6, r0
 800906a:	f7ff ffbc 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800906e:	0020      	movs	r0, r4
 8009070:	f7ff ffb0 	bl	8008fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	6026      	str	r6, [r4, #0]
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	b005      	add	sp, #20
 800907c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800907e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800907e:	0003      	movs	r3, r0
 8009080:	3308      	adds	r3, #8
 8009082:	6003      	str	r3, [r0, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	6043      	str	r3, [r0, #4]
 8009088:	7203      	strb	r3, [r0, #8]
 800908a:	4770      	bx	lr

0800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800908c:	b510      	push	{r4, lr}
 800908e:	0004      	movs	r4, r0
 8009090:	f7ff ffa0 	bl	8008fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009094:	0020      	movs	r0, r4
 8009096:	bd10      	pop	{r4, pc}

08009098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8009098:	680b      	ldr	r3, [r1, #0]
 800909a:	b570      	push	{r4, r5, r6, lr}
 800909c:	000c      	movs	r4, r1
 800909e:	3108      	adds	r1, #8
 80090a0:	0005      	movs	r5, r0
 80090a2:	6800      	ldr	r0, [r0, #0]
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d111      	bne.n	80090cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80090a8:	42a5      	cmp	r5, r4
 80090aa:	d009      	beq.n	80090c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x28>
 80090ac:	6862      	ldr	r2, [r4, #4]
 80090ae:	2a00      	cmp	r2, #0
 80090b0:	d001      	beq.n	80090b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1e>
 80090b2:	f7ff ff98 	bl	8008fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80090b6:	2100      	movs	r1, #0
 80090b8:	6863      	ldr	r3, [r4, #4]
 80090ba:	682a      	ldr	r2, [r5, #0]
 80090bc:	606b      	str	r3, [r5, #4]
 80090be:	54d1      	strb	r1, [r2, r3]
 80090c0:	2300      	movs	r3, #0
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	0028      	movs	r0, r5
 80090c6:	6063      	str	r3, [r4, #4]
 80090c8:	7013      	strb	r3, [r2, #0]
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	002e      	movs	r6, r5
 80090ce:	3608      	adds	r6, #8
 80090d0:	42b0      	cmp	r0, r6
 80090d2:	d00a      	beq.n	80090ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 80090d4:	68aa      	ldr	r2, [r5, #8]
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	606b      	str	r3, [r5, #4]
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	60ab      	str	r3, [r5, #8]
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d004      	beq.n	80090ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x56>
 80090e4:	6020      	str	r0, [r4, #0]
 80090e6:	60a2      	str	r2, [r4, #8]
 80090e8:	e7ea      	b.n	80090c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x28>
 80090ea:	2000      	movs	r0, #0
 80090ec:	e7f3      	b.n	80090d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3e>
 80090ee:	6021      	str	r1, [r4, #0]
 80090f0:	e7e6      	b.n	80090c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x28>

080090f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80090f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f4:	0002      	movs	r2, r0
 80090f6:	000f      	movs	r7, r1
 80090f8:	6846      	ldr	r6, [r0, #4]
 80090fa:	6801      	ldr	r1, [r0, #0]
 80090fc:	3208      	adds	r2, #8
 80090fe:	0004      	movs	r4, r0
 8009100:	230f      	movs	r3, #15
 8009102:	1c75      	adds	r5, r6, #1
 8009104:	4291      	cmp	r1, r2
 8009106:	d000      	beq.n	800910a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x18>
 8009108:	6883      	ldr	r3, [r0, #8]
 800910a:	429d      	cmp	r5, r3
 800910c:	d907      	bls.n	800911e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 800910e:	2301      	movs	r3, #1
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	0031      	movs	r1, r6
 8009116:	001a      	movs	r2, r3
 8009118:	0020      	movs	r0, r4
 800911a:	f7ff ff72 	bl	8009002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800911e:	2200      	movs	r2, #0
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	559f      	strb	r7, [r3, r6]
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	6065      	str	r5, [r4, #4]
 8009128:	555a      	strb	r2, [r3, r5]
 800912a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800912c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800912c:	b510      	push	{r4, lr}
 800912e:	0004      	movs	r4, r0
 8009130:	f7ff ffdf 	bl	80090f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8009134:	0020      	movs	r0, r4
 8009136:	bd10      	pop	{r4, pc}

08009138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	6845      	ldr	r5, [r0, #4]
 800913c:	0006      	movs	r6, r0
 800913e:	0008      	movs	r0, r1
 8009140:	000f      	movs	r7, r1
 8009142:	f7f6 ffdf 	bl	8000104 <strlen>
 8009146:	002a      	movs	r2, r5
 8009148:	0004      	movs	r4, r0
 800914a:	4285      	cmp	r5, r0
 800914c:	d900      	bls.n	8009150 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x18>
 800914e:	0002      	movs	r2, r0
 8009150:	0039      	movs	r1, r7
 8009152:	6830      	ldr	r0, [r6, #0]
 8009154:	f7ff ff14 	bl	8008f80 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009158:	2800      	cmp	r0, #0
 800915a:	d100      	bne.n	800915e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x26>
 800915c:	1b28      	subs	r0, r5, r4
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009160:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009162:	0004      	movs	r4, r0
 8009164:	000d      	movs	r5, r1
 8009166:	0016      	movs	r6, r2
 8009168:	2900      	cmp	r1, #0
 800916a:	d104      	bne.n	8009176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 800916c:	2a00      	cmp	r2, #0
 800916e:	d002      	beq.n	8009176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8009170:	480c      	ldr	r0, [pc, #48]	; (80091a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009172:	f000 f83a 	bl	80091ea <_ZSt19__throw_logic_errorPKc>
 8009176:	1b73      	subs	r3, r6, r5
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	2b0f      	cmp	r3, #15
 800917c:	d907      	bls.n	800918e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 800917e:	2200      	movs	r2, #0
 8009180:	0020      	movs	r0, r4
 8009182:	a901      	add	r1, sp, #4
 8009184:	f7ff ff06 	bl	8008f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	0032      	movs	r2, r6
 8009190:	0029      	movs	r1, r5
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	f7ff ff30 	bl	8008ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009198:	2100      	movs	r1, #0
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	6063      	str	r3, [r4, #4]
 80091a0:	54d1      	strb	r1, [r2, r3]
 80091a2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80091a4:	08009e6c 	.word	0x08009e6c

080091a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80091a8:	0003      	movs	r3, r0
 80091aa:	3308      	adds	r3, #8
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2201      	movs	r2, #1
 80091b0:	0004      	movs	r4, r0
 80091b2:	1e0d      	subs	r5, r1, #0
 80091b4:	6003      	str	r3, [r0, #0]
 80091b6:	d003      	beq.n	80091c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x18>
 80091b8:	0008      	movs	r0, r1
 80091ba:	f7f6 ffa3 	bl	8000104 <strlen>
 80091be:	182a      	adds	r2, r5, r0
 80091c0:	0029      	movs	r1, r5
 80091c2:	0020      	movs	r0, r4
 80091c4:	2300      	movs	r3, #0
 80091c6:	f7ff ffcb 	bl	8009160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80091ca:	0020      	movs	r0, r4
 80091cc:	bd70      	pop	{r4, r5, r6, pc}

080091ce <_ZdlPv>:
 80091ce:	b510      	push	{r4, lr}
 80091d0:	f000 f822 	bl	8009218 <free>
 80091d4:	bd10      	pop	{r4, pc}
	...

080091d8 <_ZSt15get_new_handlerv>:
 80091d8:	4b01      	ldr	r3, [pc, #4]	; (80091e0 <_ZSt15get_new_handlerv+0x8>)
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	4770      	bx	lr
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	20000208 	.word	0x20000208

080091e4 <_ZSt17__throw_bad_allocv>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	f000 f806 	bl	80091f6 <abort>

080091ea <_ZSt19__throw_logic_errorPKc>:
 80091ea:	b510      	push	{r4, lr}
 80091ec:	f000 f803 	bl	80091f6 <abort>

080091f0 <_ZSt20__throw_length_errorPKc>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	f000 f800 	bl	80091f6 <abort>

080091f6 <abort>:
 80091f6:	2006      	movs	r0, #6
 80091f8:	b510      	push	{r4, lr}
 80091fa:	f000 f93f 	bl	800947c <raise>
 80091fe:	2001      	movs	r0, #1
 8009200:	f7fc f96b 	bl	80054da <_exit>

08009204 <malloc>:
 8009204:	b510      	push	{r4, lr}
 8009206:	4b03      	ldr	r3, [pc, #12]	; (8009214 <malloc+0x10>)
 8009208:	0001      	movs	r1, r0
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	f000 f830 	bl	8009270 <_malloc_r>
 8009210:	bd10      	pop	{r4, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	20000058 	.word	0x20000058

08009218 <free>:
 8009218:	b510      	push	{r4, lr}
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <free+0x10>)
 800921c:	0001      	movs	r1, r0
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	f000 f99e 	bl	8009560 <_free_r>
 8009224:	bd10      	pop	{r4, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	20000058 	.word	0x20000058

0800922c <sbrk_aligned>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4e0f      	ldr	r6, [pc, #60]	; (800926c <sbrk_aligned+0x40>)
 8009230:	000d      	movs	r5, r1
 8009232:	6831      	ldr	r1, [r6, #0]
 8009234:	0004      	movs	r4, r0
 8009236:	2900      	cmp	r1, #0
 8009238:	d102      	bne.n	8009240 <sbrk_aligned+0x14>
 800923a:	f000 f93f 	bl	80094bc <_sbrk_r>
 800923e:	6030      	str	r0, [r6, #0]
 8009240:	0029      	movs	r1, r5
 8009242:	0020      	movs	r0, r4
 8009244:	f000 f93a 	bl	80094bc <_sbrk_r>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d00a      	beq.n	8009262 <sbrk_aligned+0x36>
 800924c:	2303      	movs	r3, #3
 800924e:	1cc5      	adds	r5, r0, #3
 8009250:	439d      	bics	r5, r3
 8009252:	42a8      	cmp	r0, r5
 8009254:	d007      	beq.n	8009266 <sbrk_aligned+0x3a>
 8009256:	1a29      	subs	r1, r5, r0
 8009258:	0020      	movs	r0, r4
 800925a:	f000 f92f 	bl	80094bc <_sbrk_r>
 800925e:	3001      	adds	r0, #1
 8009260:	d101      	bne.n	8009266 <sbrk_aligned+0x3a>
 8009262:	2501      	movs	r5, #1
 8009264:	426d      	negs	r5, r5
 8009266:	0028      	movs	r0, r5
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	20000210 	.word	0x20000210

08009270 <_malloc_r>:
 8009270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009272:	2203      	movs	r2, #3
 8009274:	1ccb      	adds	r3, r1, #3
 8009276:	4393      	bics	r3, r2
 8009278:	3308      	adds	r3, #8
 800927a:	0006      	movs	r6, r0
 800927c:	001f      	movs	r7, r3
 800927e:	2b0c      	cmp	r3, #12
 8009280:	d238      	bcs.n	80092f4 <_malloc_r+0x84>
 8009282:	270c      	movs	r7, #12
 8009284:	42b9      	cmp	r1, r7
 8009286:	d837      	bhi.n	80092f8 <_malloc_r+0x88>
 8009288:	0030      	movs	r0, r6
 800928a:	f000 f873 	bl	8009374 <__malloc_lock>
 800928e:	4b38      	ldr	r3, [pc, #224]	; (8009370 <_malloc_r+0x100>)
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	001c      	movs	r4, r3
 8009296:	2c00      	cmp	r4, #0
 8009298:	d133      	bne.n	8009302 <_malloc_r+0x92>
 800929a:	0039      	movs	r1, r7
 800929c:	0030      	movs	r0, r6
 800929e:	f7ff ffc5 	bl	800922c <sbrk_aligned>
 80092a2:	0004      	movs	r4, r0
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d15e      	bne.n	8009366 <_malloc_r+0xf6>
 80092a8:	9b00      	ldr	r3, [sp, #0]
 80092aa:	681c      	ldr	r4, [r3, #0]
 80092ac:	0025      	movs	r5, r4
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	d14e      	bne.n	8009350 <_malloc_r+0xe0>
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d051      	beq.n	800935a <_malloc_r+0xea>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	0029      	movs	r1, r5
 80092ba:	18e3      	adds	r3, r4, r3
 80092bc:	0030      	movs	r0, r6
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	f000 f8fc 	bl	80094bc <_sbrk_r>
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	4283      	cmp	r3, r0
 80092c8:	d147      	bne.n	800935a <_malloc_r+0xea>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0030      	movs	r0, r6
 80092ce:	1aff      	subs	r7, r7, r3
 80092d0:	0039      	movs	r1, r7
 80092d2:	f7ff ffab 	bl	800922c <sbrk_aligned>
 80092d6:	3001      	adds	r0, #1
 80092d8:	d03f      	beq.n	800935a <_malloc_r+0xea>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	19db      	adds	r3, r3, r7
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	9b00      	ldr	r3, [sp, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d040      	beq.n	800936a <_malloc_r+0xfa>
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	42a2      	cmp	r2, r4
 80092ec:	d133      	bne.n	8009356 <_malloc_r+0xe6>
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	e014      	b.n	800931e <_malloc_r+0xae>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dac5      	bge.n	8009284 <_malloc_r+0x14>
 80092f8:	230c      	movs	r3, #12
 80092fa:	2500      	movs	r5, #0
 80092fc:	6033      	str	r3, [r6, #0]
 80092fe:	0028      	movs	r0, r5
 8009300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009302:	6821      	ldr	r1, [r4, #0]
 8009304:	1bc9      	subs	r1, r1, r7
 8009306:	d420      	bmi.n	800934a <_malloc_r+0xda>
 8009308:	290b      	cmp	r1, #11
 800930a:	d918      	bls.n	800933e <_malloc_r+0xce>
 800930c:	19e2      	adds	r2, r4, r7
 800930e:	6027      	str	r7, [r4, #0]
 8009310:	42a3      	cmp	r3, r4
 8009312:	d112      	bne.n	800933a <_malloc_r+0xca>
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	6011      	str	r1, [r2, #0]
 800931c:	6053      	str	r3, [r2, #4]
 800931e:	0030      	movs	r0, r6
 8009320:	0025      	movs	r5, r4
 8009322:	f000 f82f 	bl	8009384 <__malloc_unlock>
 8009326:	2207      	movs	r2, #7
 8009328:	350b      	adds	r5, #11
 800932a:	1d23      	adds	r3, r4, #4
 800932c:	4395      	bics	r5, r2
 800932e:	1aea      	subs	r2, r5, r3
 8009330:	429d      	cmp	r5, r3
 8009332:	d0e4      	beq.n	80092fe <_malloc_r+0x8e>
 8009334:	1b5b      	subs	r3, r3, r5
 8009336:	50a3      	str	r3, [r4, r2]
 8009338:	e7e1      	b.n	80092fe <_malloc_r+0x8e>
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	e7ec      	b.n	8009318 <_malloc_r+0xa8>
 800933e:	6862      	ldr	r2, [r4, #4]
 8009340:	42a3      	cmp	r3, r4
 8009342:	d1d5      	bne.n	80092f0 <_malloc_r+0x80>
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e7e9      	b.n	800931e <_malloc_r+0xae>
 800934a:	0023      	movs	r3, r4
 800934c:	6864      	ldr	r4, [r4, #4]
 800934e:	e7a2      	b.n	8009296 <_malloc_r+0x26>
 8009350:	002c      	movs	r4, r5
 8009352:	686d      	ldr	r5, [r5, #4]
 8009354:	e7ab      	b.n	80092ae <_malloc_r+0x3e>
 8009356:	0013      	movs	r3, r2
 8009358:	e7c4      	b.n	80092e4 <_malloc_r+0x74>
 800935a:	230c      	movs	r3, #12
 800935c:	0030      	movs	r0, r6
 800935e:	6033      	str	r3, [r6, #0]
 8009360:	f000 f810 	bl	8009384 <__malloc_unlock>
 8009364:	e7cb      	b.n	80092fe <_malloc_r+0x8e>
 8009366:	6027      	str	r7, [r4, #0]
 8009368:	e7d9      	b.n	800931e <_malloc_r+0xae>
 800936a:	605b      	str	r3, [r3, #4]
 800936c:	deff      	udf	#255	; 0xff
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	2000020c 	.word	0x2000020c

08009374 <__malloc_lock>:
 8009374:	b510      	push	{r4, lr}
 8009376:	4802      	ldr	r0, [pc, #8]	; (8009380 <__malloc_lock+0xc>)
 8009378:	f000 f8dc 	bl	8009534 <__retarget_lock_acquire_recursive>
 800937c:	bd10      	pop	{r4, pc}
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	20000350 	.word	0x20000350

08009384 <__malloc_unlock>:
 8009384:	b510      	push	{r4, lr}
 8009386:	4802      	ldr	r0, [pc, #8]	; (8009390 <__malloc_unlock+0xc>)
 8009388:	f000 f8d5 	bl	8009536 <__retarget_lock_release_recursive>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	20000350 	.word	0x20000350

08009394 <siprintf>:
 8009394:	b40e      	push	{r1, r2, r3}
 8009396:	b500      	push	{lr}
 8009398:	490b      	ldr	r1, [pc, #44]	; (80093c8 <siprintf+0x34>)
 800939a:	b09c      	sub	sp, #112	; 0x70
 800939c:	ab1d      	add	r3, sp, #116	; 0x74
 800939e:	9002      	str	r0, [sp, #8]
 80093a0:	9006      	str	r0, [sp, #24]
 80093a2:	9107      	str	r1, [sp, #28]
 80093a4:	9104      	str	r1, [sp, #16]
 80093a6:	4809      	ldr	r0, [pc, #36]	; (80093cc <siprintf+0x38>)
 80093a8:	4909      	ldr	r1, [pc, #36]	; (80093d0 <siprintf+0x3c>)
 80093aa:	cb04      	ldmia	r3!, {r2}
 80093ac:	9105      	str	r1, [sp, #20]
 80093ae:	6800      	ldr	r0, [r0, #0]
 80093b0:	a902      	add	r1, sp, #8
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	f000 f980 	bl	80096b8 <_svfiprintf_r>
 80093b8:	2200      	movs	r2, #0
 80093ba:	9b02      	ldr	r3, [sp, #8]
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	b01c      	add	sp, #112	; 0x70
 80093c0:	bc08      	pop	{r3}
 80093c2:	b003      	add	sp, #12
 80093c4:	4718      	bx	r3
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	7fffffff 	.word	0x7fffffff
 80093cc:	20000058 	.word	0x20000058
 80093d0:	ffff0208 	.word	0xffff0208

080093d4 <memcmp>:
 80093d4:	b530      	push	{r4, r5, lr}
 80093d6:	2400      	movs	r4, #0
 80093d8:	3901      	subs	r1, #1
 80093da:	42a2      	cmp	r2, r4
 80093dc:	d101      	bne.n	80093e2 <memcmp+0xe>
 80093de:	2000      	movs	r0, #0
 80093e0:	e005      	b.n	80093ee <memcmp+0x1a>
 80093e2:	5d03      	ldrb	r3, [r0, r4]
 80093e4:	3401      	adds	r4, #1
 80093e6:	5d0d      	ldrb	r5, [r1, r4]
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	d0f6      	beq.n	80093da <memcmp+0x6>
 80093ec:	1b58      	subs	r0, r3, r5
 80093ee:	bd30      	pop	{r4, r5, pc}

080093f0 <memmove>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4288      	cmp	r0, r1
 80093f4:	d902      	bls.n	80093fc <memmove+0xc>
 80093f6:	188b      	adds	r3, r1, r2
 80093f8:	4298      	cmp	r0, r3
 80093fa:	d303      	bcc.n	8009404 <memmove+0x14>
 80093fc:	2300      	movs	r3, #0
 80093fe:	e007      	b.n	8009410 <memmove+0x20>
 8009400:	5c8b      	ldrb	r3, [r1, r2]
 8009402:	5483      	strb	r3, [r0, r2]
 8009404:	3a01      	subs	r2, #1
 8009406:	d2fb      	bcs.n	8009400 <memmove+0x10>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	5ccc      	ldrb	r4, [r1, r3]
 800940c:	54c4      	strb	r4, [r0, r3]
 800940e:	3301      	adds	r3, #1
 8009410:	429a      	cmp	r2, r3
 8009412:	d1fa      	bne.n	800940a <memmove+0x1a>
 8009414:	e7f8      	b.n	8009408 <memmove+0x18>

08009416 <memset>:
 8009416:	0003      	movs	r3, r0
 8009418:	1882      	adds	r2, r0, r2
 800941a:	4293      	cmp	r3, r2
 800941c:	d100      	bne.n	8009420 <memset+0xa>
 800941e:	4770      	bx	lr
 8009420:	7019      	strb	r1, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	e7f9      	b.n	800941a <memset+0x4>

08009426 <_raise_r>:
 8009426:	b570      	push	{r4, r5, r6, lr}
 8009428:	0004      	movs	r4, r0
 800942a:	000d      	movs	r5, r1
 800942c:	291f      	cmp	r1, #31
 800942e:	d904      	bls.n	800943a <_raise_r+0x14>
 8009430:	2316      	movs	r3, #22
 8009432:	6003      	str	r3, [r0, #0]
 8009434:	2001      	movs	r0, #1
 8009436:	4240      	negs	r0, r0
 8009438:	bd70      	pop	{r4, r5, r6, pc}
 800943a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d004      	beq.n	800944a <_raise_r+0x24>
 8009440:	008a      	lsls	r2, r1, #2
 8009442:	189b      	adds	r3, r3, r2
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	2a00      	cmp	r2, #0
 8009448:	d108      	bne.n	800945c <_raise_r+0x36>
 800944a:	0020      	movs	r0, r4
 800944c:	f000 f832 	bl	80094b4 <_getpid_r>
 8009450:	002a      	movs	r2, r5
 8009452:	0001      	movs	r1, r0
 8009454:	0020      	movs	r0, r4
 8009456:	f000 f81b 	bl	8009490 <_kill_r>
 800945a:	e7ed      	b.n	8009438 <_raise_r+0x12>
 800945c:	2000      	movs	r0, #0
 800945e:	2a01      	cmp	r2, #1
 8009460:	d0ea      	beq.n	8009438 <_raise_r+0x12>
 8009462:	1c51      	adds	r1, r2, #1
 8009464:	d103      	bne.n	800946e <_raise_r+0x48>
 8009466:	2316      	movs	r3, #22
 8009468:	3001      	adds	r0, #1
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	e7e4      	b.n	8009438 <_raise_r+0x12>
 800946e:	2400      	movs	r4, #0
 8009470:	0028      	movs	r0, r5
 8009472:	601c      	str	r4, [r3, #0]
 8009474:	4790      	blx	r2
 8009476:	0020      	movs	r0, r4
 8009478:	e7de      	b.n	8009438 <_raise_r+0x12>
	...

0800947c <raise>:
 800947c:	b510      	push	{r4, lr}
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <raise+0x10>)
 8009480:	0001      	movs	r1, r0
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	f7ff ffcf 	bl	8009426 <_raise_r>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	20000058 	.word	0x20000058

08009490 <_kill_r>:
 8009490:	2300      	movs	r3, #0
 8009492:	b570      	push	{r4, r5, r6, lr}
 8009494:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_kill_r+0x20>)
 8009496:	0004      	movs	r4, r0
 8009498:	0008      	movs	r0, r1
 800949a:	0011      	movs	r1, r2
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	f7fc f80c 	bl	80054ba <_kill>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d103      	bne.n	80094ae <_kill_r+0x1e>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d000      	beq.n	80094ae <_kill_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	2000034c 	.word	0x2000034c

080094b4 <_getpid_r>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	f7fb fffa 	bl	80054ae <_getpid>
 80094ba:	bd10      	pop	{r4, pc}

080094bc <_sbrk_r>:
 80094bc:	2300      	movs	r3, #0
 80094be:	b570      	push	{r4, r5, r6, lr}
 80094c0:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_sbrk_r+0x20>)
 80094c2:	0004      	movs	r4, r0
 80094c4:	0008      	movs	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7fc f814 	bl	80054f4 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d103      	bne.n	80094d8 <_sbrk_r+0x1c>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d000      	beq.n	80094d8 <_sbrk_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd70      	pop	{r4, r5, r6, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	2000034c 	.word	0x2000034c

080094e0 <__errno>:
 80094e0:	4b01      	ldr	r3, [pc, #4]	; (80094e8 <__errno+0x8>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	20000058 	.word	0x20000058

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	2600      	movs	r6, #0
 80094f0:	4c0c      	ldr	r4, [pc, #48]	; (8009524 <__libc_init_array+0x38>)
 80094f2:	4d0d      	ldr	r5, [pc, #52]	; (8009528 <__libc_init_array+0x3c>)
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	2600      	movs	r6, #0
 80094fe:	f000 fb93 	bl	8009c28 <_init>
 8009502:	4c0a      	ldr	r4, [pc, #40]	; (800952c <__libc_init_array+0x40>)
 8009504:	4d0a      	ldr	r5, [pc, #40]	; (8009530 <__libc_init_array+0x44>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	00b3      	lsls	r3, r6, #2
 8009512:	58eb      	ldr	r3, [r5, r3]
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	00b3      	lsls	r3, r6, #2
 800951c:	58eb      	ldr	r3, [r5, r3]
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	08009ecc 	.word	0x08009ecc
 8009528:	08009ecc 	.word	0x08009ecc
 800952c:	08009ed0 	.word	0x08009ed0
 8009530:	08009ecc 	.word	0x08009ecc

08009534 <__retarget_lock_acquire_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_release_recursive>:
 8009536:	4770      	bx	lr

08009538 <memchr>:
 8009538:	b2c9      	uxtb	r1, r1
 800953a:	1882      	adds	r2, r0, r2
 800953c:	4290      	cmp	r0, r2
 800953e:	d101      	bne.n	8009544 <memchr+0xc>
 8009540:	2000      	movs	r0, #0
 8009542:	4770      	bx	lr
 8009544:	7803      	ldrb	r3, [r0, #0]
 8009546:	428b      	cmp	r3, r1
 8009548:	d0fb      	beq.n	8009542 <memchr+0xa>
 800954a:	3001      	adds	r0, #1
 800954c:	e7f6      	b.n	800953c <memchr+0x4>

0800954e <memcpy>:
 800954e:	2300      	movs	r3, #0
 8009550:	b510      	push	{r4, lr}
 8009552:	429a      	cmp	r2, r3
 8009554:	d100      	bne.n	8009558 <memcpy+0xa>
 8009556:	bd10      	pop	{r4, pc}
 8009558:	5ccc      	ldrb	r4, [r1, r3]
 800955a:	54c4      	strb	r4, [r0, r3]
 800955c:	3301      	adds	r3, #1
 800955e:	e7f8      	b.n	8009552 <memcpy+0x4>

08009560 <_free_r>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	0005      	movs	r5, r0
 8009564:	2900      	cmp	r1, #0
 8009566:	d010      	beq.n	800958a <_free_r+0x2a>
 8009568:	1f0c      	subs	r4, r1, #4
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	da00      	bge.n	8009572 <_free_r+0x12>
 8009570:	18e4      	adds	r4, r4, r3
 8009572:	0028      	movs	r0, r5
 8009574:	f7ff fefe 	bl	8009374 <__malloc_lock>
 8009578:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <_free_r+0x90>)
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d105      	bne.n	800958c <_free_r+0x2c>
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	6014      	str	r4, [r2, #0]
 8009584:	0028      	movs	r0, r5
 8009586:	f7ff fefd 	bl	8009384 <__malloc_unlock>
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	42a3      	cmp	r3, r4
 800958e:	d908      	bls.n	80095a2 <_free_r+0x42>
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	1821      	adds	r1, r4, r0
 8009594:	428b      	cmp	r3, r1
 8009596:	d1f3      	bne.n	8009580 <_free_r+0x20>
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	1809      	adds	r1, r1, r0
 800959e:	6021      	str	r1, [r4, #0]
 80095a0:	e7ee      	b.n	8009580 <_free_r+0x20>
 80095a2:	001a      	movs	r2, r3
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <_free_r+0x4e>
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	d9f9      	bls.n	80095a2 <_free_r+0x42>
 80095ae:	6811      	ldr	r1, [r2, #0]
 80095b0:	1850      	adds	r0, r2, r1
 80095b2:	42a0      	cmp	r0, r4
 80095b4:	d10b      	bne.n	80095ce <_free_r+0x6e>
 80095b6:	6820      	ldr	r0, [r4, #0]
 80095b8:	1809      	adds	r1, r1, r0
 80095ba:	1850      	adds	r0, r2, r1
 80095bc:	6011      	str	r1, [r2, #0]
 80095be:	4283      	cmp	r3, r0
 80095c0:	d1e0      	bne.n	8009584 <_free_r+0x24>
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	1841      	adds	r1, r0, r1
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	6053      	str	r3, [r2, #4]
 80095cc:	e7da      	b.n	8009584 <_free_r+0x24>
 80095ce:	42a0      	cmp	r0, r4
 80095d0:	d902      	bls.n	80095d8 <_free_r+0x78>
 80095d2:	230c      	movs	r3, #12
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	e7d5      	b.n	8009584 <_free_r+0x24>
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	1821      	adds	r1, r4, r0
 80095dc:	428b      	cmp	r3, r1
 80095de:	d103      	bne.n	80095e8 <_free_r+0x88>
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	1809      	adds	r1, r1, r0
 80095e6:	6021      	str	r1, [r4, #0]
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	6054      	str	r4, [r2, #4]
 80095ec:	e7ca      	b.n	8009584 <_free_r+0x24>
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	2000020c 	.word	0x2000020c

080095f4 <__ssputs_r>:
 80095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f6:	b085      	sub	sp, #20
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	9203      	str	r2, [sp, #12]
 80095fc:	688e      	ldr	r6, [r1, #8]
 80095fe:	9a01      	ldr	r2, [sp, #4]
 8009600:	0007      	movs	r7, r0
 8009602:	000c      	movs	r4, r1
 8009604:	680b      	ldr	r3, [r1, #0]
 8009606:	4296      	cmp	r6, r2
 8009608:	d831      	bhi.n	800966e <__ssputs_r+0x7a>
 800960a:	898a      	ldrh	r2, [r1, #12]
 800960c:	2190      	movs	r1, #144	; 0x90
 800960e:	00c9      	lsls	r1, r1, #3
 8009610:	420a      	tst	r2, r1
 8009612:	d029      	beq.n	8009668 <__ssputs_r+0x74>
 8009614:	2003      	movs	r0, #3
 8009616:	6921      	ldr	r1, [r4, #16]
 8009618:	1a5b      	subs	r3, r3, r1
 800961a:	9302      	str	r3, [sp, #8]
 800961c:	6963      	ldr	r3, [r4, #20]
 800961e:	4343      	muls	r3, r0
 8009620:	0fdd      	lsrs	r5, r3, #31
 8009622:	18ed      	adds	r5, r5, r3
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	9802      	ldr	r0, [sp, #8]
 8009628:	3301      	adds	r3, #1
 800962a:	181b      	adds	r3, r3, r0
 800962c:	106d      	asrs	r5, r5, #1
 800962e:	42ab      	cmp	r3, r5
 8009630:	d900      	bls.n	8009634 <__ssputs_r+0x40>
 8009632:	001d      	movs	r5, r3
 8009634:	0552      	lsls	r2, r2, #21
 8009636:	d529      	bpl.n	800968c <__ssputs_r+0x98>
 8009638:	0029      	movs	r1, r5
 800963a:	0038      	movs	r0, r7
 800963c:	f7ff fe18 	bl	8009270 <_malloc_r>
 8009640:	1e06      	subs	r6, r0, #0
 8009642:	d02d      	beq.n	80096a0 <__ssputs_r+0xac>
 8009644:	9a02      	ldr	r2, [sp, #8]
 8009646:	6921      	ldr	r1, [r4, #16]
 8009648:	f7ff ff81 	bl	800954e <memcpy>
 800964c:	89a2      	ldrh	r2, [r4, #12]
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <__ssputs_r+0xc0>)
 8009650:	401a      	ands	r2, r3
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	4313      	orrs	r3, r2
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	6126      	str	r6, [r4, #16]
 800965c:	18f6      	adds	r6, r6, r3
 800965e:	6026      	str	r6, [r4, #0]
 8009660:	6165      	str	r5, [r4, #20]
 8009662:	9e01      	ldr	r6, [sp, #4]
 8009664:	1aed      	subs	r5, r5, r3
 8009666:	60a5      	str	r5, [r4, #8]
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	429e      	cmp	r6, r3
 800966c:	d900      	bls.n	8009670 <__ssputs_r+0x7c>
 800966e:	9e01      	ldr	r6, [sp, #4]
 8009670:	0032      	movs	r2, r6
 8009672:	9903      	ldr	r1, [sp, #12]
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	f7ff febb 	bl	80093f0 <memmove>
 800967a:	2000      	movs	r0, #0
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	1b9b      	subs	r3, r3, r6
 8009680:	60a3      	str	r3, [r4, #8]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	199b      	adds	r3, r3, r6
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	b005      	add	sp, #20
 800968a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968c:	002a      	movs	r2, r5
 800968e:	0038      	movs	r0, r7
 8009690:	f000 fa92 	bl	8009bb8 <_realloc_r>
 8009694:	1e06      	subs	r6, r0, #0
 8009696:	d1df      	bne.n	8009658 <__ssputs_r+0x64>
 8009698:	0038      	movs	r0, r7
 800969a:	6921      	ldr	r1, [r4, #16]
 800969c:	f7ff ff60 	bl	8009560 <_free_r>
 80096a0:	230c      	movs	r3, #12
 80096a2:	2001      	movs	r0, #1
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	89a2      	ldrh	r2, [r4, #12]
 80096a8:	3334      	adds	r3, #52	; 0x34
 80096aa:	4313      	orrs	r3, r2
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	4240      	negs	r0, r0
 80096b0:	e7ea      	b.n	8009688 <__ssputs_r+0x94>
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	fffffb7f 	.word	0xfffffb7f

080096b8 <_svfiprintf_r>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	b0a1      	sub	sp, #132	; 0x84
 80096bc:	9003      	str	r0, [sp, #12]
 80096be:	001d      	movs	r5, r3
 80096c0:	898b      	ldrh	r3, [r1, #12]
 80096c2:	000f      	movs	r7, r1
 80096c4:	0016      	movs	r6, r2
 80096c6:	061b      	lsls	r3, r3, #24
 80096c8:	d511      	bpl.n	80096ee <_svfiprintf_r+0x36>
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10e      	bne.n	80096ee <_svfiprintf_r+0x36>
 80096d0:	2140      	movs	r1, #64	; 0x40
 80096d2:	f7ff fdcd 	bl	8009270 <_malloc_r>
 80096d6:	6038      	str	r0, [r7, #0]
 80096d8:	6138      	str	r0, [r7, #16]
 80096da:	2800      	cmp	r0, #0
 80096dc:	d105      	bne.n	80096ea <_svfiprintf_r+0x32>
 80096de:	230c      	movs	r3, #12
 80096e0:	9a03      	ldr	r2, [sp, #12]
 80096e2:	3801      	subs	r0, #1
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	b021      	add	sp, #132	; 0x84
 80096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	2300      	movs	r3, #0
 80096f0:	ac08      	add	r4, sp, #32
 80096f2:	6163      	str	r3, [r4, #20]
 80096f4:	3320      	adds	r3, #32
 80096f6:	7663      	strb	r3, [r4, #25]
 80096f8:	3310      	adds	r3, #16
 80096fa:	76a3      	strb	r3, [r4, #26]
 80096fc:	9507      	str	r5, [sp, #28]
 80096fe:	0035      	movs	r5, r6
 8009700:	782b      	ldrb	r3, [r5, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <_svfiprintf_r+0x52>
 8009706:	2b25      	cmp	r3, #37	; 0x25
 8009708:	d148      	bne.n	800979c <_svfiprintf_r+0xe4>
 800970a:	1bab      	subs	r3, r5, r6
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	42b5      	cmp	r5, r6
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x72>
 8009712:	0032      	movs	r2, r6
 8009714:	0039      	movs	r1, r7
 8009716:	9803      	ldr	r0, [sp, #12]
 8009718:	f7ff ff6c 	bl	80095f4 <__ssputs_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d100      	bne.n	8009722 <_svfiprintf_r+0x6a>
 8009720:	e0af      	b.n	8009882 <_svfiprintf_r+0x1ca>
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	9a05      	ldr	r2, [sp, #20]
 8009726:	189b      	adds	r3, r3, r2
 8009728:	6163      	str	r3, [r4, #20]
 800972a:	782b      	ldrb	r3, [r5, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d100      	bne.n	8009732 <_svfiprintf_r+0x7a>
 8009730:	e0a7      	b.n	8009882 <_svfiprintf_r+0x1ca>
 8009732:	2201      	movs	r2, #1
 8009734:	2300      	movs	r3, #0
 8009736:	4252      	negs	r2, r2
 8009738:	6062      	str	r2, [r4, #4]
 800973a:	a904      	add	r1, sp, #16
 800973c:	3254      	adds	r2, #84	; 0x54
 800973e:	1852      	adds	r2, r2, r1
 8009740:	1c6e      	adds	r6, r5, #1
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	60e3      	str	r3, [r4, #12]
 8009746:	60a3      	str	r3, [r4, #8]
 8009748:	7013      	strb	r3, [r2, #0]
 800974a:	65a3      	str	r3, [r4, #88]	; 0x58
 800974c:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <_svfiprintf_r+0x1ec>)
 800974e:	2205      	movs	r2, #5
 8009750:	0018      	movs	r0, r3
 8009752:	7831      	ldrb	r1, [r6, #0]
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f7ff feef 	bl	8009538 <memchr>
 800975a:	1c75      	adds	r5, r6, #1
 800975c:	2800      	cmp	r0, #0
 800975e:	d11f      	bne.n	80097a0 <_svfiprintf_r+0xe8>
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	06d3      	lsls	r3, r2, #27
 8009764:	d504      	bpl.n	8009770 <_svfiprintf_r+0xb8>
 8009766:	2353      	movs	r3, #83	; 0x53
 8009768:	a904      	add	r1, sp, #16
 800976a:	185b      	adds	r3, r3, r1
 800976c:	2120      	movs	r1, #32
 800976e:	7019      	strb	r1, [r3, #0]
 8009770:	0713      	lsls	r3, r2, #28
 8009772:	d504      	bpl.n	800977e <_svfiprintf_r+0xc6>
 8009774:	2353      	movs	r3, #83	; 0x53
 8009776:	a904      	add	r1, sp, #16
 8009778:	185b      	adds	r3, r3, r1
 800977a:	212b      	movs	r1, #43	; 0x2b
 800977c:	7019      	strb	r1, [r3, #0]
 800977e:	7833      	ldrb	r3, [r6, #0]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d016      	beq.n	80097b2 <_svfiprintf_r+0xfa>
 8009784:	0035      	movs	r5, r6
 8009786:	2100      	movs	r1, #0
 8009788:	200a      	movs	r0, #10
 800978a:	68e3      	ldr	r3, [r4, #12]
 800978c:	782a      	ldrb	r2, [r5, #0]
 800978e:	1c6e      	adds	r6, r5, #1
 8009790:	3a30      	subs	r2, #48	; 0x30
 8009792:	2a09      	cmp	r2, #9
 8009794:	d94e      	bls.n	8009834 <_svfiprintf_r+0x17c>
 8009796:	2900      	cmp	r1, #0
 8009798:	d111      	bne.n	80097be <_svfiprintf_r+0x106>
 800979a:	e017      	b.n	80097cc <_svfiprintf_r+0x114>
 800979c:	3501      	adds	r5, #1
 800979e:	e7af      	b.n	8009700 <_svfiprintf_r+0x48>
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	1ac0      	subs	r0, r0, r3
 80097a6:	2301      	movs	r3, #1
 80097a8:	4083      	lsls	r3, r0
 80097aa:	4313      	orrs	r3, r2
 80097ac:	002e      	movs	r6, r5
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	e7cc      	b.n	800974c <_svfiprintf_r+0x94>
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	1d19      	adds	r1, r3, #4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	9107      	str	r1, [sp, #28]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	db01      	blt.n	80097c2 <_svfiprintf_r+0x10a>
 80097be:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c0:	e004      	b.n	80097cc <_svfiprintf_r+0x114>
 80097c2:	425b      	negs	r3, r3
 80097c4:	60e3      	str	r3, [r4, #12]
 80097c6:	2302      	movs	r3, #2
 80097c8:	4313      	orrs	r3, r2
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	782b      	ldrb	r3, [r5, #0]
 80097ce:	2b2e      	cmp	r3, #46	; 0x2e
 80097d0:	d10a      	bne.n	80097e8 <_svfiprintf_r+0x130>
 80097d2:	786b      	ldrb	r3, [r5, #1]
 80097d4:	2b2a      	cmp	r3, #42	; 0x2a
 80097d6:	d135      	bne.n	8009844 <_svfiprintf_r+0x18c>
 80097d8:	9b07      	ldr	r3, [sp, #28]
 80097da:	3502      	adds	r5, #2
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9207      	str	r2, [sp, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	db2b      	blt.n	800983e <_svfiprintf_r+0x186>
 80097e6:	9309      	str	r3, [sp, #36]	; 0x24
 80097e8:	4e2f      	ldr	r6, [pc, #188]	; (80098a8 <_svfiprintf_r+0x1f0>)
 80097ea:	2203      	movs	r2, #3
 80097ec:	0030      	movs	r0, r6
 80097ee:	7829      	ldrb	r1, [r5, #0]
 80097f0:	f7ff fea2 	bl	8009538 <memchr>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d006      	beq.n	8009806 <_svfiprintf_r+0x14e>
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	1b80      	subs	r0, r0, r6
 80097fc:	4083      	lsls	r3, r0
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	3501      	adds	r5, #1
 8009802:	4313      	orrs	r3, r2
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	7829      	ldrb	r1, [r5, #0]
 8009808:	2206      	movs	r2, #6
 800980a:	4828      	ldr	r0, [pc, #160]	; (80098ac <_svfiprintf_r+0x1f4>)
 800980c:	1c6e      	adds	r6, r5, #1
 800980e:	7621      	strb	r1, [r4, #24]
 8009810:	f7ff fe92 	bl	8009538 <memchr>
 8009814:	2800      	cmp	r0, #0
 8009816:	d03c      	beq.n	8009892 <_svfiprintf_r+0x1da>
 8009818:	4b25      	ldr	r3, [pc, #148]	; (80098b0 <_svfiprintf_r+0x1f8>)
 800981a:	2b00      	cmp	r3, #0
 800981c:	d125      	bne.n	800986a <_svfiprintf_r+0x1b2>
 800981e:	2207      	movs	r2, #7
 8009820:	9b07      	ldr	r3, [sp, #28]
 8009822:	3307      	adds	r3, #7
 8009824:	4393      	bics	r3, r2
 8009826:	3308      	adds	r3, #8
 8009828:	9307      	str	r3, [sp, #28]
 800982a:	6963      	ldr	r3, [r4, #20]
 800982c:	9a04      	ldr	r2, [sp, #16]
 800982e:	189b      	adds	r3, r3, r2
 8009830:	6163      	str	r3, [r4, #20]
 8009832:	e764      	b.n	80096fe <_svfiprintf_r+0x46>
 8009834:	4343      	muls	r3, r0
 8009836:	0035      	movs	r5, r6
 8009838:	2101      	movs	r1, #1
 800983a:	189b      	adds	r3, r3, r2
 800983c:	e7a6      	b.n	800978c <_svfiprintf_r+0xd4>
 800983e:	2301      	movs	r3, #1
 8009840:	425b      	negs	r3, r3
 8009842:	e7d0      	b.n	80097e6 <_svfiprintf_r+0x12e>
 8009844:	2300      	movs	r3, #0
 8009846:	200a      	movs	r0, #10
 8009848:	001a      	movs	r2, r3
 800984a:	3501      	adds	r5, #1
 800984c:	6063      	str	r3, [r4, #4]
 800984e:	7829      	ldrb	r1, [r5, #0]
 8009850:	1c6e      	adds	r6, r5, #1
 8009852:	3930      	subs	r1, #48	; 0x30
 8009854:	2909      	cmp	r1, #9
 8009856:	d903      	bls.n	8009860 <_svfiprintf_r+0x1a8>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0c5      	beq.n	80097e8 <_svfiprintf_r+0x130>
 800985c:	9209      	str	r2, [sp, #36]	; 0x24
 800985e:	e7c3      	b.n	80097e8 <_svfiprintf_r+0x130>
 8009860:	4342      	muls	r2, r0
 8009862:	0035      	movs	r5, r6
 8009864:	2301      	movs	r3, #1
 8009866:	1852      	adds	r2, r2, r1
 8009868:	e7f1      	b.n	800984e <_svfiprintf_r+0x196>
 800986a:	aa07      	add	r2, sp, #28
 800986c:	9200      	str	r2, [sp, #0]
 800986e:	0021      	movs	r1, r4
 8009870:	003a      	movs	r2, r7
 8009872:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <_svfiprintf_r+0x1fc>)
 8009874:	9803      	ldr	r0, [sp, #12]
 8009876:	e000      	b.n	800987a <_svfiprintf_r+0x1c2>
 8009878:	bf00      	nop
 800987a:	9004      	str	r0, [sp, #16]
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	3301      	adds	r3, #1
 8009880:	d1d3      	bne.n	800982a <_svfiprintf_r+0x172>
 8009882:	89bb      	ldrh	r3, [r7, #12]
 8009884:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009886:	065b      	lsls	r3, r3, #25
 8009888:	d400      	bmi.n	800988c <_svfiprintf_r+0x1d4>
 800988a:	e72c      	b.n	80096e6 <_svfiprintf_r+0x2e>
 800988c:	2001      	movs	r0, #1
 800988e:	4240      	negs	r0, r0
 8009890:	e729      	b.n	80096e6 <_svfiprintf_r+0x2e>
 8009892:	aa07      	add	r2, sp, #28
 8009894:	9200      	str	r2, [sp, #0]
 8009896:	0021      	movs	r1, r4
 8009898:	003a      	movs	r2, r7
 800989a:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <_svfiprintf_r+0x1fc>)
 800989c:	9803      	ldr	r0, [sp, #12]
 800989e:	f000 f87b 	bl	8009998 <_printf_i>
 80098a2:	e7ea      	b.n	800987a <_svfiprintf_r+0x1c2>
 80098a4:	08009e96 	.word	0x08009e96
 80098a8:	08009e9c 	.word	0x08009e9c
 80098ac:	08009ea0 	.word	0x08009ea0
 80098b0:	00000000 	.word	0x00000000
 80098b4:	080095f5 	.word	0x080095f5

080098b8 <_printf_common>:
 80098b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ba:	0016      	movs	r6, r2
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	688a      	ldr	r2, [r1, #8]
 80098c0:	690b      	ldr	r3, [r1, #16]
 80098c2:	000c      	movs	r4, r1
 80098c4:	9000      	str	r0, [sp, #0]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	da00      	bge.n	80098cc <_printf_common+0x14>
 80098ca:	0013      	movs	r3, r2
 80098cc:	0022      	movs	r2, r4
 80098ce:	6033      	str	r3, [r6, #0]
 80098d0:	3243      	adds	r2, #67	; 0x43
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	d001      	beq.n	80098dc <_printf_common+0x24>
 80098d8:	3301      	adds	r3, #1
 80098da:	6033      	str	r3, [r6, #0]
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	069b      	lsls	r3, r3, #26
 80098e0:	d502      	bpl.n	80098e8 <_printf_common+0x30>
 80098e2:	6833      	ldr	r3, [r6, #0]
 80098e4:	3302      	adds	r3, #2
 80098e6:	6033      	str	r3, [r6, #0]
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	2306      	movs	r3, #6
 80098ec:	0015      	movs	r5, r2
 80098ee:	401d      	ands	r5, r3
 80098f0:	421a      	tst	r2, r3
 80098f2:	d027      	beq.n	8009944 <_printf_common+0x8c>
 80098f4:	0023      	movs	r3, r4
 80098f6:	3343      	adds	r3, #67	; 0x43
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	1e5a      	subs	r2, r3, #1
 80098fc:	4193      	sbcs	r3, r2
 80098fe:	6822      	ldr	r2, [r4, #0]
 8009900:	0692      	lsls	r2, r2, #26
 8009902:	d430      	bmi.n	8009966 <_printf_common+0xae>
 8009904:	0022      	movs	r2, r4
 8009906:	9901      	ldr	r1, [sp, #4]
 8009908:	9800      	ldr	r0, [sp, #0]
 800990a:	9d08      	ldr	r5, [sp, #32]
 800990c:	3243      	adds	r2, #67	; 0x43
 800990e:	47a8      	blx	r5
 8009910:	3001      	adds	r0, #1
 8009912:	d025      	beq.n	8009960 <_printf_common+0xa8>
 8009914:	2206      	movs	r2, #6
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	2500      	movs	r5, #0
 800991a:	4013      	ands	r3, r2
 800991c:	2b04      	cmp	r3, #4
 800991e:	d105      	bne.n	800992c <_printf_common+0x74>
 8009920:	6833      	ldr	r3, [r6, #0]
 8009922:	68e5      	ldr	r5, [r4, #12]
 8009924:	1aed      	subs	r5, r5, r3
 8009926:	43eb      	mvns	r3, r5
 8009928:	17db      	asrs	r3, r3, #31
 800992a:	401d      	ands	r5, r3
 800992c:	68a3      	ldr	r3, [r4, #8]
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	4293      	cmp	r3, r2
 8009932:	dd01      	ble.n	8009938 <_printf_common+0x80>
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	18ed      	adds	r5, r5, r3
 8009938:	2600      	movs	r6, #0
 800993a:	42b5      	cmp	r5, r6
 800993c:	d120      	bne.n	8009980 <_printf_common+0xc8>
 800993e:	2000      	movs	r0, #0
 8009940:	e010      	b.n	8009964 <_printf_common+0xac>
 8009942:	3501      	adds	r5, #1
 8009944:	68e3      	ldr	r3, [r4, #12]
 8009946:	6832      	ldr	r2, [r6, #0]
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	42ab      	cmp	r3, r5
 800994c:	ddd2      	ble.n	80098f4 <_printf_common+0x3c>
 800994e:	0022      	movs	r2, r4
 8009950:	2301      	movs	r3, #1
 8009952:	9901      	ldr	r1, [sp, #4]
 8009954:	9800      	ldr	r0, [sp, #0]
 8009956:	9f08      	ldr	r7, [sp, #32]
 8009958:	3219      	adds	r2, #25
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	d1f0      	bne.n	8009942 <_printf_common+0x8a>
 8009960:	2001      	movs	r0, #1
 8009962:	4240      	negs	r0, r0
 8009964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009966:	2030      	movs	r0, #48	; 0x30
 8009968:	18e1      	adds	r1, r4, r3
 800996a:	3143      	adds	r1, #67	; 0x43
 800996c:	7008      	strb	r0, [r1, #0]
 800996e:	0021      	movs	r1, r4
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	3145      	adds	r1, #69	; 0x45
 8009974:	7809      	ldrb	r1, [r1, #0]
 8009976:	18a2      	adds	r2, r4, r2
 8009978:	3243      	adds	r2, #67	; 0x43
 800997a:	3302      	adds	r3, #2
 800997c:	7011      	strb	r1, [r2, #0]
 800997e:	e7c1      	b.n	8009904 <_printf_common+0x4c>
 8009980:	0022      	movs	r2, r4
 8009982:	2301      	movs	r3, #1
 8009984:	9901      	ldr	r1, [sp, #4]
 8009986:	9800      	ldr	r0, [sp, #0]
 8009988:	9f08      	ldr	r7, [sp, #32]
 800998a:	321a      	adds	r2, #26
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	d0e6      	beq.n	8009960 <_printf_common+0xa8>
 8009992:	3601      	adds	r6, #1
 8009994:	e7d1      	b.n	800993a <_printf_common+0x82>
	...

08009998 <_printf_i>:
 8009998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800999a:	b08b      	sub	sp, #44	; 0x2c
 800999c:	9206      	str	r2, [sp, #24]
 800999e:	000a      	movs	r2, r1
 80099a0:	3243      	adds	r2, #67	; 0x43
 80099a2:	9307      	str	r3, [sp, #28]
 80099a4:	9005      	str	r0, [sp, #20]
 80099a6:	9204      	str	r2, [sp, #16]
 80099a8:	7e0a      	ldrb	r2, [r1, #24]
 80099aa:	000c      	movs	r4, r1
 80099ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ae:	2a78      	cmp	r2, #120	; 0x78
 80099b0:	d809      	bhi.n	80099c6 <_printf_i+0x2e>
 80099b2:	2a62      	cmp	r2, #98	; 0x62
 80099b4:	d80b      	bhi.n	80099ce <_printf_i+0x36>
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	d100      	bne.n	80099bc <_printf_i+0x24>
 80099ba:	e0be      	b.n	8009b3a <_printf_i+0x1a2>
 80099bc:	497c      	ldr	r1, [pc, #496]	; (8009bb0 <_printf_i+0x218>)
 80099be:	9103      	str	r1, [sp, #12]
 80099c0:	2a58      	cmp	r2, #88	; 0x58
 80099c2:	d100      	bne.n	80099c6 <_printf_i+0x2e>
 80099c4:	e093      	b.n	8009aee <_printf_i+0x156>
 80099c6:	0026      	movs	r6, r4
 80099c8:	3642      	adds	r6, #66	; 0x42
 80099ca:	7032      	strb	r2, [r6, #0]
 80099cc:	e022      	b.n	8009a14 <_printf_i+0x7c>
 80099ce:	0010      	movs	r0, r2
 80099d0:	3863      	subs	r0, #99	; 0x63
 80099d2:	2815      	cmp	r0, #21
 80099d4:	d8f7      	bhi.n	80099c6 <_printf_i+0x2e>
 80099d6:	f7f6 fb9d 	bl	8000114 <__gnu_thumb1_case_shi>
 80099da:	0016      	.short	0x0016
 80099dc:	fff6001f 	.word	0xfff6001f
 80099e0:	fff6fff6 	.word	0xfff6fff6
 80099e4:	001ffff6 	.word	0x001ffff6
 80099e8:	fff6fff6 	.word	0xfff6fff6
 80099ec:	fff6fff6 	.word	0xfff6fff6
 80099f0:	003600a3 	.word	0x003600a3
 80099f4:	fff60083 	.word	0xfff60083
 80099f8:	00b4fff6 	.word	0x00b4fff6
 80099fc:	0036fff6 	.word	0x0036fff6
 8009a00:	fff6fff6 	.word	0xfff6fff6
 8009a04:	0087      	.short	0x0087
 8009a06:	0026      	movs	r6, r4
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	3642      	adds	r6, #66	; 0x42
 8009a0c:	1d11      	adds	r1, r2, #4
 8009a0e:	6019      	str	r1, [r3, #0]
 8009a10:	6813      	ldr	r3, [r2, #0]
 8009a12:	7033      	strb	r3, [r6, #0]
 8009a14:	2301      	movs	r3, #1
 8009a16:	e0a2      	b.n	8009b5e <_printf_i+0x1c6>
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	6809      	ldr	r1, [r1, #0]
 8009a1c:	1d02      	adds	r2, r0, #4
 8009a1e:	060d      	lsls	r5, r1, #24
 8009a20:	d50b      	bpl.n	8009a3a <_printf_i+0xa2>
 8009a22:	6805      	ldr	r5, [r0, #0]
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	da03      	bge.n	8009a32 <_printf_i+0x9a>
 8009a2a:	232d      	movs	r3, #45	; 0x2d
 8009a2c:	9a04      	ldr	r2, [sp, #16]
 8009a2e:	426d      	negs	r5, r5
 8009a30:	7013      	strb	r3, [r2, #0]
 8009a32:	4b5f      	ldr	r3, [pc, #380]	; (8009bb0 <_printf_i+0x218>)
 8009a34:	270a      	movs	r7, #10
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	e01b      	b.n	8009a72 <_printf_i+0xda>
 8009a3a:	6805      	ldr	r5, [r0, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	0649      	lsls	r1, r1, #25
 8009a40:	d5f1      	bpl.n	8009a26 <_printf_i+0x8e>
 8009a42:	b22d      	sxth	r5, r5
 8009a44:	e7ef      	b.n	8009a26 <_printf_i+0x8e>
 8009a46:	680d      	ldr	r5, [r1, #0]
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	1d08      	adds	r0, r1, #4
 8009a4c:	6018      	str	r0, [r3, #0]
 8009a4e:	062e      	lsls	r6, r5, #24
 8009a50:	d501      	bpl.n	8009a56 <_printf_i+0xbe>
 8009a52:	680d      	ldr	r5, [r1, #0]
 8009a54:	e003      	b.n	8009a5e <_printf_i+0xc6>
 8009a56:	066d      	lsls	r5, r5, #25
 8009a58:	d5fb      	bpl.n	8009a52 <_printf_i+0xba>
 8009a5a:	680d      	ldr	r5, [r1, #0]
 8009a5c:	b2ad      	uxth	r5, r5
 8009a5e:	4b54      	ldr	r3, [pc, #336]	; (8009bb0 <_printf_i+0x218>)
 8009a60:	2708      	movs	r7, #8
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	2a6f      	cmp	r2, #111	; 0x6f
 8009a66:	d000      	beq.n	8009a6a <_printf_i+0xd2>
 8009a68:	3702      	adds	r7, #2
 8009a6a:	0023      	movs	r3, r4
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	3343      	adds	r3, #67	; 0x43
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	db03      	blt.n	8009a82 <_printf_i+0xea>
 8009a7a:	2104      	movs	r1, #4
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	438a      	bics	r2, r1
 8009a80:	6022      	str	r2, [r4, #0]
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	d102      	bne.n	8009a8c <_printf_i+0xf4>
 8009a86:	9e04      	ldr	r6, [sp, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00c      	beq.n	8009aa6 <_printf_i+0x10e>
 8009a8c:	9e04      	ldr	r6, [sp, #16]
 8009a8e:	0028      	movs	r0, r5
 8009a90:	0039      	movs	r1, r7
 8009a92:	f7f6 fbcf 	bl	8000234 <__aeabi_uidivmod>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	3e01      	subs	r6, #1
 8009a9a:	5c5b      	ldrb	r3, [r3, r1]
 8009a9c:	7033      	strb	r3, [r6, #0]
 8009a9e:	002b      	movs	r3, r5
 8009aa0:	0005      	movs	r5, r0
 8009aa2:	429f      	cmp	r7, r3
 8009aa4:	d9f3      	bls.n	8009a8e <_printf_i+0xf6>
 8009aa6:	2f08      	cmp	r7, #8
 8009aa8:	d109      	bne.n	8009abe <_printf_i+0x126>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	07db      	lsls	r3, r3, #31
 8009aae:	d506      	bpl.n	8009abe <_printf_i+0x126>
 8009ab0:	6862      	ldr	r2, [r4, #4]
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	dc02      	bgt.n	8009abe <_printf_i+0x126>
 8009ab8:	2330      	movs	r3, #48	; 0x30
 8009aba:	3e01      	subs	r6, #1
 8009abc:	7033      	strb	r3, [r6, #0]
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	1b9b      	subs	r3, r3, r6
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	0021      	movs	r1, r4
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	9805      	ldr	r0, [sp, #20]
 8009acc:	9b06      	ldr	r3, [sp, #24]
 8009ace:	aa09      	add	r2, sp, #36	; 0x24
 8009ad0:	f7ff fef2 	bl	80098b8 <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d147      	bne.n	8009b68 <_printf_i+0x1d0>
 8009ad8:	2001      	movs	r0, #1
 8009ada:	4240      	negs	r0, r0
 8009adc:	b00b      	add	sp, #44	; 0x2c
 8009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	6809      	ldr	r1, [r1, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	2278      	movs	r2, #120	; 0x78
 8009aea:	4932      	ldr	r1, [pc, #200]	; (8009bb4 <_printf_i+0x21c>)
 8009aec:	9103      	str	r1, [sp, #12]
 8009aee:	0021      	movs	r1, r4
 8009af0:	3145      	adds	r1, #69	; 0x45
 8009af2:	700a      	strb	r2, [r1, #0]
 8009af4:	6819      	ldr	r1, [r3, #0]
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	c920      	ldmia	r1!, {r5}
 8009afa:	0610      	lsls	r0, r2, #24
 8009afc:	d402      	bmi.n	8009b04 <_printf_i+0x16c>
 8009afe:	0650      	lsls	r0, r2, #25
 8009b00:	d500      	bpl.n	8009b04 <_printf_i+0x16c>
 8009b02:	b2ad      	uxth	r5, r5
 8009b04:	6019      	str	r1, [r3, #0]
 8009b06:	07d3      	lsls	r3, r2, #31
 8009b08:	d502      	bpl.n	8009b10 <_printf_i+0x178>
 8009b0a:	2320      	movs	r3, #32
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	2710      	movs	r7, #16
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	d1a9      	bne.n	8009a6a <_printf_i+0xd2>
 8009b16:	2220      	movs	r2, #32
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	4393      	bics	r3, r2
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	e7a4      	b.n	8009a6a <_printf_i+0xd2>
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	680d      	ldr	r5, [r1, #0]
 8009b24:	1d10      	adds	r0, r2, #4
 8009b26:	6949      	ldr	r1, [r1, #20]
 8009b28:	6018      	str	r0, [r3, #0]
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	062e      	lsls	r6, r5, #24
 8009b2e:	d501      	bpl.n	8009b34 <_printf_i+0x19c>
 8009b30:	6019      	str	r1, [r3, #0]
 8009b32:	e002      	b.n	8009b3a <_printf_i+0x1a2>
 8009b34:	066d      	lsls	r5, r5, #25
 8009b36:	d5fb      	bpl.n	8009b30 <_printf_i+0x198>
 8009b38:	8019      	strh	r1, [r3, #0]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9e04      	ldr	r6, [sp, #16]
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	e7c0      	b.n	8009ac4 <_printf_i+0x12c>
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	1d11      	adds	r1, r2, #4
 8009b46:	6019      	str	r1, [r3, #0]
 8009b48:	6816      	ldr	r6, [r2, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	0030      	movs	r0, r6
 8009b4e:	6862      	ldr	r2, [r4, #4]
 8009b50:	f7ff fcf2 	bl	8009538 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d001      	beq.n	8009b5c <_printf_i+0x1c4>
 8009b58:	1b80      	subs	r0, r0, r6
 8009b5a:	6060      	str	r0, [r4, #4]
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	2300      	movs	r3, #0
 8009b62:	9a04      	ldr	r2, [sp, #16]
 8009b64:	7013      	strb	r3, [r2, #0]
 8009b66:	e7ad      	b.n	8009ac4 <_printf_i+0x12c>
 8009b68:	0032      	movs	r2, r6
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	9906      	ldr	r1, [sp, #24]
 8009b6e:	9805      	ldr	r0, [sp, #20]
 8009b70:	9d07      	ldr	r5, [sp, #28]
 8009b72:	47a8      	blx	r5
 8009b74:	3001      	adds	r0, #1
 8009b76:	d0af      	beq.n	8009ad8 <_printf_i+0x140>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	079b      	lsls	r3, r3, #30
 8009b7c:	d415      	bmi.n	8009baa <_printf_i+0x212>
 8009b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b80:	68e0      	ldr	r0, [r4, #12]
 8009b82:	4298      	cmp	r0, r3
 8009b84:	daaa      	bge.n	8009adc <_printf_i+0x144>
 8009b86:	0018      	movs	r0, r3
 8009b88:	e7a8      	b.n	8009adc <_printf_i+0x144>
 8009b8a:	0022      	movs	r2, r4
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	9906      	ldr	r1, [sp, #24]
 8009b90:	9805      	ldr	r0, [sp, #20]
 8009b92:	9e07      	ldr	r6, [sp, #28]
 8009b94:	3219      	adds	r2, #25
 8009b96:	47b0      	blx	r6
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d09d      	beq.n	8009ad8 <_printf_i+0x140>
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	68e3      	ldr	r3, [r4, #12]
 8009ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba2:	1a9b      	subs	r3, r3, r2
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dcf0      	bgt.n	8009b8a <_printf_i+0x1f2>
 8009ba8:	e7e9      	b.n	8009b7e <_printf_i+0x1e6>
 8009baa:	2500      	movs	r5, #0
 8009bac:	e7f7      	b.n	8009b9e <_printf_i+0x206>
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	08009ea7 	.word	0x08009ea7
 8009bb4:	08009eb8 	.word	0x08009eb8

08009bb8 <_realloc_r>:
 8009bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bba:	0007      	movs	r7, r0
 8009bbc:	000e      	movs	r6, r1
 8009bbe:	0014      	movs	r4, r2
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d105      	bne.n	8009bd0 <_realloc_r+0x18>
 8009bc4:	0011      	movs	r1, r2
 8009bc6:	f7ff fb53 	bl	8009270 <_malloc_r>
 8009bca:	0005      	movs	r5, r0
 8009bcc:	0028      	movs	r0, r5
 8009bce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d103      	bne.n	8009bdc <_realloc_r+0x24>
 8009bd4:	f7ff fcc4 	bl	8009560 <_free_r>
 8009bd8:	0025      	movs	r5, r4
 8009bda:	e7f7      	b.n	8009bcc <_realloc_r+0x14>
 8009bdc:	f000 f81b 	bl	8009c16 <_malloc_usable_size_r>
 8009be0:	9001      	str	r0, [sp, #4]
 8009be2:	4284      	cmp	r4, r0
 8009be4:	d803      	bhi.n	8009bee <_realloc_r+0x36>
 8009be6:	0035      	movs	r5, r6
 8009be8:	0843      	lsrs	r3, r0, #1
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	d3ee      	bcc.n	8009bcc <_realloc_r+0x14>
 8009bee:	0021      	movs	r1, r4
 8009bf0:	0038      	movs	r0, r7
 8009bf2:	f7ff fb3d 	bl	8009270 <_malloc_r>
 8009bf6:	1e05      	subs	r5, r0, #0
 8009bf8:	d0e8      	beq.n	8009bcc <_realloc_r+0x14>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	0022      	movs	r2, r4
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	d900      	bls.n	8009c04 <_realloc_r+0x4c>
 8009c02:	001a      	movs	r2, r3
 8009c04:	0031      	movs	r1, r6
 8009c06:	0028      	movs	r0, r5
 8009c08:	f7ff fca1 	bl	800954e <memcpy>
 8009c0c:	0031      	movs	r1, r6
 8009c0e:	0038      	movs	r0, r7
 8009c10:	f7ff fca6 	bl	8009560 <_free_r>
 8009c14:	e7da      	b.n	8009bcc <_realloc_r+0x14>

08009c16 <_malloc_usable_size_r>:
 8009c16:	1f0b      	subs	r3, r1, #4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	1f18      	subs	r0, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da01      	bge.n	8009c24 <_malloc_usable_size_r+0xe>
 8009c20:	580b      	ldr	r3, [r1, r0]
 8009c22:	18c0      	adds	r0, r0, r3
 8009c24:	4770      	bx	lr
	...

08009c28 <_init>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2e:	bc08      	pop	{r3}
 8009c30:	469e      	mov	lr, r3
 8009c32:	4770      	bx	lr

08009c34 <_fini>:
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3a:	bc08      	pop	{r3}
 8009c3c:	469e      	mov	lr, r3
 8009c3e:	4770      	bx	lr
